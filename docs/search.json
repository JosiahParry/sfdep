[{"path":"/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to sfdep","title":"Contributing to sfdep","text":"outlines propose change sfdep. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to sfdep","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to sfdep","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"/CONTRIBUTING.html","id":"notes-for-contributing-new-functionality","dir":"","previous_headings":"Bigger changes","what":"Notes for contributing new functionality","title":"Contributing to sfdep","text":"Implementation new functionality first developed work spdep. function relies neighbors weights, function utilize listw object. accepting multiple columns input, accept lists providing multiple columns output, utilize data.frames (tibbles)","code":""},{"path":"/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to sfdep","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"JosiahParry/sfdep\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to sfdep","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to sfdep","text":"Please note sfdep project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/Version-0-1-1.html","id":"colocation-analysis","dir":"Articles","previous_headings":"","what":"Colocation Analysis","title":"Version 0.2.0","text":"release includes functionality compute colocation quotients. extremely exciting first open source implementation Colocation Quotients aware . three types colocation quotient (CLQ) release: global CLQ, pairwise CLQ, local CLQ. See colocation vignette detailed write . three new functions calculating CLQs: global_colocation() pairwise_colocation() local_colocation()","code":""},{"path":"/articles/Version-0-1-1.html","id":"spacetime","dir":"Articles","previous_headings":"","what":"Spacetime","title":"Version 0.2.0","text":"probably notable, introduction new spacetime class. class created byproduct creating functionality emerging hot spot analysis. detailed write see spacetime vignette. new functions available : Creating spacetime objects changing spacetime context determining active context casting spacetime sf objects determine object spacetime object determine spacetime object spatio-temporal full grid aka spacetime cube spatio-temporal sparse grid, add rows make spatio-temporal full grid (spacetime cube) add columns geometry context data context conduct emerging hotspot analysis update times locations attributes spacetime object Spacetime objects two contexts: data geometry. Currently data activated. can activate geometry context like : handy can find neighbors geometry link data. can brought data context use. can group dataset calculate metrics based different years. possible data spacetime cubes. Read spacetime vignette . can check object meets conditions spacetime cube. Since spacetime cube, safe perform statistics time slice. Now measure calculated timeslice, can connect geometries time slice purpose visualization. Note spacetime class’ objective avoid geometry duplication. necessary visualization ggplot2. can cast sf object as_sf().  Note holes due missing data original dataset.","code":"df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data df <- readr::read_csv(df_fp, col_types = \"ccidD\") geo <- sf::read_sf(geo_fp)  # create spacetime object bos <- spacetime(df, geo, \".region_id\", \"year\")  bos #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `year` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 1,680 × 5 #>    .region_id  ecometric  year value time_period #>  * <chr>       <chr>     <int> <dbl> <date>      #>  1 25025010405 Guns       2010  0.35 2010-01-01  #>  2 25025010405 Guns       2011  0.89 2011-01-01  #>  3 25025010405 Guns       2012  1.2  2012-01-01  #>  4 25025010405 Guns       2013  0.84 2013-01-01  #>  5 25025010405 Guns       2014  1.5  2014-01-01  #>  6 25025010405 Guns       2015  1.15 2015-01-01  #>  7 25025010405 Guns       2016  1.48 2016-01-01  #>  8 25025010405 Guns       2017  1.64 2017-01-01  #>  9 25025010405 Guns       2018  0.49 2018-01-01  #> 10 25025010405 Guns       2019  0.17 2019-01-01  #> # … with 1,670 more rows activate(bos, \"geometry\")  #> spacetime ──── #> Context:`geometry` #> 168 locations `.region_id` #> 10 time periods `year` #> ── geometry context ──────────────────────────────────────────────────────────── #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83 #> # A tibble: 168 × 2 #>    .region_id                                                           geometry #>  * <chr>                                                           <POLYGON [°]> #>  1 25025010405 ((-71.09009 42.34666, -71.09001 42.34668, -71.08941 42.34685, -7… #>  2 25025010404 ((-71.09066 42.33977, -71.09103 42.33961, -71.09177 42.33989, -7… #>  3 25025010801 ((-71.08159 42.3537, -71.08044 42.35402, -71.07995 42.35415, -71… #>  4 25025010702 ((-71.07066 42.35185, -71.07045 42.35142, -71.07282 42.35075, -7… #>  5 25025010204 ((-71.10683 42.34875, -71.1052 42.34844, -71.10468 42.34834, -71… #>  6 25025010802 ((-71.08159 42.3537, -71.08153 42.35358, -71.08145 42.3534, -71.… #>  7 25025010104 ((-71.08784 42.34746, -71.08805 42.34746, -71.0883 42.34747, -71… #>  8 25025000703 ((-71.12622 42.35041, -71.12685 42.35009, -71.12748 42.35, -71.1… #>  9 25025000504 ((-71.14175 42.3404, -71.14194 42.34001, -71.14234 42.34005, -71… #> 10 25025000704 ((-71.13551 42.34878, -71.13572 42.34904, -71.1358 42.34917, -71… #> # … with 158 more rows library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  bos_nb <- bos |>    activate(\"geometry\") |>    mutate(nb = st_contiguity(geometry),          wt = st_weights(nb))  bos_nb #> spacetime ──── #> Context:`geometry` #> 168 locations `.region_id` #> 10 time periods `year` #> ── geometry context ──────────────────────────────────────────────────────────── #> Simple feature collection with 168 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83 #> # A tibble: 168 × 4 #>    .region_id                                            geometry nb      wt     #>  * <chr>                                            <POLYGON [°]> <nb>    <list> #>  1 25025010405 ((-71.09009 42.34666, -71.09001 42.34668, -71.089… <int [… <dbl … #>  2 25025010404 ((-71.09066 42.33977, -71.09103 42.33961, -71.091… <int [… <dbl … #>  3 25025010801 ((-71.08159 42.3537, -71.08044 42.35402, -71.0799… <int [… <dbl … #>  4 25025010702 ((-71.07066 42.35185, -71.07045 42.35142, -71.072… <int [… <dbl … #>  5 25025010204 ((-71.10683 42.34875, -71.1052 42.34844, -71.1046… <int [… <dbl … #>  6 25025010802 ((-71.08159 42.3537, -71.08153 42.35358, -71.0814… <int [… <dbl … #>  7 25025010104 ((-71.08784 42.34746, -71.08805 42.34746, -71.088… <int [… <dbl … #>  8 25025000703 ((-71.12622 42.35041, -71.12685 42.35009, -71.127… <int [… <dbl … #>  9 25025000504 ((-71.14175 42.3404, -71.14194 42.34001, -71.1423… <int [… <dbl … #> 10 25025000704 ((-71.13551 42.34878, -71.13572 42.34904, -71.135… <int [… <dbl … #> # … with 158 more rows bos_nb <- bos_nb |>    set_wts() |>    set_nbs()  bos_nb #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `year` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 1,680 × 7 #>    .region_id  ecometric  year value time_period wt        nb        #>    <chr>       <chr>     <int> <dbl> <date>      <list>    <list>    #>  1 25025010405 Guns       2010  0.35 2010-01-01  <dbl [8]> <int [8]> #>  2 25025010404 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> #>  3 25025010801 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> #>  4 25025010702 Guns       2010  0.46 2010-01-01  <dbl [5]> <int [5]> #>  5 25025010204 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> #>  6 25025010802 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> #>  7 25025010104 Guns       2010  0    2010-01-01  <dbl [5]> <int [5]> #>  8 25025000703 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> #>  9 25025000504 Guns       2010  0.22 2010-01-01  <dbl [5]> <int [5]> #> 10 25025000704 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> #> # … with 1,670 more rows is_spacetime_cube(bos) #> [1] TRUE bos_gs <- bos_nb |>    activate(\"data\") |>    filter(ecometric == \"Guns\") |>    group_by(year) |>    mutate(g = local_g(value, nb, wt))  bos_gs #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `year` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 1,680 × 8 #> # Groups:   year [10] #>    .region_id  ecometric  year value time_period wt        nb        g          #>  * <chr>       <chr>     <int> <dbl> <date>      <list>    <list>    <localG>   #>  1 25025010405 Guns       2010  0.35 2010-01-01  <dbl [8]> <int [8]> -0.9870615 #>  2 25025010404 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> -0.9296040 #>  3 25025010801 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> -1.0821619 #>  4 25025010702 Guns       2010  0.46 2010-01-01  <dbl [5]> <int [5]> -1.0365653 #>  5 25025010204 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> -0.8636070 #>  6 25025010802 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> -1.0821619 #>  7 25025010104 Guns       2010  0    2010-01-01  <dbl [5]> <int [5]> -1.3275156 #>  8 25025000703 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> -1.0238855 #>  9 25025000504 Guns       2010  0.22 2010-01-01  <dbl [5]> <int [5]> -1.3431602 #> 10 25025000704 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> -1.2541524 #> # … with 1,670 more rows library(ggplot2)  # cast to sf object. Uses merge under the hood # so if duplicate columns exist, we can specify suffix names as_sf(bos_gs, suffixes = c(\"_geo\", \"_data\")) |>   ggplot(aes(fill = g)) +   geom_sf(color = NA) +   facet_wrap(\"year\", nrow = 2) +   scale_fill_gradient2(     high = scales::muted(\"red\"),     low = scales::muted(\"blue\")     ) +    labs(title = \"Gun ecometric hotspots\",        subtitle = \"2010 - 2019\") +    theme_void() +   theme(legend.position = \"bottom\")"},{"path":"/articles/Version-0-1-1.html","id":"point-pattern-analysis","dir":"Articles","previous_headings":"","what":"Point Pattern analysis","title":"Version 0.2.0","text":"additional functions added pertain point pattern analysis. Namely regarding finding centers creating ellipses based centers. functions supplement gaps spatial analysis libraries spatstat. can calculate euclidean median center plot points.  Additionally, can identify standard deviational ellipse point set.","code":"library(sf) #> Linking to GEOS 3.9.1, GDAL 3.2.3, PROJ 7.2.1; sf_use_s2() is TRUE library(sfdep)  pnts <- st_sample(guerry, 250) cent <- euclidean_median(pnts)  plot(pnts) plot(cent, col = \"red\", pch = 17, add = TRUE) ellip_cent <- std_dev_ellipse(pnts)  ellip <- st_ellipse(ellip_cent,             ellip_cent$sx,             ellip_cent$sy,             ellip_cent$theta)   plot(ellip) plot(pnts, add = TRUE)"},{"path":"/articles/Version-0-1-1.html","id":"general","dir":"Articles","previous_headings":"","what":"General","title":"Version 0.2.0","text":"include_self() remove_self() Fixes bug local_g_perm() local_gstar_perm() return G value converted z-score","code":""},{"path":"/articles/Version-0-1-2.html","id":"colocation-analysis","dir":"Articles","previous_headings":"","what":"Colocation Analysis","title":"Version 0.1.2","text":"extremely exciting first open source implementation Colocation Quotients aware . global_colocation() pairwise_colocation() local_colocation()","code":""},{"path":"/articles/Version-0-1-2.html","id":"spacetime","dir":"Articles","previous_headings":"","what":"Spacetime","title":"Version 0.1.2","text":"big addition sfdep. Creating spacetime objects changing spacetime context determining active context casting spacetime sf objects determine object spacetime object determine spacetime object spatio-temporal full grid aka spacetime cube spatio-temporal sparse grid, add rows make spatio-temporal full grid (spacetime cube) add columns geometry contexst data context conduct emerging hotspot analysis update times locations attributes spacetime object","code":""},{"path":"/articles/Version-0-1-2.html","id":"general","dir":"Articles","previous_headings":"","what":"General","title":"Version 0.1.2","text":"include_self() remove_self() Fixes bug local_g_perm() local_gstar_perm() return G value converted z-score","code":""},{"path":"/articles/Version-0-2-0.html","id":"colocation-analysis","dir":"Articles","previous_headings":"","what":"Colocation Analysis","title":"Version 0.2.0","text":"release includes functionality compute colocation quotients. extremely exciting first open source implementation Colocation Quotients aware . three types colocation quotient (CLQ) release: global CLQ, pairwise CLQ, local CLQ. See colocation vignette detailed write . three new functions calculating CLQs: global_colocation() pairwise_colocation() local_colocation()","code":""},{"path":"/articles/Version-0-2-0.html","id":"spacetime","dir":"Articles","previous_headings":"","what":"Spacetime","title":"Version 0.2.0","text":"probably notable, introduction new spacetime class. class created byproduct creating functionality emerging hot spot analysis. detailed write see spacetime vignette. new functions available : Creating spacetime objects changing spacetime context determining active context casting spacetime sf objects determine object spacetime object determine spacetime object spatio-temporal full grid aka spacetime cube spatio-temporal sparse grid, add rows make spatio-temporal full grid (spacetime cube) add columns geometry context data context conduct emerging hotspot analysis update times locations attributes spacetime object Spacetime objects two contexts: data geometry. Currently data activated. can activate geometry context like : handy can find neighbors geometry link data. can brought data context use. can group data set calculate metrics based different years. possible data spacetime cubes. Read spacetime vignette . can check object meets conditions spacetime cube. Since spacetime cube, safe perform statistics time slice. Now measure calculated timeslice, can connect geometries time slice purpose visualization. Note spacetime class’ objective avoid geometry duplication. necessary visualization ggplot2. can cast sf object as_sf().  Note holes due missing data original dataset.","code":"df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data df <- readr::read_csv(df_fp, col_types = \"ccidD\") geo <- sf::st_read(geo_fp) #> Reading layer `bos-ecometric' from data source  #>   `/private/var/folders/zc/tg2xwck53dg9sls8x4ndzdc00000gn/T/Rtmp2RGXTr/temp_libpath2b6f5ea0db20/sfdep/extdata/bos-ecometric.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83  # create spacetime object bos <- spacetime(df, geo, \".region_id\", \"year\")  bos #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `year` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 1,680 × 5 #>    .region_id  ecometric  year value time_period #>  * <chr>       <chr>     <int> <dbl> <date>      #>  1 25025010405 Guns       2010  0.35 2010-01-01  #>  2 25025010405 Guns       2011  0.89 2011-01-01  #>  3 25025010405 Guns       2012  1.2  2012-01-01  #>  4 25025010405 Guns       2013  0.84 2013-01-01  #>  5 25025010405 Guns       2014  1.5  2014-01-01  #>  6 25025010405 Guns       2015  1.15 2015-01-01  #>  7 25025010405 Guns       2016  1.48 2016-01-01  #>  8 25025010405 Guns       2017  1.64 2017-01-01  #>  9 25025010405 Guns       2018  0.49 2018-01-01  #> 10 25025010405 Guns       2019  0.17 2019-01-01  #> # ℹ 1,670 more rows activate(bos, \"geometry\")  #> spacetime ──── #> Context:`geometry` #> 168 locations `.region_id` #> 10 time periods `year` #> ── geometry context ──────────────────────────────────────────────────────────── #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83 #> First 10 features: #>     .region_id                       geometry #> 1  25025010405 POLYGON ((-71.09009 42.3466... #> 2  25025010404 POLYGON ((-71.09066 42.3397... #> 3  25025010801 POLYGON ((-71.08159 42.3537... #> 4  25025010702 POLYGON ((-71.07066 42.3518... #> 5  25025010204 POLYGON ((-71.10683 42.3487... #> 6  25025010802 POLYGON ((-71.08159 42.3537... #> 7  25025010104 POLYGON ((-71.08784 42.3474... #> 8  25025000703 POLYGON ((-71.12622 42.3504... #> 9  25025000504 POLYGON ((-71.14175 42.3404... #> 10 25025000704 POLYGON ((-71.13551 42.3487... library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  bos_nb <- bos |>    activate(\"geometry\") |>    mutate(nb = st_contiguity(geometry),          wt = st_weights(nb))  bos_nb #> spacetime ──── #> Context:`geometry` #> 168 locations `.region_id` #> 10 time periods `year` #> ── geometry context ──────────────────────────────────────────────────────────── #> Simple feature collection with 168 features and 3 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83 #> First 10 features: #>     .region_id                       geometry                                nb #> 1  25025010405 POLYGON ((-71.09009 42.3466... 2, 72, 93, 94, 108, 143, 144, 166 #> 2  25025010404 POLYGON ((-71.09066 42.3397...                       1, 143, 166 #> 3  25025010801 POLYGON ((-71.08159 42.3537...                     4, 6, 87, 164 #> 4  25025010702 POLYGON ((-71.07066 42.3518...                3, 6, 87, 112, 142 #> 5  25025010204 POLYGON ((-71.10683 42.3487...                         7, 11, 72 #> 6  25025010802 POLYGON ((-71.08159 42.3537...                       3, 4, 7, 87 #> 7  25025010104 POLYGON ((-71.08784 42.3474...                  5, 6, 11, 72, 87 #> 8  25025000703 POLYGON ((-71.12622 42.3504...                       10, 12, 145 #> 9  25025000504 POLYGON ((-71.14175 42.3404...            89, 146, 152, 154, 156 #> 10 25025000704 POLYGON ((-71.13551 42.3487...                  8, 145, 146, 152 #>                                                        wt #> 1  0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125 #> 2                         0.3333333, 0.3333333, 0.3333333 #> 3                                  0.25, 0.25, 0.25, 0.25 #> 4                                 0.2, 0.2, 0.2, 0.2, 0.2 #> 5                         0.3333333, 0.3333333, 0.3333333 #> 6                                  0.25, 0.25, 0.25, 0.25 #> 7                                 0.2, 0.2, 0.2, 0.2, 0.2 #> 8                         0.3333333, 0.3333333, 0.3333333 #> 9                                 0.2, 0.2, 0.2, 0.2, 0.2 #> 10                                 0.25, 0.25, 0.25, 0.25 bos_nb <- bos_nb |>    set_wts() |>    set_nbs()  bos_nb #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `year` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 1,680 × 7 #>    .region_id  ecometric  year value time_period wt        nb        #>    <chr>       <chr>     <int> <dbl> <date>      <list>    <list>    #>  1 25025010405 Guns       2010  0.35 2010-01-01  <dbl [8]> <int [8]> #>  2 25025010404 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> #>  3 25025010801 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> #>  4 25025010702 Guns       2010  0.46 2010-01-01  <dbl [5]> <int [5]> #>  5 25025010204 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> #>  6 25025010802 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> #>  7 25025010104 Guns       2010  0    2010-01-01  <dbl [5]> <int [5]> #>  8 25025000703 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> #>  9 25025000504 Guns       2010  0.22 2010-01-01  <dbl [5]> <int [5]> #> 10 25025000704 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> #> # ℹ 1,670 more rows is_spacetime_cube(bos) #> [1] TRUE bos_gs <- bos_nb |>    activate(\"data\") |>    filter(ecometric == \"Guns\") |>    group_by(year) |>    mutate(g = local_g(value, nb, wt))  bos_gs #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `year` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 1,680 × 8 #> # Groups:   year [10] #>    .region_id  ecometric  year value time_period wt        nb             g #>  * <chr>       <chr>     <int> <dbl> <date>      <list>    <list>     <dbl> #>  1 25025010405 Guns       2010  0.35 2010-01-01  <dbl [8]> <int [8]> -0.987 #>  2 25025010404 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> -0.930 #>  3 25025010801 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> -1.08  #>  4 25025010702 Guns       2010  0.46 2010-01-01  <dbl [5]> <int [5]> -1.04  #>  5 25025010204 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> -0.864 #>  6 25025010802 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> -1.08  #>  7 25025010104 Guns       2010  0    2010-01-01  <dbl [5]> <int [5]> -1.33  #>  8 25025000703 Guns       2010  0    2010-01-01  <dbl [3]> <int [3]> -1.02  #>  9 25025000504 Guns       2010  0.22 2010-01-01  <dbl [5]> <int [5]> -1.34  #> 10 25025000704 Guns       2010  0    2010-01-01  <dbl [4]> <int [4]> -1.25  #> # ℹ 1,670 more rows library(ggplot2)  # cast to sf object. Uses merge under the hood # so if duplicate columns exist, we can specify suffix names as_sf(bos_gs, suffixes = c(\"_geo\", \"_data\")) |>   ggplot(aes(fill = g)) +   geom_sf(color = NA) +   facet_wrap(\"year\", nrow = 2) +   scale_fill_gradient2(     high = scales::muted(\"red\"),     low = scales::muted(\"blue\")     ) +    labs(title = \"Gun ecometric hotspots\",        subtitle = \"2010 - 2019\") +    theme_void() +   theme(legend.position = \"bottom\")"},{"path":"/articles/Version-0-2-0.html","id":"point-pattern-analysis","dir":"Articles","previous_headings":"","what":"Point Pattern analysis","title":"Version 0.2.0","text":"additional functions added pertain point pattern analysis. Namely regarding finding centers creating ellipses based centers. functions supplement gaps spatial analysis libraries spatstat. can calculate euclidean median center plot points.  Additionally, can identify standard deviational ellipse point set.","code":"library(sf) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE library(sfdep)  pnts <- st_sample(guerry, 250) cent <- euclidean_median(pnts)  plot(pnts) plot(cent, col = \"red\", pch = 17, add = TRUE) ellip_cent <- std_dev_ellipse(pnts)  ellip <- st_ellipse(ellip_cent,             ellip_cent$sx,             ellip_cent$sy,             ellip_cent$theta)   plot(ellip) plot(pnts, add = TRUE)"},{"path":"/articles/basics-of-sfdep.html","id":"intro-what-is-spatial-relationship","dir":"Articles","previous_headings":"","what":"Intro / what is spatial relationship","title":"The Basics of sfdep","text":"sfdep provides users way conduct “Exploratory Spatial Data Analysis”, ESDA short. ESDA differs typical exploratory data analysis strictly exploring spatial relationships. might guessed, ESDA evaluates whether phenomena captured data dependent upon space–spatially auto-correlated. Much ESDA focused “Local Indicators Spatial Association”, LISAs short. LISAs measures developed identify whether observed pattern truly random impacted relationship space. Much philosophy LISAs ESDA captured Tobler’s First Law Geography “Everything related everything else. near things related distant things.” - Waldo R. Tobler, 1969 ’s tough state simply. Things next tend similar things away. assess whether near things related things less , typically lattice data. lattice created landscape region divided sub-areas. naturally, types data represented vector polygons.","code":""},{"path":"/articles/basics-of-sfdep.html","id":"neighbors","dir":"Articles","previous_headings":"","what":"Neighbors","title":"The Basics of sfdep","text":"describe neighbors ’m going steal extensively post “Understanding Spatial Autocorrelation”. assume spatial relationship data, taking belief data completely independent . nearer things related, census tracts close similar values. order evaluate whether nearer things related, must know observations nearby. polygon data identify neighbors based contiguity. contiguous means connected touching—think contiguous lower 48 states.","code":""},{"path":"/articles/basics-of-sfdep.html","id":"contiguities","dir":"Articles","previous_headings":"Neighbors","what":"Contiguities","title":"The Basics of sfdep","text":"two common contiguities based game chess. Let’s take simple chess board.  chess piece can move different way. pieces, exception knight, move either diagonally horizontally vertically. common contiguities queen rook contiguities. chess, queen can move diagonally horizontal vertically whereas rook can move horizontal vertically.  extend idea polygons. Queen contiguities identify neighbors based polygon touching. rook contiguities, identify neighbors based polygons touch side. social science research, need concerned queen contiguities. chess board might make intuitive sense, geographies really wonky real life. map 47th observation guerry object ’s queen contiguity neighbors.  can see polygon touching, even corner, considered neighbor point question. done every polygon data set.","code":""},{"path":"/articles/basics-of-sfdep.html","id":"understanding-the-spatial-weights","dir":"Articles","previous_headings":"","what":"Understanding the spatial weights","title":"The Basics of sfdep","text":"neighbors identified, can used calculate spatial weights. typical method calculating spatial weights row standardization (st_weights(nb, style = \"W\")). neighbor touches census tract assigned equal weight. assigning neighbor value 1 dividing number neighbors. 5 neighboring census tracts, spatial weight 0.2 (1 / 5 = 0.2). Going back chess board example, can take position d4 look queen contiguities. 8 squares immediately touch square. one squares considered neighbor given value 1. square divided total number neighbors, 8. simply looks like following","code":"(d4_nbs <- rep(1, 8)) #> [1] 1 1 1 1 1 1 1 1  d4_nbs / length(d4_nbs) #> [1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125"},{"path":"/articles/basics-of-sfdep.html","id":"creating-neighbors-and-weights","dir":"Articles","previous_headings":"","what":"Creating Neighbors and Weights","title":"The Basics of sfdep","text":"sfdep utilizes list objects neighbors weights. neighbors weights lists. identify contiguity-based neighbors, use st_contiguity() sf geometry column. calculate weights neighbors list, use st_weights() resultant neighbors list. convention typically called nb wt. lists can created line line within pipe. common usecase likely via dplyr pipeline.","code":"guerry_nb <- guerry %>%    mutate(nb = st_contiguity(geometry),          wt = st_weights(nb),          .before = 1) # to put them in the front  guerry_nb #> Simple feature collection with 85 features and 28 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 29 #>    nb        wt    code_dept count ave_id_geo  dept region department crime_pers #>  * <nb>      <lis> <fct>     <dbl>      <dbl> <int> <fct>  <fct>           <int> #>  1 <int [4]> <dbl> 01            1         49     1 E      Ain             28870 #>  2 <int [6]> <dbl> 02            1        812     2 N      Aisne           26226 #>  3 <int [6]> <dbl> 03            1       1418     3 C      Allier          26747 #>  4 <int [4]> <dbl> 04            1       1603     4 E      Basses-Al…      12935 #>  5 <int [3]> <dbl> 05            1       1802     5 E      Hautes-Al…      17488 #>  6 <int [7]> <dbl> 07            1       2249     7 S      Ardeche          9474 #>  7 <int [3]> <dbl> 08            1      35395     8 N      Ardennes        35203 #>  8 <int [3]> <dbl> 09            1       2526     9 S      Ariege           6173 #>  9 <int [5]> <dbl> 10            1      34410    10 E      Aube            19602 #> 10 <int [5]> <dbl> 11            1       2807    11 S      Aude            15647 #> # ℹ 75 more rows #> # ℹ 20 more variables: crime_prop <int>, literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, #> #   prostitutes <int>, distance <dbl>, area <int>, pop1831 <dbl>, #> #   geometry <MULTIPOLYGON>"},{"path":"/articles/basics-of-sfdep.html","id":"calculating-lisas","dir":"Articles","previous_headings":"","what":"Calculating LISAs","title":"The Basics of sfdep","text":"calculate LISAs typically provide numeric object(s), neighbor list, weights list–often argument nsim determine number simulations run. LISAs return data frame number rows input dataframe. resultant data frame can unnested, columns hoisted ease analysis. example calculate Local Moran use function local_moran() Now data frame, need unnest . can used visualization analysis. Additionally, LISAs can take number inputs, e.g. 3 numeric variables, provide list. Take example Local C statistic.","code":"lisa <- guerry_nb %>%    mutate(local_moran = local_moran(crime_pers, nb, wt, nsim = 199),          .before = 1)  lisa #> Simple feature collection with 85 features and 29 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 30 #>    local_moran$ii nb    wt    code_dept count ave_id_geo  dept region department #>  *          <dbl> <nb>  <lis> <fct>     <dbl>      <dbl> <int> <fct>  <fct>      #>  1         0.522  <int> <dbl> 01            1         49     1 E      Ain        #>  2         0.828  <int> <dbl> 02            1        812     2 N      Aisne      #>  3         0.804  <int> <dbl> 03            1       1418     3 C      Allier     #>  4         0.742  <int> <dbl> 04            1       1603     4 E      Basses-Al… #>  5         0.231  <int> <dbl> 05            1       1802     5 E      Hautes-Al… #>  6         0.839  <int> <dbl> 07            1       2249     7 S      Ardeche    #>  7         0.623  <int> <dbl> 08            1      35395     8 N      Ardennes   #>  8         1.65   <int> <dbl> 09            1       2526     9 S      Ariege     #>  9        -0.0198 <int> <dbl> 10            1      34410    10 E      Aube       #> 10         0.695  <int> <dbl> 11            1       2807    11 S      Aude       #> # ℹ 75 more rows #> # ℹ 32 more variables: local_moran$eii <dbl>, $var_ii <dbl>, $z_ii <dbl>, #> #   $p_ii <dbl>, $p_ii_sim <dbl>, $p_folded_sim <dbl>, $skewness <dbl>, #> #   $kurtosis <dbl>, $mean <fct>, $median <fct>, $pysal <fct>, #> #   crime_pers <int>, crime_prop <int>, literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, … lisa %>%    tidyr::unnest(local_moran) #> Simple feature collection with 85 features and 40 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 41 #>         ii       eii   var_ii   z_ii    p_ii p_ii_sim p_folded_sim skewness #>      <dbl>     <dbl>    <dbl>  <dbl>   <dbl>    <dbl>        <dbl>    <dbl> #>  1  0.522  -0.0463   0.364     0.943 0.346       0.36        0.18   0.0488  #>  2  0.828  -0.0382   0.112     2.59  0.00967     0.03        0.015  0.393   #>  3  0.804  -0.0242   0.165     2.04  0.0416      0.1         0.05   0.292   #>  4  0.742   0.0382   0.263     1.37  0.170       0.14        0.07   0.0239  #>  5  0.231  -0.00316  0.0307    1.34  0.181       0.14        0.07  -0.115   #>  6  0.839  -0.0234   0.336     1.49  0.137       0.16        0.08  -0.0348  #>  7  0.623   0.0680   1.53      0.449 0.653       0.66        0.33  -0.00121 #>  8  1.65   -0.0783   0.892     1.83  0.0678      0.07        0.035 -0.0656  #>  9 -0.0198  0.000993 0.000436 -0.993 0.321       0.32        0.16  -0.197   #> 10  0.695   0.0238   0.0859    2.29  0.0219      0.02        0.01   0.114   #> # ℹ 75 more rows #> # ℹ 33 more variables: kurtosis <dbl>, mean <fct>, median <fct>, pysal <fct>, #> #   nb <nb>, wt <list>, code_dept <fct>, count <dbl>, ave_id_geo <dbl>, #> #   dept <int>, region <fct>, department <fct>, crime_pers <int>, #> #   crime_prop <int>, literacy <int>, donations <int>, infants <int>, #> #   suicides <int>, main_city <ord>, wealth <int>, commerce <int>, #> #   clergy <int>, crime_parents <int>, infanticide <int>, … guerry_nb %>%    mutate(local_c = local_c_perm(list(crime_pers, wealth), nb, wt),           .before = 1) %>%    tidyr::unnest(local_c) #> Simple feature collection with 85 features and 38 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 39 #>       ci cluster   e_ci var_ci   z_ci   p_ci p_ci_sim p_folded_sim skewness #>    <dbl> <fct>    <dbl>  <dbl>  <dbl>  <dbl>    <dbl>        <dbl>    <dbl> #>  1 1.53  Positive  2.44  0.665 -1.11  0.266     0.284        0.142    0.176 #>  2 0.500 Positive  1.74  0.387 -1.99  0.0465    0.02         0.01     0.511 #>  3 0.642 Positive  1.70  0.251 -2.12  0.0341    0.024        0.012    0.105 #>  4 0.324 Positive  2.27  0.834 -2.13  0.0328    0.02         0.01     0.129 #>  5 0.298 Positive  2.33  0.971 -2.06  0.0396    0.008        0.004    0.264 #>  6 1.60  Positive  3.38  0.708 -2.11  0.0353    0.036        0.018    0.193 #>  7 2.04  Positive  3.22  1.60  -0.931 0.352     0.372        0.186    0.272 #>  8 2.20  Positive  3.40  1.74  -0.905 0.366     0.392        0.196    0.207 #>  9 0.507 Positive  1.68  0.367 -1.95  0.0518    0.04         0.02     0.196 #> 10 1.46  Positive  1.72  0.371 -0.424 0.671     0.684        0.342    0.263 #> # ℹ 75 more rows #> # ℹ 30 more variables: kurtosis <dbl>, nb <nb>, wt <list>, code_dept <fct>, #> #   count <dbl>, ave_id_geo <dbl>, dept <int>, region <fct>, department <fct>, #> #   crime_pers <int>, crime_prop <int>, literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, …"},{"path":"/articles/colocation-analysis.html","id":"global-colocation","dir":"Articles","previous_headings":"","what":"Global Colocation","title":"Colocation Quotients CLQs","text":"global_colocation() quotient used identify colocation single categorical vector \\(\\). result global CLQ approximately 0 insignificant. can interpret mean significant colocation “Main Cities.”","code":"A <- guerry[[\"main_city\"]] nb <- st_contiguity(sf::st_geometry(guerry)) global_colocation(A, nb, 299) #> $CLQ #> [1] 1.02841 #>  #> $p_sim #> [1] 0.21"},{"path":"/articles/colocation-analysis.html","id":"pairwise-colocation","dir":"Articles","previous_headings":"","what":"Pairwise Colocation","title":"Colocation Quotients CLQs","text":"pairwise CLQ evaluates colocation values categorical variables \\(\\) \\(B\\) global level. results one-directional \\(\\B\\). provide 2 vectors pairwise_colocation() function results matrix unique values \\(\\) column headers unique values \\(B\\) row names. additional columns indicate simulated p-values colocation quotients. look first row, see colocation \\(C \\3{:}Lg\\) significant value ~ \\(0.20\\). can interpret mean systematically less colocation region C near large main cities.","code":"A <- guerry$main_city B <- guerry$region nb <- st_knn(sf::st_geometry(guerry), 5) #> ! Polygon provided. Using point on surface. pairwise_colocation(B, A, nb, 199) #>        1:Sm     2:Med      3:Lg p_sim_1:Sm p_sim_2:Med p_sim_3:Lg #> C 0.8894118 1.1250679 0.1976471      0.400       0.005      0.000 #> E 1.8776471 0.8514027 0.9882353      0.000       0.010      0.525 #> N 0.1976471 1.0794570 1.1858824      0.000       0.055      0.265 #> S 1.5811765 0.9122172 0.8894118      0.030       0.095      0.395 #> W 0.6917647 1.0338462 0.9882353      0.205       0.280      0.495"},{"path":"/articles/colocation-analysis.html","id":"local-colocation","dir":"Articles","previous_headings":"","what":"Local Colocation","title":"Colocation Quotients CLQs","text":"local CLQ rather similar pairwise CLQ. key difference weights list used calculating CLQ. introductory paper, Wang et al. (2017) emphasize adaptive gaussian kernel weights used. introduces distance decay closer values heft distant ones calculating local CLQ. result local CLQ returns CLQ simulated p-value unique value B falls neighborhood. Note first observation CLQ C E. neighborhood first observation consists C E values. can verify like . ’s also worth noting can create local CLQ dplyr pipe like ","code":"# Identify A & B variables A <- guerry$main_city B <- guerry$region geo <- sf::st_geometry(guerry) nb <- st_knn(geo, 5) #> ! Polygon provided. Using point on surface. wt <- st_kernel_weights(nb, geo, \"gaussian\", adaptive = TRUE) #> ! Polygon provided. Using point on surface.  res <- local_colocation(A, B, nb, wt, 49)  head(res) #>           C        E        N        S  W p_sim_C p_sim_E p_sim_N p_sim_S #> 1 0.8461533 4.095023       NA       NA NA    0.12    0.02      NA      NA #> 2        NA       NA 4.941176       NA NA      NA      NA    0.02      NA #> 3 4.9411765       NA       NA       NA NA    0.02      NA      NA      NA #> 4        NA 2.090837       NA 2.850339 NA      NA    0.12      NA    0.06 #> 5        NA 3.268800       NA 1.672377 NA      NA    0.06      NA    0.36 #> 6 1.1554807 1.878544       NA 1.907152 NA    0.26    0.14      NA    0.24 #>   p_sim_W #> 1      NA #> 2      NA #> 3      NA #> 4      NA #> 5      NA #> 6      NA # view first row res[1,] #>           C        E  N  S  W p_sim_C p_sim_E p_sim_N p_sim_S p_sim_W #> 1 0.8461533 4.095023 NA NA NA    0.12    0.02      NA      NA      NA  # find xj values for the B column based on neighbors # take first observations neighbors sfdep::find_xj(B, nb)[[1]]  #> [1] E E C E E #> Levels: C E N S W res_tidy <- guerry |>    select(main_city, region) |>    mutate(nb = st_knn(geometry, 5),          wt = st_kernel_weights(nb, geometry, \"gaussian\", adaptive = TRUE),          lclq = local_colocation(main_city, region, nb, wt, 99)) |>    tidyr::unnest(lclq) #> ! Polygon provided. Using point on surface. #> ! Polygon provided. Using point on surface.  slice(res_tidy, 1:5) #> Simple feature collection with 5 features and 14 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 595532 ymin: 1858801 xmax: 975716 ymax: 2564568 #> CRS:           NA #> # A tibble: 5 × 15 #>   main_city region                       geometry nb    wt         C     E     N #>   <ord>     <fct>                  <MULTIPOLYGON> <nb>  <lis>  <dbl> <dbl> <dbl> #> 1 2:Med     E      (((801150 2092615, 800669 209… <int> <dbl>  0.846  4.10 NA    #> 2 2:Med     N      (((729326 2521619, 729320 252… <int> <dbl> NA     NA     4.94 #> 3 2:Med     C      (((710830 2137350, 711746 213… <int> <dbl>  4.94  NA    NA    #> 4 1:Sm      E      (((882701 1920024, 882408 192… <int> <dbl> NA      2.09 NA    #> 5 1:Sm      E      (((886504 1922890, 885733 192… <int> <dbl> NA      3.27 NA    #> # ℹ 7 more variables: S <dbl>, W <dbl>, p_sim_C <dbl>, p_sim_E <dbl>, #> #   p_sim_N <dbl>, p_sim_S <dbl>, p_sim_W <dbl>"},{"path":"/articles/conditional-permutation.html","id":"inference-using-conditional-permutation","dir":"Articles","previous_headings":"","what":"Inference using conditional permutation","title":"Conditional Permutations with sfdep","text":"spatial data, always start assumption spatial randomness. Traditional hypothesis testing like t-test often use assumption normality. assumption, however, often broken spatial data. analytical p-values (p-values come reference distribution normal distribution) often unreliable, inaccurate measures significance. reason, ESDA, often use simulated, pseudo, p-values. Simulated p-values calculated creating reference distribution comparing observed statistic reference distribution. reference created making M conditional permutations data set calculating test statistic. ratio times simulated statistic greater observed statistic (either direction) number simulations becomes simulated p-value.","code":""},{"path":"/articles/conditional-permutation.html","id":"worked-example","dir":"Articles","previous_headings":"Inference using conditional permutation","what":"Worked Example","title":"Conditional Permutations with sfdep","text":"can use cond_permute_nb() create conditional permutation neighbors list. permuted neighbor list can create new weights list calculate global Geary C permutation. say, 199 times, can make fairly robust reference distribution. putting code replicate() call. replicate() execute code number times determined first argument. calculate simulated p-values many measures sfdep. can plot reference distribution observed value reference distribution.  can see observed Geary C value extreme falls close center distribution. can now calculate pseudo p-value using formula \\((M + 1) / (R + 1)\\) approach taken Pysal sfdep methods apply provided spdep.","code":"p_nb <- cond_permute_nb(nb)  p_wt <- st_weights(p_nb)  observed <- global_c(x, p_nb, p_wt)    observed #> $C #> [1] 1.010342 #>  #> $K #> [1] 2.400641 reps <- replicate(199, {   p_nb <- cond_permute_nb(nb)   p_wt <- st_weights(p_nb)   global_c(x, p_nb, p_wt)[[\"C\"]] }) library(ggplot2)  ggplot(data.frame(sim_val = reps),         aes(sim_val)) +   geom_histogram(bins = 20) +   geom_vline(xintercept = observed[[\"C\"]],               color = \"#6fb381\",               lty = 2,              ) +   theme_light() # simulated p-value (sum(observed[[\"C\"]] <= reps) + 1) / (199 + 1) #> [1] 0.45"},{"path":"/articles/spacetime-s3.html","id":"spatio-temporal-data","dir":"Articles","previous_headings":"","what":"Spatio-temporal data","title":"spacetime and spacetime cubes","text":"Traditionally “spatio-temporal data often come form single tables” can typically categorized “time-wide”, “space-wide”, “long formats.” long formats, often referred “tidy”, row identifies unique location time observation represented column dedicated time another locations. typical presentation panel data. Space-wide data present time period across row locational information column. Whereas time-wide representation location data rows time period represented new column. flat formats linked geographies represent meaningful way. flat files typically contain identifier location, spatial representation. spacetime class developed particular focus lattice data. , create representation spatio-temporal data set regions number different time-periods e.g. population densities census tracts year. represent spatial data temporal context Pebesma, 2012 identifies number spatio-temporal layouts, two particular interest. spatio-temporal full grid sparse grids. Given number spatial features \\(n\\), time periods \\(m\\), spatio-temporal full grid contains \\(n \\times m\\) rows. location recorded observation time periods \\(m\\). example, 10 locations 20 time periods, 20 observations per location meaning \\(10 \\times 20 = 200\\) observations. efficient complete time-series location. missing observations locations time periods entirely omitted data set, spatio-temporal sparse grid. case \\(N \\lt m \\times n\\)","code":""},{"path":"/articles/spacetime-s3.html","id":"spacetime-s3-class-in-sfdep","dir":"Articles","previous_headings":"","what":"spacetime s3 class in sfdep","title":"spacetime and spacetime cubes","text":"Inspired design tidygraph package, spacetime class links data frame sf object based shared location identifier column. referred data context geometry context. spacetime class allows switch different contexts work individually see fit. Typically, one wants represent location data multiple time periods containing information geography, sf object used duplicates geometry location time period can computationally expensive. linking sf objects data frame based location ID, able avoid problem four important aspects spacetime class: data: data.frame object geometry: sf object location identifiers time column","code":""},{"path":"/articles/spacetime-s3.html","id":"creating-a-spacetime-object","dir":"Articles","previous_headings":"spacetime s3 class in sfdep","what":"Creating a spacetime object","title":"spacetime and spacetime cubes","text":"two ways create spacetime objects: 1) as_spacetime() 2) spacetime() new_spacetime(). former takes sf object contains location IDs, times, geometry converts spacetime object. Whereas constructor functions require data frame separate sf object containing geometry. Let’s create sample data set using guerry representation, duplicate geometries location, cast spacetime object using as_spacetime(). Alternatively, scenario, geometry data two separate objects. case can use spacetime() constructor. ’s required arguments .data, .geometry, .loc_col, .time_col. .data must data frame .geometry must tibble. create data frame df contains columns location identifier, time period, variables interest case crime_pers. Note location identifier column two objects—requirement. aside, ’d note as_spacetime() uses sf distinct method can bit computationally intense depending geometries. ’d recommend using spacetime() constructor always. spacetime objects, can also cast back sf objects using as_sf(x).","code":"# replicate the guerry dataset 10 times x <- purrr::map_dfr(1:10, ~guerry) |>    select(code_dept, crime_pers) |>           # create an indicator for time period   mutate(time_period = sort(rep(1:10, 85)),           # add some noise           crime_pers = crime_pers * runif(850, max = 2))  x #> Simple feature collection with 850 features and 3 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 850 × 4 #>    code_dept crime_pers                                     geometry time_period #>  * <fct>          <dbl>                               <MULTIPOLYGON>       <int> #>  1 01            23049. (((801150 2092615, 800669 2093190, 800688 2…           1 #>  2 02            42712. (((729326 2521619, 729320 2521230, 729280 2…           1 #>  3 03            20588. (((710830 2137350, 711746 2136617, 712430 2…           1 #>  4 04             5020. (((882701 1920024, 882408 1920733, 881778 1…           1 #>  5 05            17800. (((886504 1922890, 885733 1922978, 885479 1…           1 #>  6 07            10241. (((747008 1925789, 746630 1925762, 745723 1…           1 #>  7 08            60974. (((818893 2514767, 818614 2514515, 817900 2…           1 #>  8 09             8242. (((509103 1747787, 508820 1747513, 508154 1…           1 #>  9 10             8596. (((775400 2345600, 775068 2345397, 773587 2…           1 #> 10 11            17265. (((626230 1810121, 626269 1810496, 627494 1…           1 #> # ℹ 840 more rows spt <- as_spacetime(x, \"code_dept\", \"time_period\") df <- sf::st_drop_geometry(x) geo <- select(guerry, code_dept)  head(df) #> # A tibble: 6 × 3 #>   code_dept crime_pers time_period #>   <fct>          <dbl>       <int> #> 1 01            23049.           1 #> 2 02            42712.           1 #> 3 03            20588.           1 #> 4 04             5020.           1 #> 5 05            17800.           1 #> 6 07            10241.           1 spt <- spacetime(   .data = df,    .geometry = geo,    .loc_col = \"code_dept\",    .time_col = \"time_period\"   )   spt #> spacetime ──── #> Context:`data` #> 85 locations `code_dept` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 850 × 3 #>    code_dept crime_pers time_period #>  * <fct>          <dbl>       <int> #>  1 01            23049.           1 #>  2 02            42712.           1 #>  3 03            20588.           1 #>  4 04             5020.           1 #>  5 05            17800.           1 #>  6 07            10241.           1 #>  7 08            60974.           1 #>  8 09             8242.           1 #>  9 10             8596.           1 #> 10 11            17265.           1 #> # ℹ 840 more rows"},{"path":"/articles/spacetime-s3.html","id":"spacetime-contexts","dir":"Articles","previous_headings":"","what":"Spacetime Contexts","title":"spacetime and spacetime cubes","text":"Spacetime objects two contexts: data geometry contexts. data context consists data frame object. can manipulated just like data frame. switch contexts using activate(). switch data context activate “data.” geometry context sf object can used like sf object activated activate(x, \"geometry\").","code":"activate(spt, \"data\") #> spacetime ──── #> Context:`data` #> 85 locations `code_dept` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 850 × 3 #>    code_dept crime_pers time_period #>  * <fct>          <dbl>       <int> #>  1 01            23049.           1 #>  2 02            42712.           1 #>  3 03            20588.           1 #>  4 04             5020.           1 #>  5 05            17800.           1 #>  6 07            10241.           1 #>  7 08            60974.           1 #>  8 09             8242.           1 #>  9 10             8596.           1 #> 10 11            17265.           1 #> # ℹ 840 more rows spt |>    activate(\"geometry\")  #> spacetime ──── #> Context:`geometry` #> 85 locations `code_dept` #> 10 time periods `time_period` #> ── geometry context ──────────────────────────────────────────────────────────── #> Simple feature collection with 85 features and 1 field #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 2 #>    code_dept                                                            geometry #>  * <fct>                                                          <MULTIPOLYGON> #>  1 01        (((801150 2092615, 800669 2093190, 800688 2095430, 800780 2095795,… #>  2 02        (((729326 2521619, 729320 2521230, 729280 2518544, 728751 2517520,… #>  3 03        (((710830 2137350, 711746 2136617, 712430 2135212, 712070 2134132,… #>  4 04        (((882701 1920024, 882408 1920733, 881778 1921200, 881526 1922332,… #>  5 05        (((886504 1922890, 885733 1922978, 885479 1923276, 883061 1925266,… #>  6 07        (((747008 1925789, 746630 1925762, 745723 1925138, 744216 1925236,… #>  7 08        (((818893 2514767, 818614 2514515, 817900 2514467, 817327 2514945,… #>  8 09        (((509103 1747787, 508820 1747513, 508154 1747093, 505861 1746627,… #>  9 10        (((775400 2345600, 775068 2345397, 773587 2345177, 772940 2344780,… #> 10 11        (((626230 1810121, 626269 1810496, 627494 1811321, 627681 1812424,… #> # ℹ 75 more rows"},{"path":"/articles/spacetime-s3.html","id":"spatio-temporal-grids-and-spacetime","dir":"Articles","previous_headings":"","what":"Spatio-temporal grids and spacetime","title":"spacetime and spacetime cubes","text":"Unlike spacetime, sfdep make explicit distinctions spatio-temporal full sparse grids. Rather, approach laissez faire. design spacetime interface flexible designed let user clean data whatever tools familiar specification. distinction sparse full grids important comes analyzing data. example emerging hot spot analysis requires spatio-temporal full-grid. sfdep utilizes phrase “spacetime cube” popularized ESRI refer spatio-temporal full grid.","code":""},{"path":"/articles/spacetime-s3.html","id":"spacetime-cubes","dir":"Articles","previous_headings":"Spatio-temporal grids and spacetime","what":"Spacetime Cubes","title":"spacetime and spacetime cubes","text":"spacetime object spacetime cube every location value every time index. Another way saying location contains regular time-series. ESRI terminology, basic unit spacetime cube bin. bin unique combination location time index. time index, collection every location called time slice. every location, collection every bin time index referred bin time-series.  can test object spacetime cube is_spacetime_cube() take sample 800 850 rows spt makes sparse grid. object spare spatio-temporal grid can make full one using complete_spacetime_cube(). works similarly [tidyr::complete()]. complete_spacetime_cube() ensures row combination location time. New rows contain missing values One conditions spactime cube time-series must regular (one observation time index). can create sample data replacement create irregular time-series multiple locations. error informative. unique bins spacetime data. can check . Spacetime cubes used emerging hot spot analysis .","code":"is_spacetime_cube(spt) #> [1] TRUE sparse_spt <- dplyr::slice_sample(spt, n = 800)  is_spacetime_cube(sparse_spt) #> ! Number of rows does not equal `n time-periods x n locations` #> [1] FALSE spt_complete <- complete_spacetime_cube(sparse_spt) #> ! Vars(s) `crime_pers` is missing 50 value(s).  is_spacetime_cube(spt_complete) #> [1] TRUE set.seed(0) sparse_spt <- dplyr::slice_sample(spt, n = 800, replace = TRUE)  complete_spacetime_cube(sparse_spt) #> Error in `complete_spacetime_cube()`: #> ! Location and time combinations are not unique. #> ℹ There should only be one observation per time and location combination. dplyr::count(sparse_spt, time_period, code_dept) #> spacetime ──── #> Context:`data` #> 85 locations `code_dept` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 517 × 3 #>    time_period code_dept     n #>          <int> <fct>     <int> #>  1           1 01            1 #>  2           1 03            1 #>  3           1 05            1 #>  4           1 07            1 #>  5           1 09            1 #>  6           1 12            1 #>  7           1 16            1 #>  8           1 17            2 #>  9           1 18            1 #> 10           1 21            2 #> # ℹ 507 more rows emerging_hotspot_analysis(spt, \"crime_pers\", threshold = 0.05) #> # A tibble: 85 × 4 #>    location     tau p_value classification      #>    <fct>      <dbl>   <dbl> <chr>               #>  1 01       -0.0667   0.858 sporadic hotspot    #>  2 02        0.289    0.283 sporadic hotspot    #>  3 03       -0.111    0.721 sporadic hotspot    #>  4 04       -0.244    0.371 sporadic coldspot   #>  5 05       -0.244    0.371 sporadic coldspot   #>  6 07       -0.422    0.107 sporadic coldspot   #>  7 08        0.200    0.474 consecutive hotspot #>  8 09        0.422    0.107 sporadic coldspot   #>  9 10        0.378    0.152 sporadic hotspot    #> 10 11        0.156    0.592 sporadic coldspot   #> # ℹ 75 more rows"},{"path":"/articles/spdep-and-pysal.html","id":"global-statistics","dir":"Articles","previous_headings":"","what":"Global Statistics","title":"Comparison to spdep and pysal","text":"Measures global spatial autocorrelation.","code":""},{"path":"/articles/spdep-and-pysal.html","id":"local-indicators-of-spatial-association","dir":"Articles","previous_headings":"","what":"Local Indicators of Spatial Association","title":"Comparison to spdep and pysal","text":"Measures local spatial autocorrelation.","code":""},{"path":"/articles/spdep-and-pysal.html","id":"not-implemented","dir":"Articles","previous_headings":"Local Indicators of Spatial Association","what":"Not implemented","title":"Comparison to spdep and pysal","text":"Functions present Pysal implemented sfdep.","code":""},{"path":"/articles/understanding-emerging-hotspots.html","id":"gettis-ord-gi","dir":"Articles","previous_headings":"","what":"Gettis-Ord Gi*","title":"Emerging Hot Spot Analysis","text":"Gettis-Ord Gi Gi* (pronounced gee-eye-star) one earliest LISAs. Gi Gi* measures typically reported Z-score high values indicate high-high cluster negative Z-scores indicate low-low cluster. high-low low-high classifications like local Moran. “Gi statistic consist ratio weighted average values neighboring locations, sum values, including value location (\\(x_i\\))” (Local Spatial Autocorrelation (2), GeoDa Center). \\[ G_i = \\frac{\\sum_{j \\ne }W_{ij}X_j}           {\\sum_{j \\ne }X_j} \\] Gi* statistic includes focal (self, ith) observation neighborhood. \\[ G_i* = \\frac{\\sum_{j}W_{ij}X_j}           {\\sum_{j}X_j} \\]","code":""},{"path":"/articles/understanding-emerging-hotspots.html","id":"calculating-the-local-gi","dir":"Articles","previous_headings":"Gettis-Ord Gi*","what":"Calculating the local Gi*","title":"Emerging Hot Spot Analysis","text":"calculate local Gi* using sfdep, especially aware neighbors list create . default, create neighbors list, exclude self neighbors list seems little silly say “neighbor.” However, want calculate local Gi*, must sure explicitly add using include_self() , follow example laid GeoDa center documentation calculate plot local Gi* statistic donations using Guerry dataset. First create neighbor list ensuring self included create weights list new neighbors list. Following, calculate local Gi* using local_gstar_perm() donations column creates new data frame column called gi_star. unnest using tidyr::unnest(). Lastly, classify clusters using combination mutate() case_when() piped ggplot map. perfect recreation GeoDa map, close—differences likely due conditional permutation (see conditional permutation vignette significance calculation).  EHSA, calculate statistic time period.","code":"library(sfdep) library(dplyr)  guerry_nb <- guerry |>    mutate(     nb = include_self(st_contiguity(geometry)),          wt = st_weights(nb)     ) donat_gistar <- guerry_nb |>    transmute(gi_star = local_gstar_perm(donations, nb, wt, nsim = 199)) |>    tidyr::unnest(gi_star)  donat_gistar #> Simple feature collection with 85 features and 10 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 11 #>    gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness #>      <dbl> <fct>    <dbl>      <dbl>   <dbl>   <dbl> <dbl>        <dbl>    <dbl> #>  1  -1.49  Low     0.0111 0.0000118   -1.42   0.156   0.08        0.04     0.912 #>  2  -0.482 High    0.0122 0.00000887  -0.638  0.523   0.6         0.3      0.813 #>  3   0.652 High    0.0129 0.00000891   0.296  0.768   0.66        0.33     1.00  #>  4  -1.65  Low     0.0102 0.0000114   -1.34   0.181   0.08        0.04     1.72  #>  5  -1.08  High    0.0119 0.0000149   -1.20   0.232   0.11        0.055    1.13  #>  6  -2.38  Low     0.0111 0.00000781  -2.19   0.0289  0.01        0.005    0.859 #>  7  -0.362 Low     0.0114 0.0000119   -0.340  0.734   0.82        0.41     0.744 #>  8  -0.720 Low     0.0103 0.0000118   -0.451  0.652   0.77        0.385    0.920 #>  9  -1.45  Low     0.0112 0.0000111   -1.28   0.201   0.11        0.055    0.916 #> 10  -1.32  Low     0.0105 0.00000951  -1.04   0.300   0.27        0.135    0.982 #> # ℹ 75 more rows #> # ℹ 2 more variables: kurtosis <dbl>, geometry <MULTIPOLYGON> library(ggplot2)  donat_gistar |>    mutate(cluster = case_when(     p_folded_sim > 0.05 ~ \"Not Significant\",     p_folded_sim <= 0.05 & gi_star < 0 ~ \"Low\",     p_folded_sim <= 0.05 & gi_star > 0 ~ \"High\"   )) |>    ggplot(aes(fill = cluster)) +   geom_sf(lwd = 0.2, color = \"black\") +   scale_fill_manual(values = c(\"High\" = \"red\",                                \"Low\" = \"Blue\",                                 \"Not Significant\" = \"white\")) +   theme_void()"},{"path":"/articles/understanding-emerging-hotspots.html","id":"mann-kendall-test","dir":"Articles","previous_headings":"","what":"Mann-Kendall Test","title":"Emerging Hot Spot Analysis","text":"calculations local Gi* unit time every geography, can evaluate hotspots change time. incorporate time-series analysis use Mann-Kendall (MK) Trend test. MK test nonparametric test checks monotonic trends. don’t recall term monotonic calculus class, ’s okay. monotonic series function one increases (decreases) never changes direction. long function either stays flat continues increase, monotonic. benefit test nonparametric trend can non-linear. , MK test check time-series strictly monotonic—e.g. every subsequent unit increasing decreasing—overall series increasing decreasing. example monotonic upward trend linear.  realistic example, let’s take look economics dataset ggplot2 contains data FRED. ’ll use psavert variable contains data personal savings rates United States.  visual inspection, can tell overall trend decreasing. MK test can confirm . use Kendall::MannKendall() test trend significantly decreasing. results show tau p-value. Tau ranges -1 1 -1 perfectly decreasing series 1 perfectly increasing series. p-value extremely small indicating null-hypothesis (trend) can rejected. tau -0.64 indicates moderate downward trend.","code":"series <- c(0, 1, 1.4, 1.5, 1.6, 5, 5, 5.5, 8, seq(8, 8.5, length.out = 5))  plot(series, type = \"l\") econ <- ggplot2::economics  ggplot(econ, aes(date, psavert)) +   geom_line() +   theme_light() Kendall::MannKendall(econ$psavert) #> tau = -0.644, 2-sided pvalue =< 2.22e-16"},{"path":"/articles/understanding-emerging-hotspots.html","id":"the-whole-game","dir":"Articles","previous_headings":"","what":"The whole game","title":"Emerging Hot Spot Analysis","text":"’ve gone briefly local Gi* Mann-Kendall Test. EHSA combines evaluate trends hot cold spots time. EHSA utilizes spacetime cube, spatio-temporal full grid. Please see spacetime vignette spacetime representations. short, spacetime cube contains regular time-series location dataset—.e. \\(n \\times m\\) observations n number locations m number times. time-slice (.e. complete set geometries given time) local Gi* calculated. Say 10 times, \\(G_{,t=1}^*, \\ldots, G_{,t=10}^*\\). , given location’s time-series Gi*, assessed using MK test.","code":""},{"path":"/articles/understanding-emerging-hotspots.html","id":"a-hands-on-example","dir":"Articles","previous_headings":"","what":"A hands on example","title":"Emerging Hot Spot Analysis","text":"can compute EHSA manually using sfdep spacetime classes. example utilize Ecometric Data Boston Area Research Initiative (data documentation). data generated 911 calls Boston 2010 - 2020 aggregated Census Block Group (CBG) level. column value indicates calculated prevalence derived Exploratory Factor Analysis population projections.","code":""},{"path":"/articles/understanding-emerging-hotspots.html","id":"data","dir":"Articles","previous_headings":"A hands on example","what":"Data","title":"Emerging Hot Spot Analysis","text":"data stored internal data file bos-ecometric.csv bos-ecometric.geojson. read df geo create new spacetime object called bos . Note: 2022-05-31 data available development version, please install remotes::install_github(\"josiahparry/sfdep\").","code":"# Create objects to store file paths  df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data  df <- readr::read_csv(df_fp, col_types = \"ccidD\") geo <- sf::st_read(geo_fp) #> Reading layer `bos-ecometric' from data source  #>   `/private/var/folders/zc/tg2xwck53dg9sls8x4ndzdc00000gn/T/Rtmp2RGXTr/temp_libpath2b6f5ea0db20/sfdep/extdata/bos-ecometric.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83   # Create spacetime object called `bos` bos <- spacetime(df, geo,                   .loc_col = \".region_id\",                  .time_col = \"time_period\")  bos #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 1,680 × 5 #>    .region_id  ecometric  year value time_period #>  * <chr>       <chr>     <int> <dbl> <date>      #>  1 25025010405 Guns       2010  0.35 2010-01-01  #>  2 25025010405 Guns       2011  0.89 2011-01-01  #>  3 25025010405 Guns       2012  1.2  2012-01-01  #>  4 25025010405 Guns       2013  0.84 2013-01-01  #>  5 25025010405 Guns       2014  1.5  2014-01-01  #>  6 25025010405 Guns       2015  1.15 2015-01-01  #>  7 25025010405 Guns       2016  1.48 2016-01-01  #>  8 25025010405 Guns       2017  1.64 2017-01-01  #>  9 25025010405 Guns       2018  0.49 2018-01-01  #> 10 25025010405 Guns       2019  0.17 2019-01-01  #> # ℹ 1,670 more rows"},{"path":"/articles/understanding-emerging-hotspots.html","id":"local-gi","dir":"Articles","previous_headings":"A hands on example","what":"Local Gi*","title":"Emerging Hot Spot Analysis","text":"first step EHSA calculate local Gi* time period. , however, requires couple preceding steps. calculate Gi* need identify neighbors weights. , activate geometry context create two new columns nb wt. activate data context copy nb wt columns time-slice using set_nbs() set_wts()—row order important rearrange observations using set_nbs() set_wts(). dataset now neighbors weights time-slice. can use new columns manually calculate local Gi* location. can grouping time_period using local_gstar_perm(). , unnest new data frame column gi_star. Gi* measures can evaluate location trend using Mann-Kendall test.","code":"bos_nb <- bos |>    activate(\"geometry\") |>    mutate(     nb = include_self(st_contiguity(geometry)),     wt = st_weights(nb)   ) |>    set_nbs(\"nb\") |>    set_wts(\"wt\")  head(bos_nb) #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #> # A tibble: 6 × 7 #>   .region_id  ecometric  year value time_period nb        wt        #>   <chr>       <chr>     <int> <dbl> <date>      <list>    <list>    #> 1 25025010405 Guns       2010  0.35 2010-01-01  <int [9]> <dbl [9]> #> 2 25025010404 Guns       2010  0    2010-01-01  <int [4]> <dbl [4]> #> 3 25025010801 Guns       2010  0    2010-01-01  <int [5]> <dbl [5]> #> 4 25025010702 Guns       2010  0.46 2010-01-01  <int [6]> <dbl [6]> #> 5 25025010204 Guns       2010  0    2010-01-01  <int [4]> <dbl [4]> #> 6 25025010802 Guns       2010  0    2010-01-01  <int [5]> <dbl [5]> gi_stars <- bos_nb |>    group_by(time_period) |>    mutate(gi_star = local_gstar_perm(value, nb, wt)) |>    tidyr::unnest(gi_star)   gi_stars |>    select(.region_id, time_period, gi_star, p_folded_sim) #> # A tibble: 1,680 × 4 #> # Groups:   time_period [10] #>    .region_id  time_period gi_star p_folded_sim #>    <chr>       <date>        <dbl>        <dbl> #>  1 25025010405 2010-01-01   -0.987        0.138 #>  2 25025010404 2010-01-01   -1.37         0.152 #>  3 25025010801 2010-01-01   -1.48         0.134 #>  4 25025010702 2010-01-01   -0.863        0.14  #>  5 25025010204 2010-01-01   -1.32         0.194 #>  6 25025010802 2010-01-01   -1.48         0.114 #>  7 25025010104 2010-01-01   -1.68         0.066 #>  8 25025000703 2010-01-01   -1.44         0.104 #>  9 25025000504 2010-01-01   -1.42         0.058 #> 10 25025000704 2010-01-01   -1.62         0.062 #> # ℹ 1,670 more rows"},{"path":"/articles/understanding-emerging-hotspots.html","id":"mann-kendall-test-1","dir":"Articles","previous_headings":"A hands on example","what":"Mann-Kendall Test","title":"Emerging Hot Spot Analysis","text":"Let’s first take single location, 25025010403, evaluate Mann-Kendall statistic hand. can extend location. Note bit finagling MK test make work nicely dplyr::summarise() call. can also visualized trend.  result, sl p-value. result tells us slight upward insignificant trend. can replicate location using group_by(). can see locations becoming significantly colder others becoming significantly warmer.","code":"cbg <- gi_stars |>    ungroup() |>    filter(.region_id == \"25025010403\") |>    select(.region_id, time_period, year, gi_star) # visualize trend ggplot(cbg, aes(time_period, gi_star)) +   geom_line() +   theme_light() cbg |>    summarise(mk = list(unclass(Kendall::MannKendall(gi_star)))) |>    tidyr::unnest_wider(mk) #> # A tibble: 1 × 5 #>     tau    sl     S     D  varS #>   <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 0.378 0.152    17    45   125 ehsa_manual <- gi_stars |>    group_by(.region_id) |>    summarise(mk = list(unclass(Kendall::MannKendall(gi_star)))) |>    tidyr::unnest_wider(mk)  # arrange to show significant emerging hot/cold spots emerging <- ehsa_manual |>    arrange(sl, abs(tau)) |>    slice(1:5)  # show top 5 locations emerging #> # A tibble: 5 × 6 #>   .region_id     tau        sl     S     D  varS #>   <chr>        <dbl>     <dbl> <dbl> <dbl> <dbl> #> 1 25025120201 -1     0.0000830   -45    45   125 #> 2 25025090700  0.822 0.00128      37    45   125 #> 3 25025060600  0.733 0.00421      33    45   125 #> 4 25025100601 -0.733 0.00421     -33    45   125 #> 5 25025000201 -0.689 0.00729     -31    45   125"},{"path":"/articles/understanding-emerging-hotspots.html","id":"using-emerging_hotspot_analysis","dir":"Articles","previous_headings":"","what":"Using emerging_hotspot_analysis()","title":"Emerging Hot Spot Analysis","text":"can calculations manually , limited two ways. Primarily example used spatial neighbors . Whereas EHSA can—likely —incorporate time-lag spatial neighbors. Secondly, classifications proposed ESRI help us understand location changing time. handled emerging_hotspot_analysis() function. emerging_hotspot_analysis() takes spacetime object x, quoted name variable interested .var minimum. can specify number time lags using argument k set 1 default.","code":"# conduct EHSA ehsa <- emerging_hotspot_analysis(   x = bos,    .var = \"value\",    k = 1,    nsim = 99 )  # preview some values  head(ehsa) #> # A tibble: 6 × 4 #>   location       tau p_value classification      #>   <chr>        <dbl>   <dbl> <chr>               #> 1 25025010405  0.111  0.721  sporadic coldspot   #> 2 25025010404 -0.333  0.210  sporadic coldspot   #> 3 25025010801 -0.200  0.474  sporadic coldspot   #> 4 25025010702 -0.600  0.0200 sporadic coldspot   #> 5 25025010204 -0.467  0.0736 persistent coldspot #> 6 25025010802 -0.333  0.210  sporadic coldspot  # evaluate the classifications of our hotspots count(ehsa, classification) #> # A tibble: 7 × 2 #>   classification           n #>   <chr>                <int> #> 1 consecutive hotspot     19 #> 2 intensifying hotspot     2 #> 3 no pattern detected     14 #> 4 persistent coldspot      8 #> 5 persistent hotspot       3 #> 6 sporadic coldspot       92 #> 7 sporadic hotspot        30"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, maintainer. Dexter H Locke. Author, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J, Locke DH (2024). sfdep: Spatial Dependence Simple Features. R package version 0.2.4, https://github.com/josiahparry/sfdep, https://sfdep.josiahparry.com.","code":"@Manual{,   title = {sfdep: Spatial Dependence for Simple Features},   author = {Josiah Parry and Dexter H Locke},   year = {2024},   note = {R package version 0.2.4, https://github.com/josiahparry/sfdep},   url = {https://sfdep.josiahparry.com}, }"},{"path":"/index.html","id":"sfdep","dir":"","previous_headings":"","what":"Spatial Dependence for Simple Features","title":"Spatial Dependence for Simple Features","text":"sfdep builds great shoulders spdep package spatial dependence. sfdep creates sf tidyverse friendly interface package well introduces new functionality present spdep. sfdep utilizes list columns extensively make interface possible.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spatial Dependence for Simple Features","text":"Install released version CRAN can install development version sfdep like :","code":"install.packages(\"sfdep\") remotes::install_github(\"josiahparry/sfdep\")"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Spatial Dependence for Simple Features","text":"three main categories functionality relating geometry neighbors, weights, local indicators spatial association (LISAs).","code":""},{"path":"/index.html","id":"neighbors","dir":"","previous_headings":"Usage","what":"Neighbors","title":"Spatial Dependence for Simple Features","text":"fundamental usage find contiguous neighbors polygon. done st_contiguity() , default creates queen weights. rook weights desired, set queen = FALSE. Additional arguments can passed underlying spdep::poly2nb() via .... st_contiguity() creates object class nb used spdep. can identify higher order neighbors st_nb_lag() cumulative higher order neighbors st_nb_lag_cumul(). point geometry neighbor functions st_knn(), st_dist_band(), st_nb_dists().","code":"library(sf) library(sfdep) library(dplyr)  # grab geometry geo <- st_geometry(guerry)  nb <- st_contiguity(geo)  nb #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 420  #> Percentage nonzero weights: 5.813149  #> Average number of links: 4.941176 st_nb_lag(nb, 2) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 756  #> Percentage nonzero weights: 10.46367  #> Average number of links: 8.894118 st_nb_lag_cumul(nb, 2) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 1176  #> Percentage nonzero weights: 16.27682  #> Average number of links: 13.83529"},{"path":"/index.html","id":"weights","dir":"","previous_headings":"Usage","what":"Weights","title":"Spatial Dependence for Simple Features","text":"Polygon weights created st_weights() (calls spdep::nb2listw). default row standardized weights. point based weights can created st_nb_dists(), st_kernel_weights() st_inverse_weights().","code":"wt <- st_weights(nb)  wt[1:2] #> [[1]] #> [1] 0.25 0.25 0.25 0.25 #>  #> [[2]] #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667"},{"path":"/index.html","id":"local-indicators-of-spatial-association-lisas","dir":"","previous_headings":"Usage","what":"Local Indicators of Spatial Association (LISAs)","title":"Spatial Dependence for Simple Features","text":"LISAs created combination neighbors weights intended used inside dplyr pipeline. worked example calculating spatial lag local moran. calculate spatial lag st_lag(). Given ’ve modified sf object, can visualize ggplot2.  users interested local indicators spatial association (LISA). Utilize local_moran() . local_moran() create data frame column contains number informative variables. example cluster polygon falls based mean, median, pysal calculations. need unnested certain variables hoisted. Create Local Moran data frame column. Visualize converting insignificant values NA. uses cutoff 0.1.","code":"g <- guerry %>%    mutate(     nb = st_contiguity(geometry),     wt = st_weights(nb)     ) library(ggplot2)  # create spatial lag g %>%    mutate(crime_pers_lag = st_lag(crime_pers, nb, wt)) %>%    ggplot(aes(fill = crime_pers_lag)) +    geom_sf(lwd = 0.2, color = \"black\") +   theme_void() lisa <- g %>%    mutate(moran = local_moran(crime_pers, nb, wt))  pull(lisa, moran) %>%    glimpse() #> Rows: 85 #> Columns: 12 #> $ ii           <dbl> 0.52226452, 0.82801651, 0.80353997, 0.74188966, 0.2311871… #> $ eii          <dbl> -0.0436664933, 0.0169987175, -0.0106696690, -0.0015410148… #> $ var_ii       <dbl> 0.3648295427, 0.1244317578, 0.1409560743, 0.2311181704, 0… #> $ z_ii         <dbl> 0.9369545, 2.2991365, 2.1686743, 1.5464057, 1.1463544, 1.… #> $ p_ii         <dbl> 0.348781971, 0.021497187, 0.030107416, 0.122006629, 0.251… #> $ p_ii_sim     <dbl> 0.376, 0.016, 0.036, 0.092, 0.284, 0.124, 0.560, 0.108, 0… #> $ p_folded_sim <dbl> 0.188, 0.008, 0.018, 0.046, 0.142, 0.062, 0.280, 0.054, 0… #> $ skewness     <dbl> 0.186247324, -0.166050386, -0.065842084, -0.148874532, 0.… #> $ kurtosis     <dbl> -0.256988635, -0.083615702, -0.115769407, -0.105166850, 0… #> $ mean         <fct> High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo… #> $ median       <fct> High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo… #> $ pysal        <fct> High-High, High-High, High-High, Low-Low, Low-Low, Low-Lo… lisa %>%    tidyr::unnest(moran) %>%    mutate(pysal = ifelse(p_folded_sim <= 0.1, as.character(pysal), NA)) |>    ggplot(aes(fill = pysal)) +   geom_sf() +   geom_sf(lwd = 0.2, color = \"black\") +   theme_void() +   scale_fill_manual(values = c(\"#1C4769\", \"#24975E\", \"#EACA97\", \"#B20016\"))"},{"path":"/index.html","id":"other-topics","dir":"","previous_headings":"","what":"Other topics:","title":"Spatial Dependence for Simple Features","text":"Emerging Hot Spot Analysis Spatio-Temporal Data {sfnetworks} integration","code":""},{"path":"/reference/activate.html","id":null,"dir":"Reference","previous_headings":"","what":"Activate spacetime context — active","title":"Activate spacetime context — active","text":"spacetime object, activate either data geometry contexts. active object become available manipulation.","code":""},{"path":"/reference/activate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Activate spacetime context — active","text":"","code":"active(.data)  activate(.data, what)"},{"path":"/reference/activate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Activate spacetime context — active","text":".data spacetime object default NULL. Determines context activate. Valid argument values \"geometry\" \"data\". left null, returns .data.","code":""},{"path":"/reference/activate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Activate spacetime context — active","text":"activate() object class spacetime specified context activated. active() returns scalar character active context can either \"goemetry\" \"data\".","code":""},{"path":"/reference/activate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Activate spacetime context — active","text":" spacetime object contains data frame sf object. data frame represents geographies one time periods sf object contains geographic information locations.","code":""},{"path":"/reference/activate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Activate spacetime context — active","text":"","code":"df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data df <- read.csv(   df_fp, colClasses = c(\"character\", \"character\", \"integer\", \"double\", \"Date\") ) geo <- sf::st_read(geo_fp) #> Reading layer `bos-ecometric' from data source  #>   `/private/var/folders/zc/tg2xwck53dg9sls8x4ndzdc00000gn/T/Rtmp2RGXTr/temp_libpath2b6f5ea0db20/sfdep/extdata/bos-ecometric.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83  # Create spacetime object called `bos` bos <- spacetime(df, geo,                  .loc_col = \".region_id\",                  .time_col = \"time_period\")  active(bos) #> [1] \"data\" activate(bos, \"geometry\") #> spacetime ──── #> Context:`geometry` #> 168 locations `.region_id` #> 10 time periods `time_period` #> ── geometry context ──────────────────────────────────────────────────────────── #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83 #> First 10 features: #>     .region_id                       geometry #> 1  25025010405 POLYGON ((-71.09009 42.3466... #> 2  25025010404 POLYGON ((-71.09066 42.3397... #> 3  25025010801 POLYGON ((-71.08159 42.3537... #> 4  25025010702 POLYGON ((-71.07066 42.3518... #> 5  25025010204 POLYGON ((-71.10683 42.3487... #> 6  25025010802 POLYGON ((-71.08159 42.3537... #> 7  25025010104 POLYGON ((-71.08784 42.3474... #> 8  25025000703 POLYGON ((-71.12622 42.3504... #> 9  25025000504 POLYGON ((-71.14175 42.3404... #> 10 25025000704 POLYGON ((-71.13551 42.3487..."},{"path":"/reference/as_spacetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Cast between spacetime and sf classes — as_sf","title":"Cast between spacetime and sf classes — as_sf","text":"Cast spacetime sf classes Convert sf object spacetime","code":""},{"path":"/reference/as_spacetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cast between spacetime and sf classes — as_sf","text":"","code":"as_sf(x, ...)  as_spacetime(x, .loc_col, .time_col, ...)  # S3 method for sf as_spacetime(x, .loc_col, .time_col, ...)"},{"path":"/reference/as_spacetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cast between spacetime and sf classes — as_sf","text":"x st_as_sf() spacetime object. as_spacetime() sf object. ... arguments passed merge. .loc_col quoted name column containing unique location identifiers. .time_col quoted name column containing time periods.","code":""},{"path":"/reference/as_spacetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cast between spacetime and sf classes — as_sf","text":"as_spacetime() returns spacetime object. as_sf(), sf object.","code":""},{"path":"/reference/as_spacetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cast between spacetime and sf classes — as_sf","text":"","code":"if (require(dplyr, quietly = TRUE)) {   df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\")   geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")    # read in data   df <- read.csv(     df_fp, colClasses = c(\"character\", \"character\", \"integer\", \"double\", \"Date\")   )   geo <- sf::st_read(geo_fp)    # Create spacetime object called `bos`   bos <- spacetime(df, geo,                    .loc_col = \".region_id\",                    .time_col = \"time_period\")    as_sf(bos)   if (require(\"dplyr\", quietly=TRUE)) {     as_spacetime(as_sf(bos) , \".region_id\", \"year\")   } } #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #> Reading layer `bos-ecometric' from data source  #>   `/private/var/folders/zc/tg2xwck53dg9sls8x4ndzdc00000gn/T/Rtmp2RGXTr/temp_libpath2b6f5ea0db20/sfdep/extdata/bos-ecometric.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83 #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `year` #> ── data context ──────────────────────────────────────────────────────────────── #>       .region_id ecometric year value time_period #> 1    25025000100      Guns 2010  0.00  2010-01-01 #> 2    25025000100      Guns 2011  1.54  2011-01-01 #> 3    25025000100      Guns 2012  1.84  2012-01-01 #> 4    25025000100      Guns 2013  4.36  2013-01-01 #> 5    25025000100      Guns 2014  1.91  2014-01-01 #> 6    25025000100      Guns 2015  1.93  2015-01-01 #> 7    25025000100      Guns 2016  1.50  2016-01-01 #> 8    25025000100      Guns 2017  2.14  2017-01-01 #> 9    25025000100      Guns 2018  2.78  2018-01-01 #> 10   25025000100      Guns 2019  1.69  2019-01-01 #> 11   25025000201      Guns 2010  0.00  2010-01-01 #> 12   25025000201      Guns 2011  1.60  2011-01-01 #> 13   25025000201      Guns 2012  0.65  2012-01-01 #> 14   25025000201      Guns 2013  0.91  2013-01-01 #> 15   25025000201      Guns 2014  0.28  2014-01-01 #> 16   25025000201      Guns 2015  0.78  2015-01-01 #> 17   25025000201      Guns 2016  0.52  2016-01-01 #> 18   25025000201      Guns 2017  0.00  2017-01-01 #> 19   25025000201      Guns 2018  1.81  2018-01-01 #> 20   25025000201      Guns 2019  0.25  2019-01-01 #> 21   25025000202      Guns 2010  0.82  2010-01-01 #> 22   25025000202      Guns 2011  2.02  2011-01-01 #> 23   25025000202      Guns 2012  1.72  2012-01-01 #> 24   25025000202      Guns 2013  3.07  2013-01-01 #> 25   25025000202      Guns 2014  2.43  2014-01-01 #> 26   25025000202      Guns 2015  0.75  2015-01-01 #> 27   25025000202      Guns 2016  4.02  2016-01-01 #> 28   25025000202      Guns 2017  1.76  2017-01-01 #> 29   25025000202      Guns 2018  3.52  2018-01-01 #> 30   25025000202      Guns 2019  1.17  2019-01-01 #> 31   25025000301      Guns 2010  0.00  2010-01-01 #> 32   25025000301      Guns 2011  1.65  2011-01-01 #> 33   25025000301      Guns 2012  1.64  2012-01-01 #> 34   25025000301      Guns 2013  0.74  2013-01-01 #> 35   25025000301      Guns 2014  1.16  2014-01-01 #> 36   25025000301      Guns 2015  0.69  2015-01-01 #> 37   25025000301      Guns 2016  0.69  2016-01-01 #> 38   25025000301      Guns 2017  0.34  2017-01-01 #> 39   25025000301      Guns 2018  0.34  2018-01-01 #> 40   25025000301      Guns 2019  0.00  2019-01-01 #> 41   25025000302      Guns 2010  0.33  2010-01-01 #> 42   25025000302      Guns 2011  1.10  2011-01-01 #> 43   25025000302      Guns 2012  1.50  2012-01-01 #> 44   25025000302      Guns 2013  0.69  2013-01-01 #> 45   25025000302      Guns 2014  1.93  2014-01-01 #> 46   25025000302      Guns 2015  0.89  2015-01-01 #> 47   25025000302      Guns 2016  1.18  2016-01-01 #> 48   25025000302      Guns 2017  0.59  2017-01-01 #> 49   25025000302      Guns 2018  0.00  2018-01-01 #> 50   25025000302      Guns 2019  0.58  2019-01-01 #> 51   25025000401      Guns 2010  0.19  2010-01-01 #> 52   25025000401      Guns 2011  0.96  2011-01-01 #> 53   25025000401      Guns 2012  1.77  2012-01-01 #> 54   25025000401      Guns 2013  0.57  2013-01-01 #> 55   25025000401      Guns 2014  0.78  2014-01-01 #> 56   25025000401      Guns 2015  0.59  2015-01-01 #> 57   25025000401      Guns 2016  1.17  2016-01-01 #> 58   25025000401      Guns 2017  1.17  2017-01-01 #> 59   25025000401      Guns 2018  0.39  2018-01-01 #> 60   25025000401      Guns 2019  0.00  2019-01-01 #> 61   25025000402      Guns 2010  0.00  2010-01-01 #> 62   25025000402      Guns 2011  0.00  2011-01-01 #> 63   25025000402      Guns 2012  2.92  2012-01-01 #> 64   25025000402      Guns 2013  1.57  2013-01-01 #> 65   25025000402      Guns 2014  0.00  2014-01-01 #> 66   25025000402      Guns 2015  0.29  2015-01-01 #> 67   25025000402      Guns 2016  0.87  2016-01-01 #> 68   25025000402      Guns 2017  0.58  2017-01-01 #> 69   25025000402      Guns 2018  0.00  2018-01-01 #> 70   25025000402      Guns 2019  0.00  2019-01-01 #> 71   25025000502      Guns 2010  0.20  2010-01-01 #> 72   25025000502      Guns 2011  0.39  2011-01-01 #> 73   25025000502      Guns 2012  0.72  2012-01-01 #> 74   25025000502      Guns 2013  0.16  2013-01-01 #> 75   25025000502      Guns 2014  0.34  2014-01-01 #> 76   25025000502      Guns 2015  0.17  2015-01-01 #> 77   25025000502      Guns 2016  0.85  2016-01-01 #> 78   25025000502      Guns 2017  0.34  2017-01-01 #> 79   25025000502      Guns 2018  0.00  2018-01-01 #> 80   25025000502      Guns 2019  0.86  2019-01-01 #> 81   25025000503      Guns 2010  0.00  2010-01-01 #> 82   25025000503      Guns 2011  1.03  2011-01-01 #> 83   25025000503      Guns 2012  0.53  2012-01-01 #> 84   25025000503      Guns 2013  2.39  2013-01-01 #> 85   25025000503      Guns 2014  0.00  2014-01-01 #> 86   25025000503      Guns 2015  0.94  2015-01-01 #> 87   25025000503      Guns 2016  0.94  2016-01-01 #> 88   25025000503      Guns 2017  0.94  2017-01-01 #> 89   25025000503      Guns 2018  0.00  2018-01-01 #> 90   25025000503      Guns 2019  1.00  2019-01-01 #> 91   25025000504      Guns 2010  0.22  2010-01-01 #> 92   25025000504      Guns 2011  1.35  2011-01-01 #> 93   25025000504      Guns 2012  1.66  2012-01-01 #> 94   25025000504      Guns 2013  2.89  2013-01-01 #> 95   25025000504      Guns 2014  0.66  2014-01-01 #> 96   25025000504      Guns 2015  1.35  2015-01-01 #> 97   25025000504      Guns 2016  0.90  2016-01-01 #> 98   25025000504      Guns 2017  1.12  2017-01-01 #> 99   25025000504      Guns 2018  1.57  2018-01-01 #> 100  25025000504      Guns 2019  0.61  2019-01-01 #> 101  25025000601      Guns 2010  0.00  2010-01-01 #> 102  25025000601      Guns 2011  0.33  2011-01-01 #> 103  25025000601      Guns 2012  0.31  2012-01-01 #> 104  25025000601      Guns 2013  1.82  2013-01-01 #> 105  25025000601      Guns 2014  1.42  2014-01-01 #> 106  25025000601      Guns 2015  1.05  2015-01-01 #> 107  25025000601      Guns 2016  1.05  2016-01-01 #> 108  25025000601      Guns 2017  0.79  2017-01-01 #> 109  25025000601      Guns 2018  1.84  2018-01-01 #> 110  25025000601      Guns 2019  0.75  2019-01-01 #> 111  25025000602      Guns 2010  0.00  2010-01-01 #> 112  25025000602      Guns 2011  1.60  2011-01-01 #> 113  25025000602      Guns 2012  2.61  2012-01-01 #> 114  25025000602      Guns 2013  6.24  2013-01-01 #> 115  25025000602      Guns 2014  2.24  2014-01-01 #> 116  25025000602      Guns 2015  3.59  2015-01-01 #> 117  25025000602      Guns 2016  3.85  2016-01-01 #> 118  25025000602      Guns 2017  2.31  2017-01-01 #> 119  25025000602      Guns 2018  3.34  2018-01-01 #> 120  25025000602      Guns 2019  3.56  2019-01-01 #> 121  25025000701      Guns 2010  0.00  2010-01-01 #> 122  25025000701      Guns 2011  2.63  2011-01-01 #> 123  25025000701      Guns 2012  2.02  2012-01-01 #> 124  25025000701      Guns 2013  2.38  2013-01-01 #> 125  25025000701      Guns 2014  0.51  2014-01-01 #> 126  25025000701      Guns 2015  0.70  2015-01-01 #> 127  25025000701      Guns 2016  1.16  2016-01-01 #> 128  25025000701      Guns 2017  0.47  2017-01-01 #> 129  25025000701      Guns 2018  0.00  2018-01-01 #> 130  25025000701      Guns 2019  0.42  2019-01-01 #> 131  25025000703      Guns 2010  0.00  2010-01-01 #> 132  25025000703      Guns 2011  3.34  2011-01-01 #> 133  25025000703      Guns 2012  1.34  2012-01-01 #> 134  25025000703      Guns 2013  2.80  2013-01-01 #> 135  25025000703      Guns 2014  3.06  2014-01-01 #> 136  25025000703      Guns 2015  4.67  2015-01-01 #> 137  25025000703      Guns 2016  3.63  2016-01-01 #> 138  25025000703      Guns 2017  3.63  2017-01-01 #> 139  25025000703      Guns 2018  5.71  2018-01-01 #> 140  25025000703      Guns 2019  3.06  2019-01-01 #> 141  25025000704      Guns 2010  0.00  2010-01-01 #> 142  25025000704      Guns 2011  2.66  2011-01-01 #> 143  25025000704      Guns 2012  1.63  2012-01-01 #> 144  25025000704      Guns 2013  3.05  2013-01-01 #> 145  25025000704      Guns 2014  2.21  2014-01-01 #> 146  25025000704      Guns 2015  1.96  2015-01-01 #> 147  25025000704      Guns 2016  2.62  2016-01-01 #> 148  25025000704      Guns 2017  0.65  2017-01-01 #> 149  25025000704      Guns 2018  1.09  2018-01-01 #> 150  25025000704      Guns 2019  0.41  2019-01-01 #> 151  25025000802      Guns 2010  0.25  2010-01-01 #> 152  25025000802      Guns 2011  1.58  2011-01-01 #> 153  25025000802      Guns 2012  2.35  2012-01-01 #> 154  25025000802      Guns 2013  3.51  2013-01-01 #> 155  25025000802      Guns 2014  2.13  2014-01-01 #> 156  25025000802      Guns 2015  2.12  2015-01-01 #> 157  25025000802      Guns 2016  3.49  2016-01-01 #> 158  25025000802      Guns 2017  3.03  2017-01-01 #> 159  25025000802      Guns 2018  3.18  2018-01-01 #> 160  25025000802      Guns 2019  2.55  2019-01-01 #> 161  25025000803      Guns 2010  0.00  2010-01-01 #> 162  25025000803      Guns 2011  0.87  2011-01-01 #> 163  25025000803      Guns 2012  0.49  2012-01-01 #> 164  25025000803      Guns 2013  0.00  2013-01-01 #> 165  25025000803      Guns 2014  0.00  2014-01-01 #> 166  25025000803      Guns 2015  0.00  2015-01-01 #> 167  25025000803      Guns 2016  0.32  2016-01-01 #> 168  25025000803      Guns 2017  0.16  2017-01-01 #> 169  25025000803      Guns 2018  0.48  2018-01-01 #> 170  25025000803      Guns 2019  0.33  2019-01-01 #> 171  25025010103      Guns 2010  0.00  2010-01-01 #> 172  25025010103      Guns 2011  0.51  2011-01-01 #> 173  25025010103      Guns 2012  0.00  2012-01-01 #> 174  25025010103      Guns 2013  0.28  2013-01-01 #> 175  25025010103      Guns 2014  0.27  2014-01-01 #> 176  25025010103      Guns 2015  1.35  2015-01-01 #> 177  25025010103      Guns 2016  0.00  2016-01-01 #> 178  25025010103      Guns 2017  0.00  2017-01-01 #> 179  25025010103      Guns 2018  0.81  2018-01-01 #> 180  25025010103      Guns 2019  0.00  2019-01-01 #> 181  25025010104      Guns 2010  0.00  2010-01-01 #> 182  25025010104      Guns 2011  0.42  2011-01-01 #> 183  25025010104      Guns 2012  0.64  2012-01-01 #> 184  25025010104      Guns 2013  0.84  2013-01-01 #> 185  25025010104      Guns 2014  0.21  2014-01-01 #> 186  25025010104      Guns 2015  0.82  2015-01-01 #> 187  25025010104      Guns 2016  0.00  2016-01-01 #> 188  25025010104      Guns 2017  0.61  2017-01-01 #> 189  25025010104      Guns 2018  1.02  2018-01-01 #> 190  25025010104      Guns 2019  0.00  2019-01-01 #> 191  25025010203      Guns 2010  0.42  2010-01-01 #> 192  25025010203      Guns 2011  1.47  2011-01-01 #> 193  25025010203      Guns 2012  1.05  2012-01-01 #> 194  25025010203      Guns 2013  1.21  2013-01-01 #> 195  25025010203      Guns 2014  2.17  2014-01-01 #> 196  25025010203      Guns 2015  3.29  2015-01-01 #> 197  25025010203      Guns 2016  2.71  2016-01-01 #> 198  25025010203      Guns 2017  1.35  2017-01-01 #> 199  25025010203      Guns 2018  1.93  2018-01-01 #> 200  25025010203      Guns 2019  1.49  2019-01-01 #> 201  25025010204      Guns 2010  0.00  2010-01-01 #> 202  25025010204      Guns 2011  0.30  2011-01-01 #> 203  25025010204      Guns 2012  0.31  2012-01-01 #> 204  25025010204      Guns 2013  0.60  2013-01-01 #> 205  25025010204      Guns 2014  0.92  2014-01-01 #> 206  25025010204      Guns 2015  0.00  2015-01-01 #> 207  25025010204      Guns 2016  0.89  2016-01-01 #> 208  25025010204      Guns 2017  0.00  2017-01-01 #> 209  25025010204      Guns 2018  1.49  2018-01-01 #> 210  25025010204      Guns 2019  0.28  2019-01-01 #> 211  25025010300      Guns 2010  0.00  2010-01-01 #> 212  25025010300      Guns 2011  0.59  2011-01-01 #> 213  25025010300      Guns 2012  0.19  2012-01-01 #> 214  25025010300      Guns 2013  0.38  2013-01-01 #> 215  25025010300      Guns 2014  0.00  2014-01-01 #> 216  25025010300      Guns 2015  0.56  2015-01-01 #> 217  25025010300      Guns 2016  0.56  2016-01-01 #> 218  25025010300      Guns 2017  0.37  2017-01-01 #> 219  25025010300      Guns 2018  0.56  2018-01-01 #> 220  25025010300      Guns 2019  0.00  2019-01-01 #> 221  25025010403      Guns 2010  0.00  2010-01-01 #> 222  25025010403      Guns 2011  3.11  2011-01-01 #> 223  25025010403      Guns 2012  0.68  2012-01-01 #> 224  25025010403      Guns 2013  3.13  2013-01-01 #> 225  25025010403      Guns 2014  1.03  2014-01-01 #> 226  25025010403      Guns 2015  2.44  2015-01-01 #> 227  25025010403      Guns 2016  0.35  2016-01-01 #> 228  25025010403      Guns 2017  2.79  2017-01-01 #> 229  25025010403      Guns 2018  3.83  2018-01-01 #> 230  25025010403      Guns 2019  2.10  2019-01-01 #> 231  25025010404      Guns 2010  0.00  2010-01-01 #> 232  25025010404      Guns 2011  0.86  2011-01-01 #> 233  25025010404      Guns 2012  0.17  2012-01-01 #> 234  25025010404      Guns 2013  1.35  2013-01-01 #> 235  25025010404      Guns 2014  1.58  2014-01-01 #> 236  25025010404      Guns 2015  1.17  2015-01-01 #> 237  25025010404      Guns 2016  0.78  2016-01-01 #> 238  25025010404      Guns 2017  0.39  2017-01-01 #> 239  25025010404      Guns 2018  1.17  2018-01-01 #> 240  25025010404      Guns 2019  0.19  2019-01-01 #> 241  25025010405      Guns 2010  0.35  2010-01-01 #> 242  25025010405      Guns 2011  0.89  2011-01-01 #> 243  25025010405      Guns 2012  1.20  2012-01-01 #> 244  25025010405      Guns 2013  0.84  2013-01-01 #> 245  25025010405      Guns 2014  1.50  2014-01-01 #> 246  25025010405      Guns 2015  1.15  2015-01-01 #> 247  25025010405      Guns 2016  1.48  2016-01-01 #> 248  25025010405      Guns 2017  1.64  2017-01-01 #> 249  25025010405      Guns 2018  0.49  2018-01-01 #> 250  25025010405      Guns 2019  0.17  2019-01-01 #> 251  25025010408      Guns 2010  0.00  2010-01-01 #> 252  25025010408      Guns 2011  0.68  2011-01-01 #> 253  25025010408      Guns 2012  1.33  2012-01-01 #> 254  25025010408      Guns 2013  1.35  2013-01-01 #> 255  25025010408      Guns 2014  2.13  2014-01-01 #> 256  25025010408      Guns 2015  0.72  2015-01-01 #> 257  25025010408      Guns 2016  0.72  2016-01-01 #> 258  25025010408      Guns 2017  0.72  2017-01-01 #> 259  25025010408      Guns 2018  0.00  2018-01-01 #> 260  25025010408      Guns 2019  0.00  2019-01-01 #> 261  25025010500      Guns 2010  0.00  2010-01-01 #> 262  25025010500      Guns 2011  0.00  2011-01-01 #> 263  25025010500      Guns 2012  0.60  2012-01-01 #> 264  25025010500      Guns 2013  1.80  2013-01-01 #> 265  25025010500      Guns 2014  0.91  2014-01-01 #> 266  25025010500      Guns 2015  2.06  2015-01-01 #> 267  25025010500      Guns 2016  1.47  2016-01-01 #> 268  25025010500      Guns 2017  1.47  2017-01-01 #> 269  25025010500      Guns 2018  3.24  2018-01-01 #> 270  25025010500      Guns 2019  1.99  2019-01-01 #> 271  25025010600      Guns 2010  0.35  2010-01-01 #> 272  25025010600      Guns 2011  2.19  2011-01-01 #> 273  25025010600      Guns 2012  1.06  2012-01-01 #> 274  25025010600      Guns 2013  1.65  2013-01-01 #> 275  25025010600      Guns 2014  3.50  2014-01-01 #> 276  25025010600      Guns 2015  5.12  2015-01-01 #> 277  25025010600      Guns 2016  4.16  2016-01-01 #> 278  25025010600      Guns 2017  4.48  2017-01-01 #> 279  25025010600      Guns 2018  5.76  2018-01-01 #> 280  25025010600      Guns 2019  4.77  2019-01-01 #> 281  25025010701      Guns 2010  0.00  2010-01-01 #> 282  25025010701      Guns 2011  0.68  2011-01-01 #> 283  25025010701      Guns 2012  0.68  2012-01-01 #> 284  25025010701      Guns 2013  1.06  2013-01-01 #> 285  25025010701      Guns 2014  1.43  2014-01-01 #> 286  25025010701      Guns 2015  1.48  2015-01-01 #> 287  25025010701      Guns 2016  1.11  2016-01-01 #> 288  25025010701      Guns 2017  3.33  2017-01-01 #> 289  25025010701      Guns 2018  1.85  2018-01-01 #> 290  25025010701      Guns 2019  4.67  2019-01-01 #> 291  25025010702      Guns 2010  0.46  2010-01-01 #> 292  25025010702      Guns 2011  2.12  2011-01-01 #> 293  25025010702      Guns 2012  2.88  2012-01-01 #> 294  25025010702      Guns 2013  3.68  2013-01-01 #> 295  25025010702      Guns 2014  3.22  2014-01-01 #> 296  25025010702      Guns 2015  2.71  2015-01-01 #> 297  25025010702      Guns 2016  5.80  2016-01-01 #> 298  25025010702      Guns 2017  5.41  2017-01-01 #> 299  25025010702      Guns 2018  5.41  2018-01-01 #> 300  25025010702      Guns 2019  2.68  2019-01-01 #> 301  25025010801      Guns 2010  0.00  2010-01-01 #> 302  25025010801      Guns 2011  0.00  2011-01-01 #> 303  25025010801      Guns 2012  0.00  2012-01-01 #> 304  25025010801      Guns 2013  0.32  2013-01-01 #> 305  25025010801      Guns 2014  0.61  2014-01-01 #> 306  25025010801      Guns 2015  0.31  2015-01-01 #> 307  25025010801      Guns 2016  0.62  2016-01-01 #> 308  25025010801      Guns 2017  0.31  2017-01-01 #> 309  25025010801      Guns 2018  0.62  2018-01-01 #> 310  25025010801      Guns 2019  0.00  2019-01-01 #> 311  25025010802      Guns 2010  0.00  2010-01-01 #> 312  25025010802      Guns 2011  0.33  2011-01-01 #> 313  25025010802      Guns 2012  0.00  2012-01-01 #> 314  25025010802      Guns 2013  0.70  2013-01-01 #> 315  25025010802      Guns 2014  0.00  2014-01-01 #> 316  25025010802      Guns 2015  0.63  2015-01-01 #> 317  25025010802      Guns 2016  0.00  2016-01-01 #> 318  25025010802      Guns 2017  0.63  2017-01-01 #> 319  25025010802      Guns 2018  0.32  2018-01-01 #> 320  25025010802      Guns 2019  0.00  2019-01-01 #> 321  25025020101      Guns 2010  0.00  2010-01-01 #> 322  25025020101      Guns 2011  0.00  2011-01-01 #> 323  25025020101      Guns 2012  0.00  2012-01-01 #> 324  25025020101      Guns 2013  1.36  2013-01-01 #> 325  25025020101      Guns 2014  0.91  2014-01-01 #> 326  25025020101      Guns 2015  1.43  2015-01-01 #> 327  25025020101      Guns 2016  1.02  2016-01-01 #> 328  25025020101      Guns 2017  0.41  2017-01-01 #> 329  25025020101      Guns 2018  0.00  2018-01-01 #> 330  25025020101      Guns 2019  0.21  2019-01-01 #> 331  25025020200      Guns 2010  0.00  2010-01-01 #> 332  25025020200      Guns 2011  0.26  2011-01-01 #> 333  25025020200      Guns 2012  0.77  2012-01-01 #> 334  25025020200      Guns 2013  0.26  2013-01-01 #> 335  25025020200      Guns 2014  0.00  2014-01-01 #> 336  25025020200      Guns 2015  0.26  2015-01-01 #> 337  25025020200      Guns 2016  1.06  2016-01-01 #> 338  25025020200      Guns 2017  1.06  2017-01-01 #> 339  25025020200      Guns 2018  0.26  2018-01-01 #> 340  25025020200      Guns 2019  0.00  2019-01-01 #> 341  25025020301      Guns 2010  0.00  2010-01-01 #> 342  25025020301      Guns 2011  0.44  2011-01-01 #> 343  25025020301      Guns 2012  1.53  2012-01-01 #> 344  25025020301      Guns 2013  2.11  2013-01-01 #> 345  25025020301      Guns 2014  3.39  2014-01-01 #> 346  25025020301      Guns 2015  1.27  2015-01-01 #> 347  25025020301      Guns 2016  2.12  2016-01-01 #> 348  25025020301      Guns 2017  0.42  2017-01-01 #> 349  25025020301      Guns 2018  0.42  2018-01-01 #> 350  25025020301      Guns 2019  0.46  2019-01-01 #> 351  25025020302      Guns 2010  1.66  2010-01-01 #> 352  25025020302      Guns 2011  2.49  2011-01-01 #> 353  25025020302      Guns 2012  0.00  2012-01-01 #> 354  25025020302      Guns 2013  2.01  2013-01-01 #> 355  25025020302      Guns 2014  0.99  2014-01-01 #> 356  25025020302      Guns 2015  0.95  2015-01-01 #> 357  25025020302      Guns 2016  0.00  2016-01-01 #> 358  25025020302      Guns 2017  3.80  2017-01-01 #> 359  25025020302      Guns 2018  0.00  2018-01-01 #> 360  25025020302      Guns 2019  1.02  2019-01-01 #> 361  25025020303      Guns 2010  0.00  2010-01-01 #> 362  25025020303      Guns 2011  1.60  2011-01-01 #> 363  25025020303      Guns 2012  0.86  2012-01-01 #> 364  25025020303      Guns 2013  2.24  2013-01-01 #> 365  25025020303      Guns 2014  1.35  2014-01-01 #> 366  25025020303      Guns 2015  2.10  2015-01-01 #> 367  25025020303      Guns 2016  1.31  2016-01-01 #> 368  25025020303      Guns 2017  2.88  2017-01-01 #> 369  25025020303      Guns 2018  2.36  2018-01-01 #> 370  25025020303      Guns 2019  2.09  2019-01-01 #> 371  25025030100      Guns 2010  0.00  2010-01-01 #> 372  25025030100      Guns 2011  0.99  2011-01-01 #> 373  25025030100      Guns 2012  0.46  2012-01-01 #> 374  25025030100      Guns 2013  2.32  2013-01-01 #> 375  25025030100      Guns 2014  0.91  2014-01-01 #> 376  25025030100      Guns 2015  0.44  2015-01-01 #> 377  25025030100      Guns 2016  0.44  2016-01-01 #> 378  25025030100      Guns 2017  0.44  2017-01-01 #> 379  25025030100      Guns 2018  1.33  2018-01-01 #> 380  25025030100      Guns 2019  0.43  2019-01-01 #> 381  25025030200      Guns 2010  0.00  2010-01-01 #> 382  25025030200      Guns 2011  0.00  2011-01-01 #> 383  25025030200      Guns 2012  0.00  2012-01-01 #> 384  25025030200      Guns 2013  1.15  2013-01-01 #> 385  25025030200      Guns 2014  0.59  2014-01-01 #> 386  25025030200      Guns 2015  1.18  2015-01-01 #> 387  25025030200      Guns 2016  1.18  2016-01-01 #> 388  25025030200      Guns 2017  1.77  2017-01-01 #> 389  25025030200      Guns 2018  1.77  2018-01-01 #> 390  25025030200      Guns 2019  1.65  2019-01-01 #> 391  25025030300      Guns 2010  0.19  2010-01-01 #> 392  25025030300      Guns 2011  1.85  2011-01-01 #> 393  25025030300      Guns 2012  0.92  2012-01-01 #> 394  25025030300      Guns 2013  2.18  2013-01-01 #> 395  25025030300      Guns 2014  2.70  2014-01-01 #> 396  25025030300      Guns 2015  4.84  2015-01-01 #> 397  25025030300      Guns 2016  3.94  2016-01-01 #> 398  25025030300      Guns 2017  3.58  2017-01-01 #> 399  25025030300      Guns 2018  3.40  2018-01-01 #> 400  25025030300      Guns 2019  3.06  2019-01-01 #> 401  25025030400      Guns 2010  0.00  2010-01-01 #> 402  25025030400      Guns 2011  0.42  2011-01-01 #> 403  25025030400      Guns 2012  0.39  2012-01-01 #> 404  25025030400      Guns 2013  0.00  2013-01-01 #> 405  25025030400      Guns 2014  1.41  2014-01-01 #> 406  25025030400      Guns 2015  0.73  2015-01-01 #> 407  25025030400      Guns 2016  0.73  2016-01-01 #> 408  25025030400      Guns 2017  0.36  2017-01-01 #> 409  25025030400      Guns 2018  0.36  2018-01-01 #> 410  25025030400      Guns 2019  0.37  2019-01-01 #> 411  25025030500      Guns 2010  0.00  2010-01-01 #> 412  25025030500      Guns 2011  0.00  2011-01-01 #> 413  25025030500      Guns 2012  0.74  2012-01-01 #> 414  25025030500      Guns 2013  0.38  2013-01-01 #> 415  25025030500      Guns 2014  0.00  2014-01-01 #> 416  25025030500      Guns 2015  0.39  2015-01-01 #> 417  25025030500      Guns 2016  0.39  2016-01-01 #> 418  25025030500      Guns 2017  0.39  2017-01-01 #> 419  25025030500      Guns 2018  0.39  2018-01-01 #> 420  25025030500      Guns 2019  0.40  2019-01-01 #> 421  25025040100      Guns 2010  0.00  2010-01-01 #> 422  25025040100      Guns 2011  0.88  2011-01-01 #> 423  25025040100      Guns 2012  0.43  2012-01-01 #> 424  25025040100      Guns 2013  1.67  2013-01-01 #> 425  25025040100      Guns 2014  1.20  2014-01-01 #> 426  25025040100      Guns 2015  0.41  2015-01-01 #> 427  25025040100      Guns 2016  0.81  2016-01-01 #> 428  25025040100      Guns 2017  0.81  2017-01-01 #> 429  25025040100      Guns 2018  0.41  2018-01-01 #> 430  25025040100      Guns 2019  0.41  2019-01-01 #> 431  25025040200      Guns 2010  1.61  2010-01-01 #> 432  25025040200      Guns 2011  1.70  2011-01-01 #> 433  25025040200      Guns 2012  3.66  2012-01-01 #> 434  25025040200      Guns 2013  4.35  2013-01-01 #> 435  25025040200      Guns 2014  4.17  2014-01-01 #> 436  25025040200      Guns 2015  1.04  2015-01-01 #> 437  25025040200      Guns 2016  2.60  2016-01-01 #> 438  25025040200      Guns 2017  2.60  2017-01-01 #> 439  25025040200      Guns 2018  3.12  2018-01-01 #> 440  25025040200      Guns 2019  2.45  2019-01-01 #> 441  25025040300      Guns 2010  0.48  2010-01-01 #> 442  25025040300      Guns 2011  2.64  2011-01-01 #> 443  25025040300      Guns 2012  2.39  2012-01-01 #> 444  25025040300      Guns 2013  3.47  2013-01-01 #> 445  25025040300      Guns 2014  5.75  2014-01-01 #> 446  25025040300      Guns 2015  2.39  2015-01-01 #> 447  25025040300      Guns 2016  0.48  2016-01-01 #> 448  25025040300      Guns 2017  0.95  2017-01-01 #> 449  25025040300      Guns 2018  1.67  2018-01-01 #> 450  25025040300      Guns 2019  1.11  2019-01-01 #> 451  25025040401      Guns 2010  0.35  2010-01-01 #> 452  25025040401      Guns 2011  1.17  2011-01-01 #> 453  25025040401      Guns 2012  0.80  2012-01-01 #> 454  25025040401      Guns 2013  2.38  2013-01-01 #> 455  25025040401      Guns 2014  2.30  2014-01-01 #> 456  25025040401      Guns 2015  1.45  2015-01-01 #> 457  25025040401      Guns 2016  2.18  2016-01-01 #> 458  25025040401      Guns 2017  2.18  2017-01-01 #> 459  25025040401      Guns 2018  0.73  2018-01-01 #> 460  25025040401      Guns 2019  0.68  2019-01-01 #> 461  25025040600      Guns 2010  0.00  2010-01-01 #> 462  25025040600      Guns 2011  0.35  2011-01-01 #> 463  25025040600      Guns 2012  1.05  2012-01-01 #> 464  25025040600      Guns 2013  2.44  2013-01-01 #> 465  25025040600      Guns 2014  0.00  2014-01-01 #> 466  25025040600      Guns 2015  1.30  2015-01-01 #> 467  25025040600      Guns 2016  1.95  2016-01-01 #> 468  25025040600      Guns 2017  1.62  2017-01-01 #> 469  25025040600      Guns 2018  2.27  2018-01-01 #> 470  25025040600      Guns 2019  1.96  2019-01-01 #> 471  25025040801      Guns 2010  0.58  2010-01-01 #> 472  25025040801      Guns 2011  3.69  2011-01-01 #> 473  25025040801      Guns 2012  1.68  2012-01-01 #> 474  25025040801      Guns 2013  7.08  2013-01-01 #> 475  25025040801      Guns 2014  4.11  2014-01-01 #> 476  25025040801      Guns 2015  2.90  2015-01-01 #> 477  25025040801      Guns 2016  5.13  2016-01-01 #> 478  25025040801      Guns 2017  3.12  2017-01-01 #> 479  25025040801      Guns 2018  4.68  2018-01-01 #> 480  25025040801      Guns 2019  1.83  2019-01-01 #> 481  25025050101      Guns 2010  0.19  2010-01-01 #> 482  25025050101      Guns 2011  1.52  2011-01-01 #> 483  25025050101      Guns 2012  0.90  2012-01-01 #> 484  25025050101      Guns 2013  1.09  2013-01-01 #> 485  25025050101      Guns 2014  2.94  2014-01-01 #> 486  25025050101      Guns 2015  1.68  2015-01-01 #> 487  25025050101      Guns 2016  1.31  2016-01-01 #> 488  25025050101      Guns 2017  1.31  2017-01-01 #> 489  25025050101      Guns 2018  3.17  2018-01-01 #> 490  25025050101      Guns 2019  1.80  2019-01-01 #> 491  25025050200      Guns 2010  0.20  2010-01-01 #> 492  25025050200      Guns 2011  1.83  2011-01-01 #> 493  25025050200      Guns 2012  2.01  2012-01-01 #> 494  25025050200      Guns 2013  1.32  2013-01-01 #> 495  25025050200      Guns 2014  2.55  2014-01-01 #> 496  25025050200      Guns 2015  1.80  2015-01-01 #> 497  25025050200      Guns 2016  1.80  2016-01-01 #> 498  25025050200      Guns 2017  1.14  2017-01-01 #> 499  25025050200      Guns 2018  1.47  2018-01-01 #> 500  25025050200      Guns 2019  0.71  2019-01-01 #> 501  25025050300      Guns 2010  0.00  2010-01-01 #> 502  25025050300      Guns 2011  1.37  2011-01-01 #> 503  25025050300      Guns 2012  2.54  2012-01-01 #> 504  25025050300      Guns 2013  5.60  2013-01-01 #> 505  25025050300      Guns 2014  6.07  2014-01-01 #> 506  25025050300      Guns 2015  7.87  2015-01-01 #> 507  25025050300      Guns 2016  6.56  2016-01-01 #> 508  25025050300      Guns 2017  5.68  2017-01-01 #> 509  25025050300      Guns 2018  4.37  2018-01-01 #> 510  25025050300      Guns 2019  1.61  2019-01-01 #> 511  25025050400      Guns 2010  0.00  2010-01-01 #> 512  25025050400      Guns 2011  3.02  2011-01-01 #> 513  25025050400      Guns 2012  1.60  2012-01-01 #> 514  25025050400      Guns 2013  3.28  2013-01-01 #> 515  25025050400      Guns 2014  1.17  2014-01-01 #> 516  25025050400      Guns 2015  1.95  2015-01-01 #> 517  25025050400      Guns 2016  4.30  2016-01-01 #> 518  25025050400      Guns 2017  1.17  2017-01-01 #> 519  25025050400      Guns 2018  2.73  2018-01-01 #> 520  25025050400      Guns 2019  1.21  2019-01-01 #> 521  25025050500      Guns 2010  0.00  2010-01-01 #> 522  25025050500      Guns 2011  1.02  2011-01-01 #> 523  25025050500      Guns 2012  0.91  2012-01-01 #> 524  25025050500      Guns 2013  0.87  2013-01-01 #> 525  25025050500      Guns 2014  0.81  2014-01-01 #> 526  25025050500      Guns 2015  0.00  2015-01-01 #> 527  25025050500      Guns 2016  0.80  2016-01-01 #> 528  25025050500      Guns 2017  0.40  2017-01-01 #> 529  25025050500      Guns 2018  0.80  2018-01-01 #> 530  25025050500      Guns 2019  0.43  2019-01-01 #> 531  25025050600      Guns 2010  0.46  2010-01-01 #> 532  25025050600      Guns 2011  1.22  2011-01-01 #> 533  25025050600      Guns 2012  1.26  2012-01-01 #> 534  25025050600      Guns 2013  2.62  2013-01-01 #> 535  25025050600      Guns 2014  2.36  2014-01-01 #> 536  25025050600      Guns 2015  3.74  2015-01-01 #> 537  25025050600      Guns 2016  2.08  2016-01-01 #> 538  25025050600      Guns 2017  0.42  2017-01-01 #> 539  25025050600      Guns 2018  0.83  2018-01-01 #> 540  25025050600      Guns 2019  2.02  2019-01-01 #> 541  25025050700      Guns 2010  0.00  2010-01-01 #> 542  25025050700      Guns 2011  0.62  2011-01-01 #> 543  25025050700      Guns 2012  1.01  2012-01-01 #> 544  25025050700      Guns 2013  1.69  2013-01-01 #> 545  25025050700      Guns 2014  1.83  2014-01-01 #> 546  25025050700      Guns 2015  0.89  2015-01-01 #> 547  25025050700      Guns 2016  0.89  2016-01-01 #> 548  25025050700      Guns 2017  0.89  2017-01-01 #> 549  25025050700      Guns 2018  0.72  2018-01-01 #> 550  25025050700      Guns 2019  0.36  2019-01-01 #> 551  25025050901      Guns 2010  0.44  2010-01-01 #> 552  25025050901      Guns 2011  1.83  2011-01-01 #> 553  25025050901      Guns 2012  2.42  2012-01-01 #> 554  25025050901      Guns 2013  1.27  2013-01-01 #> 555  25025050901      Guns 2014  2.34  2014-01-01 #> 556  25025050901      Guns 2015  1.99  2015-01-01 #> 557  25025050901      Guns 2016  3.32  2016-01-01 #> 558  25025050901      Guns 2017  2.21  2017-01-01 #> 559  25025050901      Guns 2018  2.43  2018-01-01 #> 560  25025050901      Guns 2019  1.52  2019-01-01 #> 561  25025051000      Guns 2010  0.23  2010-01-01 #> 562  25025051000      Guns 2011  0.92  2011-01-01 #> 563  25025051000      Guns 2012  0.86  2012-01-01 #> 564  25025051000      Guns 2013  0.66  2013-01-01 #> 565  25025051000      Guns 2014  0.90  2014-01-01 #> 566  25025051000      Guns 2015  0.86  2015-01-01 #> 567  25025051000      Guns 2016  0.64  2016-01-01 #> 568  25025051000      Guns 2017  1.50  2017-01-01 #> 569  25025051000      Guns 2018  0.64  2018-01-01 #> 570  25025051000      Guns 2019  0.41  2019-01-01 #> 571  25025051101      Guns 2010  0.31  2010-01-01 #> 572  25025051101      Guns 2011  1.89  2011-01-01 #> 573  25025051101      Guns 2012  1.41  2012-01-01 #> 574  25025051101      Guns 2013  2.01  2013-01-01 #> 575  25025051101      Guns 2014  1.97  2014-01-01 #> 576  25025051101      Guns 2015  1.78  2015-01-01 #> 577  25025051101      Guns 2016  0.96  2016-01-01 #> 578  25025051101      Guns 2017  2.46  2017-01-01 #> 579  25025051101      Guns 2018  0.68  2018-01-01 #> 580  25025051101      Guns 2019  1.20  2019-01-01 #> 581  25025051200      Guns 2010  0.47  2010-01-01 #> 582  25025051200      Guns 2011  0.00  2011-01-01 #> 583  25025051200      Guns 2012  1.94  2012-01-01 #> 584  25025051200      Guns 2013  1.48  2013-01-01 #> 585  25025051200      Guns 2014  2.70  2014-01-01 #> 586  25025051200      Guns 2015  1.38  2015-01-01 #> 587  25025051200      Guns 2016  1.73  2016-01-01 #> 588  25025051200      Guns 2017  0.69  2017-01-01 #> 589  25025051200      Guns 2018  0.00  2018-01-01 #> 590  25025051200      Guns 2019  0.69  2019-01-01 #> 591  25025060101      Guns 2010  0.00  2010-01-01 #> 592  25025060101      Guns 2011  1.10  2011-01-01 #> 593  25025060101      Guns 2012  0.00  2012-01-01 #> 594  25025060101      Guns 2013  0.26  2013-01-01 #> 595  25025060101      Guns 2014  1.11  2014-01-01 #> 596  25025060101      Guns 2015  1.10  2015-01-01 #> 597  25025060101      Guns 2016  0.28  2016-01-01 #> 598  25025060101      Guns 2017  0.00  2017-01-01 #> 599  25025060101      Guns 2018  0.28  2018-01-01 #> 600  25025060101      Guns 2019  0.57  2019-01-01 #> 601  25025060200      Guns 2010  0.00  2010-01-01 #> 602  25025060200      Guns 2011  0.95  2011-01-01 #> 603  25025060200      Guns 2012  0.89  2012-01-01 #> 604  25025060200      Guns 2013  0.00  2013-01-01 #> 605  25025060200      Guns 2014  0.83  2014-01-01 #> 606  25025060200      Guns 2015  0.00  2015-01-01 #> 607  25025060200      Guns 2016  0.00  2016-01-01 #> 608  25025060200      Guns 2017  0.86  2017-01-01 #> 609  25025060200      Guns 2018  1.29  2018-01-01 #> 610  25025060200      Guns 2019  0.44  2019-01-01 #> 611  25025060301      Guns 2010  0.33  2010-01-01 #> 612  25025060301      Guns 2011  0.97  2011-01-01 #> 613  25025060301      Guns 2012  0.63  2012-01-01 #> 614  25025060301      Guns 2013  0.00  2013-01-01 #> 615  25025060301      Guns 2014  0.29  2014-01-01 #> 616  25025060301      Guns 2015  1.40  2015-01-01 #> 617  25025060301      Guns 2016  0.56  2016-01-01 #> 618  25025060301      Guns 2017  0.00  2017-01-01 #> 619  25025060301      Guns 2018  0.84  2018-01-01 #> 620  25025060301      Guns 2019  0.00  2019-01-01 #> 621  25025060400      Guns 2010  0.00  2010-01-01 #> 622  25025060400      Guns 2011  0.40  2011-01-01 #> 623  25025060400      Guns 2012  0.19  2012-01-01 #> 624  25025060400      Guns 2013  0.56  2013-01-01 #> 625  25025060400      Guns 2014  0.90  2014-01-01 #> 626  25025060400      Guns 2015  0.53  2015-01-01 #> 627  25025060400      Guns 2016  0.35  2016-01-01 #> 628  25025060400      Guns 2017  0.71  2017-01-01 #> 629  25025060400      Guns 2018  1.06  2018-01-01 #> 630  25025060400      Guns 2019  1.06  2019-01-01 #> 631  25025060501      Guns 2010  0.00  2010-01-01 #> 632  25025060501      Guns 2011  0.81  2011-01-01 #> 633  25025060501      Guns 2012  0.79  2012-01-01 #> 634  25025060501      Guns 2013  1.48  2013-01-01 #> 635  25025060501      Guns 2014  0.97  2014-01-01 #> 636  25025060501      Guns 2015  1.43  2015-01-01 #> 637  25025060501      Guns 2016  0.71  2016-01-01 #> 638  25025060501      Guns 2017  0.95  2017-01-01 #> 639  25025060501      Guns 2018  1.19  2018-01-01 #> 640  25025060501      Guns 2019  0.25  2019-01-01 #> 641  25025060600      Guns 2010  0.00  2010-01-01 #> 642  25025060600      Guns 2011  2.44  2011-01-01 #> 643  25025060600      Guns 2012  0.39  2012-01-01 #> 644  25025060600      Guns 2013  2.99  2013-01-01 #> 645  25025060600      Guns 2014  0.69  2014-01-01 #> 646  25025060600      Guns 2015  1.24  2015-01-01 #> 647  25025060600      Guns 2016  1.86  2016-01-01 #> 648  25025060600      Guns 2017  3.11  2017-01-01 #> 649  25025060600      Guns 2018  2.49  2018-01-01 #> 650  25025060600      Guns 2019  1.38  2019-01-01 #> 651  25025060700      Guns 2010  0.00  2010-01-01 #> 652  25025060700      Guns 2011  2.12  2011-01-01 #> 653  25025060700      Guns 2012  6.14  2012-01-01 #> 654  25025060700      Guns 2013  3.13  2013-01-01 #> 655  25025060700      Guns 2014  5.07  2014-01-01 #> 656  25025060700      Guns 2015  9.53  2015-01-01 #> 657  25025060700      Guns 2016  3.81  2016-01-01 #> 658  25025060700      Guns 2017 21.34  2017-01-01 #> 659  25025060700      Guns 2018 15.62  2018-01-01 #> 660  25025060700      Guns 2019  3.06  2019-01-01 #> 661  25025060800      Guns 2010  0.00  2010-01-01 #> 662  25025060800      Guns 2011  0.67  2011-01-01 #> 663  25025060800      Guns 2012  0.66  2012-01-01 #> 664  25025060800      Guns 2013  1.76  2013-01-01 #> 665  25025060800      Guns 2014  0.45  2014-01-01 #> 666  25025060800      Guns 2015  3.20  2015-01-01 #> 667  25025060800      Guns 2016  1.83  2016-01-01 #> 668  25025060800      Guns 2017  3.43  2017-01-01 #> 669  25025060800      Guns 2018  4.12  2018-01-01 #> 670  25025060800      Guns 2019  1.62  2019-01-01 #> 671  25025061000      Guns 2010  0.30  2010-01-01 #> 672  25025061000      Guns 2011  0.60  2011-01-01 #> 673  25025061000      Guns 2012  2.47  2012-01-01 #> 674  25025061000      Guns 2013  3.45  2013-01-01 #> 675  25025061000      Guns 2014  1.91  2014-01-01 #> 676  25025061000      Guns 2015  3.64  2015-01-01 #> 677  25025061000      Guns 2016  3.04  2016-01-01 #> 678  25025061000      Guns 2017 10.02  2017-01-01 #> 679  25025061000      Guns 2018  6.68  2018-01-01 #> 680  25025061000      Guns 2019  2.79  2019-01-01 #> 681  25025061101      Guns 2010  0.91  2010-01-01 #> 682  25025061101      Guns 2011  3.34  2011-01-01 #> 683  25025061101      Guns 2012  5.29  2012-01-01 #> 684  25025061101      Guns 2013  5.54  2013-01-01 #> 685  25025061101      Guns 2014  6.33  2014-01-01 #> 686  25025061101      Guns 2015 11.49  2015-01-01 #> 687  25025061101      Guns 2016 12.37  2016-01-01 #> 688  25025061101      Guns 2017 11.93  2017-01-01 #> 689  25025061101      Guns 2018 10.16  2018-01-01 #> 690  25025061101      Guns 2019  9.57  2019-01-01 #> 691  25025061200      Guns 2010  0.59  2010-01-01 #> 692  25025061200      Guns 2011  1.54  2011-01-01 #> 693  25025061200      Guns 2012  3.18  2012-01-01 #> 694  25025061200      Guns 2013  4.51  2013-01-01 #> 695  25025061200      Guns 2014  2.05  2014-01-01 #> 696  25025061200      Guns 2015  3.52  2015-01-01 #> 697  25025061200      Guns 2016  1.64  2016-01-01 #> 698  25025061200      Guns 2017  3.28  2017-01-01 #> 699  25025061200      Guns 2018  6.10  2018-01-01 #> 700  25025061200      Guns 2019  3.90  2019-01-01 #> 701  25025070101      Guns 2010  0.36  2010-01-01 #> 702  25025070101      Guns 2011  3.04  2011-01-01 #> 703  25025070101      Guns 2012  2.73  2012-01-01 #> 704  25025070101      Guns 2013  7.06  2013-01-01 #> 705  25025070101      Guns 2014  6.76  2014-01-01 #> 706  25025070101      Guns 2015  7.08  2015-01-01 #> 707  25025070101      Guns 2016  8.93  2016-01-01 #> 708  25025070101      Guns 2017 10.62  2017-01-01 #> 709  25025070101      Guns 2018  9.08  2018-01-01 #> 710  25025070101      Guns 2019  5.09  2019-01-01 #> 711  25025070200      Guns 2010  0.19  2010-01-01 #> 712  25025070200      Guns 2011  3.26  2011-01-01 #> 713  25025070200      Guns 2012  3.30  2012-01-01 #> 714  25025070200      Guns 2013  2.10  2013-01-01 #> 715  25025070200      Guns 2014  2.66  2014-01-01 #> 716  25025070200      Guns 2015  2.36  2015-01-01 #> 717  25025070200      Guns 2016  2.54  2016-01-01 #> 718  25025070200      Guns 2017  4.00  2017-01-01 #> 719  25025070200      Guns 2018  3.45  2018-01-01 #> 720  25025070200      Guns 2019  2.67  2019-01-01 #> 721  25025070300      Guns 2010  0.45  2010-01-01 #> 722  25025070300      Guns 2011  0.91  2011-01-01 #> 723  25025070300      Guns 2012  0.22  2012-01-01 #> 724  25025070300      Guns 2013  1.61  2013-01-01 #> 725  25025070300      Guns 2014  0.44  2014-01-01 #> 726  25025070300      Guns 2015  1.12  2015-01-01 #> 727  25025070300      Guns 2016  1.12  2016-01-01 #> 728  25025070300      Guns 2017  2.69  2017-01-01 #> 729  25025070300      Guns 2018  1.35  2018-01-01 #> 730  25025070300      Guns 2019  1.34  2019-01-01 #> 731  25025070402      Guns 2010  0.00  2010-01-01 #> 732  25025070402      Guns 2011  3.49  2011-01-01 #> 733  25025070402      Guns 2012  1.81  2012-01-01 #> 734  25025070402      Guns 2013  0.00  2013-01-01 #> 735  25025070402      Guns 2014  2.11  2014-01-01 #> 736  25025070402      Guns 2015  2.72  2015-01-01 #> 737  25025070402      Guns 2016  2.27  2016-01-01 #> 738  25025070402      Guns 2017  2.27  2017-01-01 #> 739  25025070402      Guns 2018  2.72  2018-01-01 #> 740  25025070402      Guns 2019  1.25  2019-01-01 #> 741  25025070500      Guns 2010  0.16  2010-01-01 #> 742  25025070500      Guns 2011  2.79  2011-01-01 #> 743  25025070500      Guns 2012  3.86  2012-01-01 #> 744  25025070500      Guns 2013  6.76  2013-01-01 #> 745  25025070500      Guns 2014  7.30  2014-01-01 #> 746  25025070500      Guns 2015  6.94  2015-01-01 #> 747  25025070500      Guns 2016  7.79  2016-01-01 #> 748  25025070500      Guns 2017  2.88  2017-01-01 #> 749  25025070500      Guns 2018  2.20  2018-01-01 #> 750  25025070500      Guns 2019  3.29  2019-01-01 #> 751  25025070600      Guns 2010  0.00  2010-01-01 #> 752  25025070600      Guns 2011  1.30  2011-01-01 #> 753  25025070600      Guns 2012  1.68  2012-01-01 #> 754  25025070600      Guns 2013  2.15  2013-01-01 #> 755  25025070600      Guns 2014  2.41  2014-01-01 #> 756  25025070600      Guns 2015  3.59  2015-01-01 #> 757  25025070600      Guns 2016  2.39  2016-01-01 #> 758  25025070600      Guns 2017  0.40  2017-01-01 #> 759  25025070600      Guns 2018  1.20  2018-01-01 #> 760  25025070600      Guns 2019  2.34  2019-01-01 #> 761  25025070700      Guns 2010  0.00  2010-01-01 #> 762  25025070700      Guns 2011  2.49  2011-01-01 #> 763  25025070700      Guns 2012  1.34  2012-01-01 #> 764  25025070700      Guns 2013  3.37  2013-01-01 #> 765  25025070700      Guns 2014  2.19  2014-01-01 #> 766  25025070700      Guns 2015  1.08  2015-01-01 #> 767  25025070700      Guns 2016  2.52  2016-01-01 #> 768  25025070700      Guns 2017  1.08  2017-01-01 #> 769  25025070700      Guns 2018  2.52  2018-01-01 #> 770  25025070700      Guns 2019  2.19  2019-01-01 #> 771  25025070800      Guns 2010  0.27  2010-01-01 #> 772  25025070800      Guns 2011  3.51  2011-01-01 #> 773  25025070800      Guns 2012  3.25  2012-01-01 #> 774  25025070800      Guns 2013  4.30  2013-01-01 #> 775  25025070800      Guns 2014  6.44  2014-01-01 #> 776  25025070800      Guns 2015  4.06  2015-01-01 #> 777  25025070800      Guns 2016  1.45  2016-01-01 #> 778  25025070800      Guns 2017  1.45  2017-01-01 #> 779  25025070800      Guns 2018  3.19  2018-01-01 #> 780  25025070800      Guns 2019  2.24  2019-01-01 #> 781  25025070900      Guns 2010  0.67  2010-01-01 #> 782  25025070900      Guns 2011  2.70  2011-01-01 #> 783  25025070900      Guns 2012  4.99  2012-01-01 #> 784  25025070900      Guns 2013  3.17  2013-01-01 #> 785  25025070900      Guns 2014  8.24  2014-01-01 #> 786  25025070900      Guns 2015  9.78  2015-01-01 #> 787  25025070900      Guns 2016  7.75  2016-01-01 #> 788  25025070900      Guns 2017 10.11  2017-01-01 #> 789  25025070900      Guns 2018  2.36  2018-01-01 #> 790  25025070900      Guns 2019  5.70  2019-01-01 #> 791  25025071101      Guns 2010  1.79  2010-01-01 #> 792  25025071101      Guns 2011  8.60  2011-01-01 #> 793  25025071101      Guns 2012  7.70  2012-01-01 #> 794  25025071101      Guns 2013 10.82  2013-01-01 #> 795  25025071101      Guns 2014 11.08  2014-01-01 #> 796  25025071101      Guns 2015 10.03  2015-01-01 #> 797  25025071101      Guns 2016 12.90  2016-01-01 #> 798  25025071101      Guns 2017 12.90  2017-01-01 #> 799  25025071101      Guns 2018 12.66  2018-01-01 #> 800  25025071101      Guns 2019  9.79  2019-01-01 #> 801  25025071201      Guns 2010  0.34  2010-01-01 #> 802  25025071201      Guns 2011  5.11  2011-01-01 #> 803  25025071201      Guns 2012  1.79  2012-01-01 #> 804  25025071201      Guns 2013  1.77  2013-01-01 #> 805  25025071201      Guns 2014  1.72  2014-01-01 #> 806  25025071201      Guns 2015  2.79  2015-01-01 #> 807  25025071201      Guns 2016  5.59  2016-01-01 #> 808  25025071201      Guns 2017  2.51  2017-01-01 #> 809  25025071201      Guns 2018  2.79  2018-01-01 #> 810  25025071201      Guns 2019  3.75  2019-01-01 #> 811  25025080100      Guns 2010  1.67  2010-01-01 #> 812  25025080100      Guns 2011  5.97  2011-01-01 #> 813  25025080100      Guns 2012  6.63  2012-01-01 #> 814  25025080100      Guns 2013 15.28  2013-01-01 #> 815  25025080100      Guns 2014  8.66  2014-01-01 #> 816  25025080100      Guns 2015 11.75  2015-01-01 #> 817  25025080100      Guns 2016 18.72  2016-01-01 #> 818  25025080100      Guns 2017 13.22  2017-01-01 #> 819  25025080100      Guns 2018 23.13  2018-01-01 #> 820  25025080100      Guns 2019 12.27  2019-01-01 #> 821  25025080300      Guns 2010  4.15  2010-01-01 #> 822  25025080300      Guns 2011 10.81  2011-01-01 #> 823  25025080300      Guns 2012  9.76  2012-01-01 #> 824  25025080300      Guns 2013 23.18  2013-01-01 #> 825  25025080300      Guns 2014 18.80  2014-01-01 #> 826  25025080300      Guns 2015 19.64  2015-01-01 #> 827  25025080300      Guns 2016 12.38  2016-01-01 #> 828  25025080300      Guns 2017 17.51  2017-01-01 #> 829  25025080300      Guns 2018 12.38  2018-01-01 #> 830  25025080300      Guns 2019  8.62  2019-01-01 #> 831  25025080401      Guns 2010  1.99  2010-01-01 #> 832  25025080401      Guns 2011  5.11  2011-01-01 #> 833  25025080401      Guns 2012  5.64  2012-01-01 #> 834  25025080401      Guns 2013 10.35  2013-01-01 #> 835  25025080401      Guns 2014 14.06  2014-01-01 #> 836  25025080401      Guns 2015 16.82  2015-01-01 #> 837  25025080401      Guns 2016 15.53  2016-01-01 #> 838  25025080401      Guns 2017 21.03  2017-01-01 #> 839  25025080401      Guns 2018 11.32  2018-01-01 #> 840  25025080401      Guns 2019 10.11  2019-01-01 #> 841  25025080500      Guns 2010  1.52  2010-01-01 #> 842  25025080500      Guns 2011 12.63  2011-01-01 #> 843  25025080500      Guns 2012 14.64  2012-01-01 #> 844  25025080500      Guns 2013 14.30  2013-01-01 #> 845  25025080500      Guns 2014  9.39  2014-01-01 #> 846  25025080500      Guns 2015 12.17  2015-01-01 #> 847  25025080500      Guns 2016 13.77  2016-01-01 #> 848  25025080500      Guns 2017  9.93  2017-01-01 #> 849  25025080500      Guns 2018  4.16  2018-01-01 #> 850  25025080500      Guns 2019  5.29  2019-01-01 #> 851  25025080601      Guns 2010  0.59  2010-01-01 #> 852  25025080601      Guns 2011  5.32  2011-01-01 #> 853  25025080601      Guns 2012  6.04  2012-01-01 #> 854  25025080601      Guns 2013  7.71  2013-01-01 #> 855  25025080601      Guns 2014  8.62  2014-01-01 #> 856  25025080601      Guns 2015 14.31  2015-01-01 #> 857  25025080601      Guns 2016 13.61  2016-01-01 #> 858  25025080601      Guns 2017 11.54  2017-01-01 #> 859  25025080601      Guns 2018  6.46  2018-01-01 #> 860  25025080601      Guns 2019  6.30  2019-01-01 #> 861  25025080801      Guns 2010  0.58  2010-01-01 #> 862  25025080801      Guns 2011 11.00  2011-01-01 #> 863  25025080801      Guns 2012  6.50  2012-01-01 #> 864  25025080801      Guns 2013  9.68  2013-01-01 #> 865  25025080801      Guns 2014  9.77  2014-01-01 #> 866  25025080801      Guns 2015 12.24  2015-01-01 #> 867  25025080801      Guns 2016  7.79  2016-01-01 #> 868  25025080801      Guns 2017 10.68  2017-01-01 #> 869  25025080801      Guns 2018  6.90  2018-01-01 #> 870  25025080801      Guns 2019  6.20  2019-01-01 #> 871  25025080900      Guns 2010  0.58  2010-01-01 #> 872  25025080900      Guns 2011  3.21  2011-01-01 #> 873  25025080900      Guns 2012  2.67  2012-01-01 #> 874  25025080900      Guns 2013  2.87  2013-01-01 #> 875  25025080900      Guns 2014  3.22  2014-01-01 #> 876  25025080900      Guns 2015  2.11  2015-01-01 #> 877  25025080900      Guns 2016  2.38  2016-01-01 #> 878  25025080900      Guns 2017  2.64  2017-01-01 #> 879  25025080900      Guns 2018  0.53  2018-01-01 #> 880  25025080900      Guns 2019  0.27  2019-01-01 #> 881  25025081001      Guns 2010  0.67  2010-01-01 #> 882  25025081001      Guns 2011  1.25  2011-01-01 #> 883  25025081001      Guns 2012  1.49  2012-01-01 #> 884  25025081001      Guns 2013  2.19  2013-01-01 #> 885  25025081001      Guns 2014  2.92  2014-01-01 #> 886  25025081001      Guns 2015  5.41  2015-01-01 #> 887  25025081001      Guns 2016  4.21  2016-01-01 #> 888  25025081001      Guns 2017  2.00  2017-01-01 #> 889  25025081001      Guns 2018  2.80  2018-01-01 #> 890  25025081001      Guns 2019  3.12  2019-01-01 #> 891  25025081100      Guns 2010  0.00  2010-01-01 #> 892  25025081100      Guns 2011  2.19  2011-01-01 #> 893  25025081100      Guns 2012  2.85  2012-01-01 #> 894  25025081100      Guns 2013  2.34  2013-01-01 #> 895  25025081100      Guns 2014  4.33  2014-01-01 #> 896  25025081100      Guns 2015  2.90  2015-01-01 #> 897  25025081100      Guns 2016  4.35  2016-01-01 #> 898  25025081100      Guns 2017  7.01  2017-01-01 #> 899  25025081100      Guns 2018  3.14  2018-01-01 #> 900  25025081100      Guns 2019  5.14  2019-01-01 #> 901  25025081200      Guns 2010  0.57  2010-01-01 #> 902  25025081200      Guns 2011  5.55  2011-01-01 #> 903  25025081200      Guns 2012 11.90  2012-01-01 #> 904  25025081200      Guns 2013 16.06  2013-01-01 #> 905  25025081200      Guns 2014 11.42  2014-01-01 #> 906  25025081200      Guns 2015 24.60  2015-01-01 #> 907  25025081200      Guns 2016 20.69  2016-01-01 #> 908  25025081200      Guns 2017 20.69  2017-01-01 #> 909  25025081200      Guns 2018 12.30  2018-01-01 #> 910  25025081200      Guns 2019 15.01  2019-01-01 #> 911  25025081300      Guns 2010  0.58  2010-01-01 #> 912  25025081300      Guns 2011 10.41  2011-01-01 #> 913  25025081300      Guns 2012  5.21  2012-01-01 #> 914  25025081300      Guns 2013 13.63  2013-01-01 #> 915  25025081300      Guns 2014 12.26  2014-01-01 #> 916  25025081300      Guns 2015 14.89  2015-01-01 #> 917  25025081300      Guns 2016 14.35  2016-01-01 #> 918  25025081300      Guns 2017 13.46  2017-01-01 #> 919  25025081300      Guns 2018 10.95  2018-01-01 #> 920  25025081300      Guns 2019  8.26  2019-01-01 #> 921  25025081400      Guns 2010  0.74  2010-01-01 #> 922  25025081400      Guns 2011  5.10  2011-01-01 #> 923  25025081400      Guns 2012  2.74  2012-01-01 #> 924  25025081400      Guns 2013  5.94  2013-01-01 #> 925  25025081400      Guns 2014  6.17  2014-01-01 #> 926  25025081400      Guns 2015  6.51  2015-01-01 #> 927  25025081400      Guns 2016  7.88  2016-01-01 #> 928  25025081400      Guns 2017 11.30  2017-01-01 #> 929  25025081400      Guns 2018  6.51  2018-01-01 #> 930  25025081400      Guns 2019  7.14  2019-01-01 #> 931  25025081500      Guns 2010  0.00  2010-01-01 #> 932  25025081500      Guns 2011  7.06  2011-01-01 #> 933  25025081500      Guns 2012 11.39  2012-01-01 #> 934  25025081500      Guns 2013  6.41  2013-01-01 #> 935  25025081500      Guns 2014  7.58  2014-01-01 #> 936  25025081500      Guns 2015  5.30  2015-01-01 #> 937  25025081500      Guns 2016  5.30  2016-01-01 #> 938  25025081500      Guns 2017  5.30  2017-01-01 #> 939  25025081500      Guns 2018 11.01  2018-01-01 #> 940  25025081500      Guns 2019  7.65  2019-01-01 #> 941  25025081700      Guns 2010  0.87  2010-01-01 #> 942  25025081700      Guns 2011  9.46  2011-01-01 #> 943  25025081700      Guns 2012 15.42  2012-01-01 #> 944  25025081700      Guns 2013 21.58  2013-01-01 #> 945  25025081700      Guns 2014 17.33  2014-01-01 #> 946  25025081700      Guns 2015 15.46  2015-01-01 #> 947  25025081700      Guns 2016 14.43  2016-01-01 #> 948  25025081700      Guns 2017 14.43  2017-01-01 #> 949  25025081700      Guns 2018  8.24  2018-01-01 #> 950  25025081700      Guns 2019 15.90  2019-01-01 #> 951  25025081800      Guns 2010  2.22  2010-01-01 #> 952  25025081800      Guns 2011 12.99  2011-01-01 #> 953  25025081800      Guns 2012  9.06  2012-01-01 #> 954  25025081800      Guns 2013 18.11  2013-01-01 #> 955  25025081800      Guns 2014 12.84  2014-01-01 #> 956  25025081800      Guns 2015 10.18  2015-01-01 #> 957  25025081800      Guns 2016 10.18  2016-01-01 #> 958  25025081800      Guns 2017 13.01  2017-01-01 #> 959  25025081800      Guns 2018  9.90  2018-01-01 #> 960  25025081800      Guns 2019  6.59  2019-01-01 #> 961  25025081900      Guns 2010  1.04  2010-01-01 #> 962  25025081900      Guns 2011 11.21  2011-01-01 #> 963  25025081900      Guns 2012 13.37  2012-01-01 #> 964  25025081900      Guns 2013 21.91  2013-01-01 #> 965  25025081900      Guns 2014 17.31  2014-01-01 #> 966  25025081900      Guns 2015 16.07  2015-01-01 #> 967  25025081900      Guns 2016 18.33  2016-01-01 #> 968  25025081900      Guns 2017 10.71  2017-01-01 #> 969  25025081900      Guns 2018  7.61  2018-01-01 #> 970  25025081900      Guns 2019 11.73  2019-01-01 #> 971  25025082000      Guns 2010  0.00  2010-01-01 #> 972  25025082000      Guns 2011 13.75  2011-01-01 #> 973  25025082000      Guns 2012 12.50  2012-01-01 #> 974  25025082000      Guns 2013 11.01  2013-01-01 #> 975  25025082000      Guns 2014  9.91  2014-01-01 #> 976  25025082000      Guns 2015 10.32  2015-01-01 #> 977  25025082000      Guns 2016 11.70  2016-01-01 #> 978  25025082000      Guns 2017  7.91  2017-01-01 #> 979  25025082000      Guns 2018  5.85  2018-01-01 #> 980  25025082000      Guns 2019  6.16  2019-01-01 #> 981  25025082100      Guns 2010  1.00  2010-01-01 #> 982  25025082100      Guns 2011 10.76  2011-01-01 #> 983  25025082100      Guns 2012  5.59  2012-01-01 #> 984  25025082100      Guns 2013 14.69  2013-01-01 #> 985  25025082100      Guns 2014 13.54  2014-01-01 #> 986  25025082100      Guns 2015  8.71  2015-01-01 #> 987  25025082100      Guns 2016 12.79  2016-01-01 #> 988  25025082100      Guns 2017 14.08  2017-01-01 #> 989  25025082100      Guns 2018  7.04  2018-01-01 #> 990  25025082100      Guns 2019  7.30  2019-01-01 #> 991  25025090100      Guns 2010  1.82  2010-01-01 #> 992  25025090100      Guns 2011  8.39  2011-01-01 #> 993  25025090100      Guns 2012  8.38  2012-01-01 #> 994  25025090100      Guns 2013 18.91  2013-01-01 #> 995  25025090100      Guns 2014 11.29  2014-01-01 #> 996  25025090100      Guns 2015 12.73  2015-01-01 #> 997  25025090100      Guns 2016 15.36  2016-01-01 #> 998  25025090100      Guns 2017 11.72  2017-01-01 #> 999  25025090100      Guns 2018 12.33  2018-01-01 #> 1000 25025090100      Guns 2019 10.10  2019-01-01 #> 1001 25025090200      Guns 2010  2.04  2010-01-01 #> 1002 25025090200      Guns 2011 13.87  2011-01-01 #> 1003 25025090200      Guns 2012 14.25  2012-01-01 #> 1004 25025090200      Guns 2013 18.88  2013-01-01 #> 1005 25025090200      Guns 2014 15.72  2014-01-01 #> 1006 25025090200      Guns 2015 14.26  2015-01-01 #> 1007 25025090200      Guns 2016 17.52  2016-01-01 #> 1008 25025090200      Guns 2017 11.00  2017-01-01 #> 1009 25025090200      Guns 2018 11.41  2018-01-01 #> 1010 25025090200      Guns 2019 12.76  2019-01-01 #> 1011 25025090300      Guns 2010  0.31  2010-01-01 #> 1012 25025090300      Guns 2011 16.33  2011-01-01 #> 1013 25025090300      Guns 2012  7.95  2012-01-01 #> 1014 25025090300      Guns 2013 11.29  2013-01-01 #> 1015 25025090300      Guns 2014 12.36  2014-01-01 #> 1016 25025090300      Guns 2015 15.34  2015-01-01 #> 1017 25025090300      Guns 2016 13.28  2016-01-01 #> 1018 25025090300      Guns 2017 12.98  2017-01-01 #> 1019 25025090300      Guns 2018  6.49  2018-01-01 #> 1020 25025090300      Guns 2019  9.22  2019-01-01 #> 1021 25025090400      Guns 2010  2.46  2010-01-01 #> 1022 25025090400      Guns 2011 10.09  2011-01-01 #> 1023 25025090400      Guns 2012 15.82  2012-01-01 #> 1024 25025090400      Guns 2013  9.84  2013-01-01 #> 1025 25025090400      Guns 2014  6.19  2014-01-01 #> 1026 25025090400      Guns 2015  7.42  2015-01-01 #> 1027 25025090400      Guns 2016  5.34  2016-01-01 #> 1028 25025090400      Guns 2017  7.42  2017-01-01 #> 1029 25025090400      Guns 2018  7.66  2018-01-01 #> 1030 25025090400      Guns 2019  6.72  2019-01-01 #> 1031 25025090600      Guns 2010  1.39  2010-01-01 #> 1032 25025090600      Guns 2011 12.66  2011-01-01 #> 1033 25025090600      Guns 2012 10.00  2012-01-01 #> 1034 25025090600      Guns 2013 15.83  2013-01-01 #> 1035 25025090600      Guns 2014 15.11  2014-01-01 #> 1036 25025090600      Guns 2015  8.19  2015-01-01 #> 1037 25025090600      Guns 2016  9.83  2016-01-01 #> 1038 25025090600      Guns 2017 11.06  2017-01-01 #> 1039 25025090600      Guns 2018  6.96  2018-01-01 #> 1040 25025090600      Guns 2019 11.16  2019-01-01 #> 1041 25025090700      Guns 2010  0.24  2010-01-01 #> 1042 25025090700      Guns 2011  2.76  2011-01-01 #> 1043 25025090700      Guns 2012  2.20  2012-01-01 #> 1044 25025090700      Guns 2013  4.34  2013-01-01 #> 1045 25025090700      Guns 2014  4.62  2014-01-01 #> 1046 25025090700      Guns 2015  4.55  2015-01-01 #> 1047 25025090700      Guns 2016  4.79  2016-01-01 #> 1048 25025090700      Guns 2017  4.79  2017-01-01 #> 1049 25025090700      Guns 2018  3.59  2018-01-01 #> 1050 25025090700      Guns 2019  6.44  2019-01-01 #> 1051 25025090901      Guns 2010  0.00  2010-01-01 #> 1052 25025090901      Guns 2011  2.30  2011-01-01 #> 1053 25025090901      Guns 2012  1.89  2012-01-01 #> 1054 25025090901      Guns 2013  1.04  2013-01-01 #> 1055 25025090901      Guns 2014  2.30  2014-01-01 #> 1056 25025090901      Guns 2015  1.04  2015-01-01 #> 1057 25025090901      Guns 2016  1.82  2016-01-01 #> 1058 25025090901      Guns 2017  1.56  2017-01-01 #> 1059 25025090901      Guns 2018  1.82  2018-01-01 #> 1060 25025090901      Guns 2019  1.32  2019-01-01 #> 1061 25025091001      Guns 2010  0.36  2010-01-01 #> 1062 25025091001      Guns 2011  5.39  2011-01-01 #> 1063 25025091001      Guns 2012  3.19  2012-01-01 #> 1064 25025091001      Guns 2013  6.53  2013-01-01 #> 1065 25025091001      Guns 2014  3.40  2014-01-01 #> 1066 25025091001      Guns 2015  3.94  2015-01-01 #> 1067 25025091001      Guns 2016  2.95  2016-01-01 #> 1068 25025091001      Guns 2017  4.60  2017-01-01 #> 1069 25025091001      Guns 2018  6.24  2018-01-01 #> 1070 25025091001      Guns 2019  3.03  2019-01-01 #> 1071 25025091100      Guns 2010  0.00  2010-01-01 #> 1072 25025091100      Guns 2011  2.34  2011-01-01 #> 1073 25025091100      Guns 2012  2.64  2012-01-01 #> 1074 25025091100      Guns 2013  2.92  2013-01-01 #> 1075 25025091100      Guns 2014  2.44  2014-01-01 #> 1076 25025091100      Guns 2015  1.78  2015-01-01 #> 1077 25025091100      Guns 2016  1.19  2016-01-01 #> 1078 25025091100      Guns 2017  2.78  2017-01-01 #> 1079 25025091100      Guns 2018  2.78  2018-01-01 #> 1080 25025091100      Guns 2019  1.89  2019-01-01 #> 1081 25025091200      Guns 2010  0.68  2010-01-01 #> 1082 25025091200      Guns 2011  5.18  2011-01-01 #> 1083 25025091200      Guns 2012  5.05  2012-01-01 #> 1084 25025091200      Guns 2013  7.41  2013-01-01 #> 1085 25025091200      Guns 2014 10.80  2014-01-01 #> 1086 25025091200      Guns 2015 11.58  2015-01-01 #> 1087 25025091200      Guns 2016  9.60  2016-01-01 #> 1088 25025091200      Guns 2017 15.88  2017-01-01 #> 1089 25025091200      Guns 2018  8.27  2018-01-01 #> 1090 25025091200      Guns 2019  3.98  2019-01-01 #> 1091 25025091300      Guns 2010  0.00  2010-01-01 #> 1092 25025091300      Guns 2011 11.09  2011-01-01 #> 1093 25025091300      Guns 2012 16.65  2012-01-01 #> 1094 25025091300      Guns 2013 12.33  2013-01-01 #> 1095 25025091300      Guns 2014 19.66  2014-01-01 #> 1096 25025091300      Guns 2015 21.10  2015-01-01 #> 1097 25025091300      Guns 2016 25.79  2016-01-01 #> 1098 25025091300      Guns 2017 14.46  2017-01-01 #> 1099 25025091300      Guns 2018 14.07  2018-01-01 #> 1100 25025091300      Guns 2019  7.81  2019-01-01 #> 1101 25025091400      Guns 2010  0.46  2010-01-01 #> 1102 25025091400      Guns 2011  7.21  2011-01-01 #> 1103 25025091400      Guns 2012  6.13  2012-01-01 #> 1104 25025091400      Guns 2013 13.23  2013-01-01 #> 1105 25025091400      Guns 2014 10.50  2014-01-01 #> 1106 25025091400      Guns 2015  8.42  2015-01-01 #> 1107 25025091400      Guns 2016  7.77  2016-01-01 #> 1108 25025091400      Guns 2017  7.45  2017-01-01 #> 1109 25025091400      Guns 2018  9.71  2018-01-01 #> 1110 25025091400      Guns 2019  8.85  2019-01-01 #> 1111 25025091500      Guns 2010  1.20  2010-01-01 #> 1112 25025091500      Guns 2011  6.91  2011-01-01 #> 1113 25025091500      Guns 2012  7.15  2012-01-01 #> 1114 25025091500      Guns 2013  9.16  2013-01-01 #> 1115 25025091500      Guns 2014 10.47  2014-01-01 #> 1116 25025091500      Guns 2015  9.22  2015-01-01 #> 1117 25025091500      Guns 2016 12.10  2016-01-01 #> 1118 25025091500      Guns 2017 12.49  2017-01-01 #> 1119 25025091500      Guns 2018  6.34  2018-01-01 #> 1120 25025091500      Guns 2019  3.96  2019-01-01 #> 1121 25025091600      Guns 2010  1.58  2010-01-01 #> 1122 25025091600      Guns 2011  6.25  2011-01-01 #> 1123 25025091600      Guns 2012  4.18  2012-01-01 #> 1124 25025091600      Guns 2013 14.78  2013-01-01 #> 1125 25025091600      Guns 2014  5.59  2014-01-01 #> 1126 25025091600      Guns 2015  4.39  2015-01-01 #> 1127 25025091600      Guns 2016  7.44  2016-01-01 #> 1128 25025091600      Guns 2017 11.49  2017-01-01 #> 1129 25025091600      Guns 2018  9.80  2018-01-01 #> 1130 25025091600      Guns 2019  7.08  2019-01-01 #> 1131 25025091700      Guns 2010  0.60  2010-01-01 #> 1132 25025091700      Guns 2011  5.26  2011-01-01 #> 1133 25025091700      Guns 2012 10.53  2012-01-01 #> 1134 25025091700      Guns 2013 16.95  2013-01-01 #> 1135 25025091700      Guns 2014 10.86  2014-01-01 #> 1136 25025091700      Guns 2015 11.40  2015-01-01 #> 1137 25025091700      Guns 2016 11.71  2016-01-01 #> 1138 25025091700      Guns 2017 16.02  2017-01-01 #> 1139 25025091700      Guns 2018  5.55  2018-01-01 #> 1140 25025091700      Guns 2019  8.71  2019-01-01 #> 1141 25025091800      Guns 2010  0.87  2010-01-01 #> 1142 25025091800      Guns 2011 13.29  2011-01-01 #> 1143 25025091800      Guns 2012  7.60  2012-01-01 #> 1144 25025091800      Guns 2013  8.92  2013-01-01 #> 1145 25025091800      Guns 2014  9.15  2014-01-01 #> 1146 25025091800      Guns 2015 16.80  2015-01-01 #> 1147 25025091800      Guns 2016 13.22  2016-01-01 #> 1148 25025091800      Guns 2017 12.67  2017-01-01 #> 1149 25025091800      Guns 2018  9.09  2018-01-01 #> 1150 25025091800      Guns 2019  7.37  2019-01-01 #> 1151 25025091900      Guns 2010  0.98  2010-01-01 #> 1152 25025091900      Guns 2011  7.49  2011-01-01 #> 1153 25025091900      Guns 2012  5.65  2012-01-01 #> 1154 25025091900      Guns 2013 14.19  2013-01-01 #> 1155 25025091900      Guns 2014  8.96  2014-01-01 #> 1156 25025091900      Guns 2015 12.47  2015-01-01 #> 1157 25025091900      Guns 2016  9.48  2016-01-01 #> 1158 25025091900      Guns 2017  9.73  2017-01-01 #> 1159 25025091900      Guns 2018  6.73  2018-01-01 #> 1160 25025091900      Guns 2019  8.11  2019-01-01 #> 1161 25025092000      Guns 2010  1.32  2010-01-01 #> 1162 25025092000      Guns 2011  7.85  2011-01-01 #> 1163 25025092000      Guns 2012  9.27  2012-01-01 #> 1164 25025092000      Guns 2013 14.19  2013-01-01 #> 1165 25025092000      Guns 2014  9.26  2014-01-01 #> 1166 25025092000      Guns 2015  8.48  2015-01-01 #> 1167 25025092000      Guns 2016  8.48  2016-01-01 #> 1168 25025092000      Guns 2017  9.40  2017-01-01 #> 1169 25025092000      Guns 2018  6.08  2018-01-01 #> 1170 25025092000      Guns 2019  6.92  2019-01-01 #> 1171 25025092101      Guns 2010  1.33  2010-01-01 #> 1172 25025092101      Guns 2011  5.76  2011-01-01 #> 1173 25025092101      Guns 2012  3.42  2012-01-01 #> 1174 25025092101      Guns 2013  5.35  2013-01-01 #> 1175 25025092101      Guns 2014  7.70  2014-01-01 #> 1176 25025092101      Guns 2015  3.36  2015-01-01 #> 1177 25025092101      Guns 2016  4.90  2016-01-01 #> 1178 25025092101      Guns 2017  5.74  2017-01-01 #> 1179 25025092101      Guns 2018  4.06  2018-01-01 #> 1180 25025092101      Guns 2019  3.76  2019-01-01 #> 1181 25025092200      Guns 2010  1.38  2010-01-01 #> 1182 25025092200      Guns 2011 13.37  2011-01-01 #> 1183 25025092200      Guns 2012 10.47  2012-01-01 #> 1184 25025092200      Guns 2013 10.42  2013-01-01 #> 1185 25025092200      Guns 2014 14.61  2014-01-01 #> 1186 25025092200      Guns 2015 12.86  2015-01-01 #> 1187 25025092200      Guns 2016 19.30  2016-01-01 #> 1188 25025092200      Guns 2017 15.01  2017-01-01 #> 1189 25025092200      Guns 2018 17.46  2018-01-01 #> 1190 25025092200      Guns 2019 15.13  2019-01-01 #> 1191 25025092300      Guns 2010  0.32  2010-01-01 #> 1192 25025092300      Guns 2011 10.53  2011-01-01 #> 1193 25025092300      Guns 2012  9.48  2012-01-01 #> 1194 25025092300      Guns 2013  7.24  2013-01-01 #> 1195 25025092300      Guns 2014  5.91  2014-01-01 #> 1196 25025092300      Guns 2015 12.79  2015-01-01 #> 1197 25025092300      Guns 2016 10.80  2016-01-01 #> 1198 25025092300      Guns 2017 13.07  2017-01-01 #> 1199 25025092300      Guns 2018  7.10  2018-01-01 #> 1200 25025092300      Guns 2019  8.25  2019-01-01 #> 1201 25025092400      Guns 2010  1.19  2010-01-01 #> 1202 25025092400      Guns 2011  9.42  2011-01-01 #> 1203 25025092400      Guns 2012  8.22  2012-01-01 #> 1204 25025092400      Guns 2013 10.47  2013-01-01 #> 1205 25025092400      Guns 2014 13.41  2014-01-01 #> 1206 25025092400      Guns 2015 10.19  2015-01-01 #> 1207 25025092400      Guns 2016 11.20  2016-01-01 #> 1208 25025092400      Guns 2017 10.70  2017-01-01 #> 1209 25025092400      Guns 2018  6.68  2018-01-01 #> 1210 25025092400      Guns 2019  9.31  2019-01-01 #> 1211 25025100100      Guns 2010  0.16  2010-01-01 #> 1212 25025100100      Guns 2011  8.90  2011-01-01 #> 1213 25025100100      Guns 2012  8.79  2012-01-01 #> 1214 25025100100      Guns 2013 10.90  2013-01-01 #> 1215 25025100100      Guns 2014 11.03  2014-01-01 #> 1216 25025100100      Guns 2015 11.12  2015-01-01 #> 1217 25025100100      Guns 2016  9.64  2016-01-01 #> 1218 25025100100      Guns 2017  8.90  2017-01-01 #> 1219 25025100100      Guns 2018  7.42  2018-01-01 #> 1220 25025100100      Guns 2019  8.12  2019-01-01 #> 1221 25025100200      Guns 2010  1.49  2010-01-01 #> 1222 25025100200      Guns 2011 10.07  2011-01-01 #> 1223 25025100200      Guns 2012 13.21  2012-01-01 #> 1224 25025100200      Guns 2013 14.98  2013-01-01 #> 1225 25025100200      Guns 2014 11.99  2014-01-01 #> 1226 25025100200      Guns 2015  6.93  2015-01-01 #> 1227 25025100200      Guns 2016  6.62  2016-01-01 #> 1228 25025100200      Guns 2017  9.14  2017-01-01 #> 1229 25025100200      Guns 2018  8.51  2018-01-01 #> 1230 25025100200      Guns 2019  9.59  2019-01-01 #> 1231 25025100300      Guns 2010  0.55  2010-01-01 #> 1232 25025100300      Guns 2011  4.69  2011-01-01 #> 1233 25025100300      Guns 2012  7.91  2012-01-01 #> 1234 25025100300      Guns 2013  9.34  2013-01-01 #> 1235 25025100300      Guns 2014  9.11  2014-01-01 #> 1236 25025100300      Guns 2015  8.86  2015-01-01 #> 1237 25025100300      Guns 2016  3.20  2016-01-01 #> 1238 25025100300      Guns 2017 10.83  2017-01-01 #> 1239 25025100300      Guns 2018  7.14  2018-01-01 #> 1240 25025100300      Guns 2019  3.65  2019-01-01 #> 1241 25025100400      Guns 2010  0.65  2010-01-01 #> 1242 25025100400      Guns 2011  4.95  2011-01-01 #> 1243 25025100400      Guns 2012  8.12  2012-01-01 #> 1244 25025100400      Guns 2013  6.91  2013-01-01 #> 1245 25025100400      Guns 2014  6.25  2014-01-01 #> 1246 25025100400      Guns 2015  5.65  2015-01-01 #> 1247 25025100400      Guns 2016 10.76  2016-01-01 #> 1248 25025100400      Guns 2017  6.00  2017-01-01 #> 1249 25025100400      Guns 2018  3.71  2018-01-01 #> 1250 25025100400      Guns 2019  3.51  2019-01-01 #> 1251 25025100500      Guns 2010  1.23  2010-01-01 #> 1252 25025100500      Guns 2011  6.43  2011-01-01 #> 1253 25025100500      Guns 2012  7.90  2012-01-01 #> 1254 25025100500      Guns 2013 10.24  2013-01-01 #> 1255 25025100500      Guns 2014  8.30  2014-01-01 #> 1256 25025100500      Guns 2015  9.54  2015-01-01 #> 1257 25025100500      Guns 2016 10.63  2016-01-01 #> 1258 25025100500      Guns 2017  6.00  2017-01-01 #> 1259 25025100500      Guns 2018  5.18  2018-01-01 #> 1260 25025100500      Guns 2019  6.37  2019-01-01 #> 1261 25025100601      Guns 2010  0.20  2010-01-01 #> 1262 25025100601      Guns 2011  3.09  2011-01-01 #> 1263 25025100601      Guns 2012  4.44  2012-01-01 #> 1264 25025100601      Guns 2013  5.01  2013-01-01 #> 1265 25025100601      Guns 2014  2.67  2014-01-01 #> 1266 25025100601      Guns 2015  2.20  2015-01-01 #> 1267 25025100601      Guns 2016  2.37  2016-01-01 #> 1268 25025100601      Guns 2017  1.36  2017-01-01 #> 1269 25025100601      Guns 2018  0.85  2018-01-01 #> 1270 25025100601      Guns 2019  0.67  2019-01-01 #> 1271 25025100603      Guns 2010  0.00  2010-01-01 #> 1272 25025100603      Guns 2011  4.19  2011-01-01 #> 1273 25025100603      Guns 2012  1.96  2012-01-01 #> 1274 25025100603      Guns 2013  0.98  2013-01-01 #> 1275 25025100603      Guns 2014  1.93  2014-01-01 #> 1276 25025100603      Guns 2015  4.30  2015-01-01 #> 1277 25025100603      Guns 2016  0.48  2016-01-01 #> 1278 25025100603      Guns 2017  4.30  2017-01-01 #> 1279 25025100603      Guns 2018  1.91  2018-01-01 #> 1280 25025100603      Guns 2019  3.04  2019-01-01 #> 1281 25025100700      Guns 2010  0.69  2010-01-01 #> 1282 25025100700      Guns 2011  2.05  2011-01-01 #> 1283 25025100700      Guns 2012  0.67  2012-01-01 #> 1284 25025100700      Guns 2013  1.14  2013-01-01 #> 1285 25025100700      Guns 2014  1.34  2014-01-01 #> 1286 25025100700      Guns 2015  0.45  2015-01-01 #> 1287 25025100700      Guns 2016  0.91  2016-01-01 #> 1288 25025100700      Guns 2017  1.81  2017-01-01 #> 1289 25025100700      Guns 2018  1.13  2018-01-01 #> 1290 25025100700      Guns 2019  0.46  2019-01-01 #> 1291 25025100800      Guns 2010  0.76  2010-01-01 #> 1292 25025100800      Guns 2011  2.51  2011-01-01 #> 1293 25025100800      Guns 2012  4.86  2012-01-01 #> 1294 25025100800      Guns 2013  4.17  2013-01-01 #> 1295 25025100800      Guns 2014  4.52  2014-01-01 #> 1296 25025100800      Guns 2015  1.97  2015-01-01 #> 1297 25025100800      Guns 2016  2.73  2016-01-01 #> 1298 25025100800      Guns 2017  2.89  2017-01-01 #> 1299 25025100800      Guns 2018  1.82  2018-01-01 #> 1300 25025100800      Guns 2019  2.89  2019-01-01 #> 1301 25025100900      Guns 2010  0.00  2010-01-01 #> 1302 25025100900      Guns 2011  4.63  2011-01-01 #> 1303 25025100900      Guns 2012  1.68  2012-01-01 #> 1304 25025100900      Guns 2013  3.77  2013-01-01 #> 1305 25025100900      Guns 2014  5.64  2014-01-01 #> 1306 25025100900      Guns 2015  6.20  2015-01-01 #> 1307 25025100900      Guns 2016  7.15  2016-01-01 #> 1308 25025100900      Guns 2017  7.39  2017-01-01 #> 1309 25025100900      Guns 2018  5.72  2018-01-01 #> 1310 25025100900      Guns 2019  3.07  2019-01-01 #> 1311 25025101001      Guns 2010  0.84  2010-01-01 #> 1312 25025101001      Guns 2011  5.43  2011-01-01 #> 1313 25025101001      Guns 2012  7.15  2012-01-01 #> 1314 25025101001      Guns 2013  8.08  2013-01-01 #> 1315 25025101001      Guns 2014  7.00  2014-01-01 #> 1316 25025101001      Guns 2015  6.15  2015-01-01 #> 1317 25025101001      Guns 2016  8.98  2016-01-01 #> 1318 25025101001      Guns 2017  8.83  2017-01-01 #> 1319 25025101001      Guns 2018  7.25  2018-01-01 #> 1320 25025101001      Guns 2019  4.85  2019-01-01 #> 1321 25025101002      Guns 2010  1.05  2010-01-01 #> 1322 25025101002      Guns 2011  7.50  2011-01-01 #> 1323 25025101002      Guns 2012  6.46  2012-01-01 #> 1324 25025101002      Guns 2013  6.70  2013-01-01 #> 1325 25025101002      Guns 2014  7.73  2014-01-01 #> 1326 25025101002      Guns 2015  8.48  2015-01-01 #> 1327 25025101002      Guns 2016  5.88  2016-01-01 #> 1328 25025101002      Guns 2017  5.88  2017-01-01 #> 1329 25025101002      Guns 2018  6.92  2018-01-01 #> 1330 25025101002      Guns 2019  4.53  2019-01-01 #> 1331 25025101101      Guns 2010  0.59  2010-01-01 #> 1332 25025101101      Guns 2011  6.31  2011-01-01 #> 1333 25025101101      Guns 2012  3.49  2012-01-01 #> 1334 25025101101      Guns 2013  4.46  2013-01-01 #> 1335 25025101101      Guns 2014  4.84  2014-01-01 #> 1336 25025101101      Guns 2015  4.49  2015-01-01 #> 1337 25025101101      Guns 2016  3.96  2016-01-01 #> 1338 25025101101      Guns 2017  4.75  2017-01-01 #> 1339 25025101101      Guns 2018  2.64  2018-01-01 #> 1340 25025101101      Guns 2019  7.27  2019-01-01 #> 1341 25025101102      Guns 2010  1.66  2010-01-01 #> 1342 25025101102      Guns 2011  8.40  2011-01-01 #> 1343 25025101102      Guns 2012  7.78  2012-01-01 #> 1344 25025101102      Guns 2013 13.99  2013-01-01 #> 1345 25025101102      Guns 2014  9.02  2014-01-01 #> 1346 25025101102      Guns 2015 10.06  2015-01-01 #> 1347 25025101102      Guns 2016  8.29  2016-01-01 #> 1348 25025101102      Guns 2017  7.89  2017-01-01 #> 1349 25025101102      Guns 2018  7.70  2018-01-01 #> 1350 25025101102      Guns 2019  8.57  2019-01-01 #> 1351 25025110103      Guns 2010  0.68  2010-01-01 #> 1352 25025110103      Guns 2011  3.59  2011-01-01 #> 1353 25025110103      Guns 2012  3.69  2012-01-01 #> 1354 25025110103      Guns 2013  3.20  2013-01-01 #> 1355 25025110103      Guns 2014  2.14  2014-01-01 #> 1356 25025110103      Guns 2015  4.76  2015-01-01 #> 1357 25025110103      Guns 2016  2.54  2016-01-01 #> 1358 25025110103      Guns 2017  2.54  2017-01-01 #> 1359 25025110103      Guns 2018  1.59  2018-01-01 #> 1360 25025110103      Guns 2019  2.10  2019-01-01 #> 1361 25025110201      Guns 2010  0.00  2010-01-01 #> 1362 25025110201      Guns 2011  0.90  2011-01-01 #> 1363 25025110201      Guns 2012  2.23  2012-01-01 #> 1364 25025110201      Guns 2013  5.46  2013-01-01 #> 1365 25025110201      Guns 2014  3.23  2014-01-01 #> 1366 25025110201      Guns 2015  5.18  2015-01-01 #> 1367 25025110201      Guns 2016  2.39  2016-01-01 #> 1368 25025110201      Guns 2017  3.58  2017-01-01 #> 1369 25025110201      Guns 2018  3.18  2018-01-01 #> 1370 25025110201      Guns 2019  3.56  2019-01-01 #> 1371 25025110301      Guns 2010  0.39  2010-01-01 #> 1372 25025110301      Guns 2011  2.42  2011-01-01 #> 1373 25025110301      Guns 2012  2.76  2012-01-01 #> 1374 25025110301      Guns 2013  2.25  2013-01-01 #> 1375 25025110301      Guns 2014  1.84  2014-01-01 #> 1376 25025110301      Guns 2015  2.60  2015-01-01 #> 1377 25025110301      Guns 2016  2.23  2016-01-01 #> 1378 25025110301      Guns 2017  4.46  2017-01-01 #> 1379 25025110301      Guns 2018  2.60  2018-01-01 #> 1380 25025110301      Guns 2019  2.94  2019-01-01 #> 1381 25025110401      Guns 2010  0.54  2010-01-01 #> 1382 25025110401      Guns 2011  2.48  2011-01-01 #> 1383 25025110401      Guns 2012  2.49  2012-01-01 #> 1384 25025110401      Guns 2013  2.09  2013-01-01 #> 1385 25025110401      Guns 2014  2.07  2014-01-01 #> 1386 25025110401      Guns 2015  3.45  2015-01-01 #> 1387 25025110401      Guns 2016  1.59  2016-01-01 #> 1388 25025110401      Guns 2017  2.39  2017-01-01 #> 1389 25025110401      Guns 2018  3.18  2018-01-01 #> 1390 25025110401      Guns 2019  3.10  2019-01-01 #> 1391 25025110403      Guns 2010  0.00  2010-01-01 #> 1392 25025110403      Guns 2011  1.00  2011-01-01 #> 1393 25025110403      Guns 2012  1.01  2012-01-01 #> 1394 25025110403      Guns 2013  1.91  2013-01-01 #> 1395 25025110403      Guns 2014  1.53  2014-01-01 #> 1396 25025110403      Guns 2015  0.67  2015-01-01 #> 1397 25025110403      Guns 2016  1.33  2016-01-01 #> 1398 25025110403      Guns 2017  2.89  2017-01-01 #> 1399 25025110403      Guns 2018  0.44  2018-01-01 #> 1400 25025110403      Guns 2019  1.77  2019-01-01 #> 1401 25025110501      Guns 2010  0.00  2010-01-01 #> 1402 25025110501      Guns 2011  0.83  2011-01-01 #> 1403 25025110501      Guns 2012  0.83  2012-01-01 #> 1404 25025110501      Guns 2013  1.11  2013-01-01 #> 1405 25025110501      Guns 2014  0.28  2014-01-01 #> 1406 25025110501      Guns 2015  0.00  2015-01-01 #> 1407 25025110501      Guns 2016  1.13  2016-01-01 #> 1408 25025110501      Guns 2017  1.41  2017-01-01 #> 1409 25025110501      Guns 2018  1.13  2018-01-01 #> 1410 25025110501      Guns 2019  0.80  2019-01-01 #> 1411 25025110502      Guns 2010  0.00  2010-01-01 #> 1412 25025110502      Guns 2011  2.64  2011-01-01 #> 1413 25025110502      Guns 2012  3.08  2012-01-01 #> 1414 25025110502      Guns 2013  2.25  2013-01-01 #> 1415 25025110502      Guns 2014  1.93  2014-01-01 #> 1416 25025110502      Guns 2015  1.72  2015-01-01 #> 1417 25025110502      Guns 2016  2.79  2016-01-01 #> 1418 25025110502      Guns 2017  3.01  2017-01-01 #> 1419 25025110502      Guns 2018  2.79  2018-01-01 #> 1420 25025110502      Guns 2019  1.63  2019-01-01 #> 1421 25025110601      Guns 2010  0.00  2010-01-01 #> 1422 25025110601      Guns 2011  0.75  2011-01-01 #> 1423 25025110601      Guns 2012  0.00  2012-01-01 #> 1424 25025110601      Guns 2013  2.04  2013-01-01 #> 1425 25025110601      Guns 2014  1.06  2014-01-01 #> 1426 25025110601      Guns 2015  0.00  2015-01-01 #> 1427 25025110601      Guns 2016  1.00  2016-01-01 #> 1428 25025110601      Guns 2017  0.00  2017-01-01 #> 1429 25025110601      Guns 2018  0.33  2018-01-01 #> 1430 25025110601      Guns 2019  0.00  2019-01-01 #> 1431 25025110607      Guns 2010  0.00  2010-01-01 #> 1432 25025110607      Guns 2011  1.32  2011-01-01 #> 1433 25025110607      Guns 2012  1.89  2012-01-01 #> 1434 25025110607      Guns 2013  1.37  2013-01-01 #> 1435 25025110607      Guns 2014  2.08  2014-01-01 #> 1436 25025110607      Guns 2015  0.37  2015-01-01 #> 1437 25025110607      Guns 2016  1.31  2016-01-01 #> 1438 25025110607      Guns 2017  0.75  2017-01-01 #> 1439 25025110607      Guns 2018  0.93  2018-01-01 #> 1440 25025110607      Guns 2019  0.55  2019-01-01 #> 1441 25025120103      Guns 2010  0.00  2010-01-01 #> 1442 25025120103      Guns 2011  0.63  2011-01-01 #> 1443 25025120103      Guns 2012  0.00  2012-01-01 #> 1444 25025120103      Guns 2013  0.62  2013-01-01 #> 1445 25025120103      Guns 2014  1.81  2014-01-01 #> 1446 25025120103      Guns 2015  5.29  2015-01-01 #> 1447 25025120103      Guns 2016  0.59  2016-01-01 #> 1448 25025120103      Guns 2017  0.00  2017-01-01 #> 1449 25025120103      Guns 2018  5.29  2018-01-01 #> 1450 25025120103      Guns 2019  1.80  2019-01-01 #> 1451 25025120104      Guns 2010  0.00  2010-01-01 #> 1452 25025120104      Guns 2011  4.65  2011-01-01 #> 1453 25025120104      Guns 2012  3.22  2012-01-01 #> 1454 25025120104      Guns 2013  4.40  2013-01-01 #> 1455 25025120104      Guns 2014  3.92  2014-01-01 #> 1456 25025120104      Guns 2015  1.74  2015-01-01 #> 1457 25025120104      Guns 2016  1.74  2016-01-01 #> 1458 25025120104      Guns 2017  1.30  2017-01-01 #> 1459 25025120104      Guns 2018  2.61  2018-01-01 #> 1460 25025120104      Guns 2019  0.45  2019-01-01 #> 1461 25025120105      Guns 2010  0.87  2010-01-01 #> 1462 25025120105      Guns 2011  0.85  2011-01-01 #> 1463 25025120105      Guns 2012  0.41  2012-01-01 #> 1464 25025120105      Guns 2013  0.38  2013-01-01 #> 1465 25025120105      Guns 2014  1.10  2014-01-01 #> 1466 25025120105      Guns 2015  1.81  2015-01-01 #> 1467 25025120105      Guns 2016  0.73  2016-01-01 #> 1468 25025120105      Guns 2017  2.18  2017-01-01 #> 1469 25025120105      Guns 2018  0.73  2018-01-01 #> 1470 25025120105      Guns 2019  1.83  2019-01-01 #> 1471 25025120201      Guns 2010  0.52  2010-01-01 #> 1472 25025120201      Guns 2011  2.10  2011-01-01 #> 1473 25025120201      Guns 2012  3.19  2012-01-01 #> 1474 25025120201      Guns 2013  4.35  2013-01-01 #> 1475 25025120201      Guns 2014  2.20  2014-01-01 #> 1476 25025120201      Guns 2015  3.97  2015-01-01 #> 1477 25025120201      Guns 2016  2.38  2016-01-01 #> 1478 25025120201      Guns 2017  0.79  2017-01-01 #> 1479 25025120201      Guns 2018  1.59  2018-01-01 #> 1480 25025120201      Guns 2019  2.30  2019-01-01 #> 1481 25025120301      Guns 2010  0.80  2010-01-01 #> 1482 25025120301      Guns 2011  6.53  2011-01-01 #> 1483 25025120301      Guns 2012  2.95  2012-01-01 #> 1484 25025120301      Guns 2013  4.61  2013-01-01 #> 1485 25025120301      Guns 2014  7.69  2014-01-01 #> 1486 25025120301      Guns 2015  4.94  2015-01-01 #> 1487 25025120301      Guns 2016  4.75  2016-01-01 #> 1488 25025120301      Guns 2017  6.27  2017-01-01 #> 1489 25025120301      Guns 2018  2.47  2018-01-01 #> 1490 25025120301      Guns 2019  2.33  2019-01-01 #> 1491 25025120400      Guns 2010  1.51  2010-01-01 #> 1492 25025120400      Guns 2011  0.93  2011-01-01 #> 1493 25025120400      Guns 2012  1.25  2012-01-01 #> 1494 25025120400      Guns 2013  2.12  2013-01-01 #> 1495 25025120400      Guns 2014  2.52  2014-01-01 #> 1496 25025120400      Guns 2015  1.42  2015-01-01 #> 1497 25025120400      Guns 2016  2.06  2016-01-01 #> 1498 25025120400      Guns 2017  3.00  2017-01-01 #> 1499 25025120400      Guns 2018  2.06  2018-01-01 #> 1500 25025120400      Guns 2019  0.46  2019-01-01 #> 1501 25025120500      Guns 2010  0.00  2010-01-01 #> 1502 25025120500      Guns 2011  2.50  2011-01-01 #> 1503 25025120500      Guns 2012  2.11  2012-01-01 #> 1504 25025120500      Guns 2013  4.03  2013-01-01 #> 1505 25025120500      Guns 2014  4.88  2014-01-01 #> 1506 25025120500      Guns 2015  2.98  2015-01-01 #> 1507 25025120500      Guns 2016  5.21  2016-01-01 #> 1508 25025120500      Guns 2017  2.23  2017-01-01 #> 1509 25025120500      Guns 2018  4.10  2018-01-01 #> 1510 25025120500      Guns 2019  4.61  2019-01-01 #> 1511 25025120600      Guns 2010  0.00  2010-01-01 #> 1512 25025120600      Guns 2011  3.05  2011-01-01 #> 1513 25025120600      Guns 2012  0.00  2012-01-01 #> 1514 25025120600      Guns 2013  3.10  2013-01-01 #> 1515 25025120600      Guns 2014  2.91  2014-01-01 #> 1516 25025120600      Guns 2015  2.16  2015-01-01 #> 1517 25025120600      Guns 2016  1.73  2016-01-01 #> 1518 25025120600      Guns 2017  0.43  2017-01-01 #> 1519 25025120600      Guns 2018  2.59  2018-01-01 #> 1520 25025120600      Guns 2019  2.04  2019-01-01 #> 1521 25025120700      Guns 2010  0.47  2010-01-01 #> 1522 25025120700      Guns 2011  1.56  2011-01-01 #> 1523 25025120700      Guns 2012  3.43  2012-01-01 #> 1524 25025120700      Guns 2013  2.32  2013-01-01 #> 1525 25025120700      Guns 2014  2.27  2014-01-01 #> 1526 25025120700      Guns 2015  3.49  2015-01-01 #> 1527 25025120700      Guns 2016  1.31  2016-01-01 #> 1528 25025120700      Guns 2017  2.18  2017-01-01 #> 1529 25025120700      Guns 2018  2.62  2018-01-01 #> 1530 25025120700      Guns 2019  1.29  2019-01-01 #> 1531 25025130100      Guns 2010  0.17  2010-01-01 #> 1532 25025130100      Guns 2011  0.50  2011-01-01 #> 1533 25025130100      Guns 2012  1.32  2012-01-01 #> 1534 25025130100      Guns 2013  0.46  2013-01-01 #> 1535 25025130100      Guns 2014  0.00  2014-01-01 #> 1536 25025130100      Guns 2015  0.90  2015-01-01 #> 1537 25025130100      Guns 2016  0.60  2016-01-01 #> 1538 25025130100      Guns 2017  0.30  2017-01-01 #> 1539 25025130100      Guns 2018  0.30  2018-01-01 #> 1540 25025130100      Guns 2019  0.30  2019-01-01 #> 1541 25025130200      Guns 2010  0.00  2010-01-01 #> 1542 25025130200      Guns 2011  0.60  2011-01-01 #> 1543 25025130200      Guns 2012  0.40  2012-01-01 #> 1544 25025130200      Guns 2013  0.60  2013-01-01 #> 1545 25025130200      Guns 2014  0.80  2014-01-01 #> 1546 25025130200      Guns 2015  0.57  2015-01-01 #> 1547 25025130200      Guns 2016  0.38  2016-01-01 #> 1548 25025130200      Guns 2017  0.38  2017-01-01 #> 1549 25025130200      Guns 2018  1.14  2018-01-01 #> 1550 25025130200      Guns 2019  0.57  2019-01-01 #> 1551 25025130300      Guns 2010  0.23  2010-01-01 #> 1552 25025130300      Guns 2011  0.43  2011-01-01 #> 1553 25025130300      Guns 2012  0.00  2012-01-01 #> 1554 25025130300      Guns 2013  0.43  2013-01-01 #> 1555 25025130300      Guns 2014  0.44  2014-01-01 #> 1556 25025130300      Guns 2015  1.07  2015-01-01 #> 1557 25025130300      Guns 2016  0.00  2016-01-01 #> 1558 25025130300      Guns 2017  0.64  2017-01-01 #> 1559 25025130300      Guns 2018  0.43  2018-01-01 #> 1560 25025130300      Guns 2019  0.44  2019-01-01 #> 1561 25025130402      Guns 2010  0.22  2010-01-01 #> 1562 25025130402      Guns 2011  0.00  2011-01-01 #> 1563 25025130402      Guns 2012  0.39  2012-01-01 #> 1564 25025130402      Guns 2013  0.61  2013-01-01 #> 1565 25025130402      Guns 2014  1.39  2014-01-01 #> 1566 25025130402      Guns 2015  1.38  2015-01-01 #> 1567 25025130402      Guns 2016  1.18  2016-01-01 #> 1568 25025130402      Guns 2017  0.79  2017-01-01 #> 1569 25025130402      Guns 2018  0.98  2018-01-01 #> 1570 25025130402      Guns 2019  0.61  2019-01-01 #> 1571 25025130404      Guns 2010  0.34  2010-01-01 #> 1572 25025130404      Guns 2011  0.98  2011-01-01 #> 1573 25025130404      Guns 2012  0.30  2012-01-01 #> 1574 25025130404      Guns 2013  3.60  2013-01-01 #> 1575 25025130404      Guns 2014  1.87  2014-01-01 #> 1576 25025130404      Guns 2015  1.53  2015-01-01 #> 1577 25025130404      Guns 2016  1.53  2016-01-01 #> 1578 25025130404      Guns 2017  1.53  2017-01-01 #> 1579 25025130404      Guns 2018  0.00  2018-01-01 #> 1580 25025130404      Guns 2019  0.87  2019-01-01 #> 1581 25025130406      Guns 2010  0.00  2010-01-01 #> 1582 25025130406      Guns 2011  2.61  2011-01-01 #> 1583 25025130406      Guns 2012  1.13  2012-01-01 #> 1584 25025130406      Guns 2013  1.85  2013-01-01 #> 1585 25025130406      Guns 2014  1.77  2014-01-01 #> 1586 25025130406      Guns 2015  0.83  2015-01-01 #> 1587 25025130406      Guns 2016  1.66  2016-01-01 #> 1588 25025130406      Guns 2017  1.16  2017-01-01 #> 1589 25025130406      Guns 2018  0.50  2018-01-01 #> 1590 25025130406      Guns 2019  0.79  2019-01-01 #> 1591 25025140102      Guns 2010  0.45  2010-01-01 #> 1592 25025140102      Guns 2011  1.34  2011-01-01 #> 1593 25025140102      Guns 2012  0.63  2012-01-01 #> 1594 25025140102      Guns 2013  1.49  2013-01-01 #> 1595 25025140102      Guns 2014  0.99  2014-01-01 #> 1596 25025140102      Guns 2015  2.09  2015-01-01 #> 1597 25025140102      Guns 2016  2.28  2016-01-01 #> 1598 25025140102      Guns 2017  2.28  2017-01-01 #> 1599 25025140102      Guns 2018  3.23  2018-01-01 #> 1600 25025140102      Guns 2019  1.98  2019-01-01 #> 1601 25025140105      Guns 2010  0.00  2010-01-01 #> 1602 25025140105      Guns 2011  2.36  2011-01-01 #> 1603 25025140105      Guns 2012  1.22  2012-01-01 #> 1604 25025140105      Guns 2013  0.50  2013-01-01 #> 1605 25025140105      Guns 2014  1.78  2014-01-01 #> 1606 25025140105      Guns 2015  2.89  2015-01-01 #> 1607 25025140105      Guns 2016  1.45  2016-01-01 #> 1608 25025140105      Guns 2017  0.96  2017-01-01 #> 1609 25025140105      Guns 2018  1.21  2018-01-01 #> 1610 25025140105      Guns 2019  2.46  2019-01-01 #> 1611 25025140106      Guns 2010  0.00  2010-01-01 #> 1612 25025140106      Guns 2011  0.00  2011-01-01 #> 1613 25025140106      Guns 2012  1.10  2012-01-01 #> 1614 25025140106      Guns 2013  1.60  2013-01-01 #> 1615 25025140106      Guns 2014  1.05  2014-01-01 #> 1616 25025140106      Guns 2015  3.21  2015-01-01 #> 1617 25025140106      Guns 2016  2.75  2016-01-01 #> 1618 25025140106      Guns 2017  2.29  2017-01-01 #> 1619 25025140106      Guns 2018  0.92  2018-01-01 #> 1620 25025140106      Guns 2019  1.37  2019-01-01 #> 1621 25025140107      Guns 2010  0.00  2010-01-01 #> 1622 25025140107      Guns 2011  3.08  2011-01-01 #> 1623 25025140107      Guns 2012  1.04  2012-01-01 #> 1624 25025140107      Guns 2013  1.72  2013-01-01 #> 1625 25025140107      Guns 2014  1.97  2014-01-01 #> 1626 25025140107      Guns 2015  0.74  2015-01-01 #> 1627 25025140107      Guns 2016  1.12  2016-01-01 #> 1628 25025140107      Guns 2017  3.72  2017-01-01 #> 1629 25025140107      Guns 2018  1.49  2018-01-01 #> 1630 25025140107      Guns 2019  4.36  2019-01-01 #> 1631 25025140201      Guns 2010  0.00  2010-01-01 #> 1632 25025140201      Guns 2011  1.67  2011-01-01 #> 1633 25025140201      Guns 2012  0.83  2012-01-01 #> 1634 25025140201      Guns 2013  0.00  2013-01-01 #> 1635 25025140201      Guns 2014  2.09  2014-01-01 #> 1636 25025140201      Guns 2015  2.56  2015-01-01 #> 1637 25025140201      Guns 2016  1.28  2016-01-01 #> 1638 25025140201      Guns 2017  2.13  2017-01-01 #> 1639 25025140201      Guns 2018  2.13  2018-01-01 #> 1640 25025140201      Guns 2019  2.42  2019-01-01 #> 1641 25025140202      Guns 2010  0.33  2010-01-01 #> 1642 25025140202      Guns 2011  1.15  2011-01-01 #> 1643 25025140202      Guns 2012  2.13  2012-01-01 #> 1644 25025140202      Guns 2013  4.53  2013-01-01 #> 1645 25025140202      Guns 2014  2.55  2014-01-01 #> 1646 25025140202      Guns 2015  3.37  2015-01-01 #> 1647 25025140202      Guns 2016  3.22  2016-01-01 #> 1648 25025140202      Guns 2017  2.91  2017-01-01 #> 1649 25025140202      Guns 2018  2.76  2018-01-01 #> 1650 25025140202      Guns 2019  2.06  2019-01-01 #> 1651 25025140300      Guns 2010  0.32  2010-01-01 #> 1652 25025140300      Guns 2011  3.18  2011-01-01 #> 1653 25025140300      Guns 2012  4.26  2012-01-01 #> 1654 25025140300      Guns 2013  4.25  2013-01-01 #> 1655 25025140300      Guns 2014  1.58  2014-01-01 #> 1656 25025140300      Guns 2015  3.67  2015-01-01 #> 1657 25025140300      Guns 2016  2.58  2016-01-01 #> 1658 25025140300      Guns 2017  3.94  2017-01-01 #> 1659 25025140300      Guns 2018  4.48  2018-01-01 #> 1660 25025140300      Guns 2019  5.32  2019-01-01 #> 1661 25025140400      Guns 2010  0.24  2010-01-01 #> 1662 25025140400      Guns 2011  3.20  2011-01-01 #> 1663 25025140400      Guns 2012  2.40  2012-01-01 #> 1664 25025140400      Guns 2013  3.23  2013-01-01 #> 1665 25025140400      Guns 2014  3.12  2014-01-01 #> 1666 25025140400      Guns 2015  4.23  2015-01-01 #> 1667 25025140400      Guns 2016  2.29  2016-01-01 #> 1668 25025140400      Guns 2017  2.29  2017-01-01 #> 1669 25025140400      Guns 2018  2.29  2018-01-01 #> 1670 25025140400      Guns 2019  3.91  2019-01-01 #> 1671 25025981100      Guns 2010  0.00  2010-01-01 #> 1672 25025981100      Guns 2011  0.00  2011-01-01 #> 1673 25025981100      Guns 2012  0.00  2012-01-01 #> 1674 25025981100      Guns 2013  3.36  2013-01-01 #> 1675 25025981100      Guns 2014  0.00  2014-01-01 #> 1676 25025981100      Guns 2015  0.00  2015-01-01 #> 1677 25025981100      Guns 2016  0.00  2016-01-01 #> 1678 25025981100      Guns 2017  0.00  2017-01-01 #> 1679 25025981100      Guns 2018  0.00  2018-01-01 #> 1680 25025981100      Guns 2019  0.00  2019-01-01"},{"path":"/reference/center_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Center Mean Point — center_mean","title":"Calculate Center Mean Point — center_mean","text":"Given sfc object containing points, calculate measure central tendency.","code":""},{"path":"/reference/center_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Center Mean Point — center_mean","text":"","code":"center_mean(geometry, weights = NULL)  center_median(geometry)  euclidean_median(geometry, tolerance = 1e-09)"},{"path":"/reference/center_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Center Mean Point — center_mean","text":"geometry sfc object. polygon, uses sf::st_point_on_surface(). weights optional vector weights apply coordinates calculation. tolerance tolerance level terminate process. passed pracma::geo_median().","code":""},{"path":"/reference/center_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Center Mean Point — center_mean","text":"sfc POINT object","code":""},{"path":"/reference/center_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Center Mean Point — center_mean","text":"center_mean() calculates mean center point pattern euclidean_median() calculates euclidean median center point pattern using pracma package center_median() calculates median center recommended use euclidean median function.","code":""},{"path":[]},{"path":"/reference/center_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Center Mean Point — center_mean","text":"","code":"if (requireNamespace(\"pracma\")) {  # Make a grid to sample from grd <- sf::st_make_grid(n = c(1, 1), cellsize = c(100, 100), offset = c(0,0))  # sample 100 points pnts <- sf::st_sample(grd, 100)  cm <- center_mean(pnts) em <- euclidean_median(pnts) cmed <- center_median(pnts)  plot(pnts) plot(cm, col = \"red\", add = TRUE) plot(em, col = \"blue\", add = TRUE) plot(cmed, col = \"green\", add = TRUE) } #> Loading required namespace: pracma"},{"path":"/reference/center_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Median Center — center_median","title":"Calculate Median Center — center_median","text":"Calculate Median Center","code":""},{"path":"/reference/center_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Median Center — center_median","text":"","code":"center_median(geometry)"},{"path":"/reference/center_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Median Center — center_median","text":"geometry sfc object. polygon, uses sf::st_point_on_surface().","code":""},{"path":[]},{"path":"/reference/check_pkg_suggests.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a vector of packages are available — check_pkg_suggests","title":"Check if a vector of packages are available — check_pkg_suggests","text":"Check vector packages available","code":""},{"path":"/reference/check_pkg_suggests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a vector of packages are available — check_pkg_suggests","text":"","code":"check_pkg_suggests(x)"},{"path":"/reference/check_pkg_suggests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a vector of packages are available — check_pkg_suggests","text":"x character vector package names","code":""},{"path":"/reference/check_polygon.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks geometry for polygons. — check_polygon","title":"Checks geometry for polygons. — check_polygon","text":"provided geometry polygon, point generated using sf::st_point_on_surface(). centroid preferred, new column can created contains output sf::st_centroid().","code":""},{"path":"/reference/check_polygon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks geometry for polygons. — check_polygon","text":"","code":"check_polygon(geometry)"},{"path":"/reference/check_polygon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks geometry for polygons. — check_polygon","text":"geometry sfc object","code":""},{"path":"/reference/check_polygon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks geometry for polygons. — check_polygon","text":"Point geometry","code":""},{"path":"/reference/class_modify.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify object classes — class_modify","title":"Modify object classes — class_modify","text":"Appends classes exist object classes. utilized aid adding list class objects created spdep. enables use returned objects within data frames tibbles.","code":""},{"path":"/reference/class_modify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify object classes — class_modify","text":"","code":"class_modify(x, class = \"list\")"},{"path":"/reference/class_modify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify object classes — class_modify","text":"x object modify class character vector classes append object","code":""},{"path":"/reference/classify_hotspot.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify Hot Spot results — classify_hotspot","title":"Classify Hot Spot results — classify_hotspot","text":"Given Gi* time-series Mann Kendall scores classify hotspot values","code":""},{"path":"/reference/classify_hotspot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify Hot Spot results — classify_hotspot","text":"","code":"classify_hotspot(.x, threshold)"},{"path":"/reference/complete_spacetime_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert spacetime object to spacetime cube — complete_spacetime_cube","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"Given spacetime object, convert spacetime cube. spacetime cube ensures regular time-series geometry present.","code":""},{"path":"/reference/complete_spacetime_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"","code":"complete_spacetime_cube(x, ...)"},{"path":"/reference/complete_spacetime_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"x spacetime object. ... unused","code":""},{"path":"/reference/complete_spacetime_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"spacetime object meets criteria spacetime cube.","code":""},{"path":"/reference/complete_spacetime_cube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"observations missing time period location combination, columns populated NAs. See is_spacetime_cube() details spacetime cubes.","code":""},{"path":"/reference/complete_spacetime_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert spacetime object to spacetime cube — complete_spacetime_cube","text":"","code":"df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data df <- read.csv(df_fp, colClasses = c(\"character\", \"character\", \"integer\", \"double\", \"Date\")) geo <- sf::st_read(geo_fp) #> Reading layer `bos-ecometric' from data source  #>   `/private/var/folders/zc/tg2xwck53dg9sls8x4ndzdc00000gn/T/Rtmp2RGXTr/temp_libpath2b6f5ea0db20/sfdep/extdata/bos-ecometric.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83  # Create spacetime object called `bos` bos <- spacetime(df, geo,                  .loc_col = \".region_id\",                  .time_col = \"time_period\")  # create a sample of data set.seed(0) sample_index <- sample(1:nrow(bos), nrow(bos) * 0.95) incomplete_spt <- bos[sample_index,]  # check to see if is spacetime cube is_spacetime_cube(incomplete_spt) #> ! Number of rows does not equal `n time-periods x n locations` #> [1] FALSE  # complete it again complete_spacetime_cube(incomplete_spt) #> ! Vars(s) `ecometric`, `year`, and `value` are missing 84, 84, and 84 value(s). #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `time_period` #> ── data context ──────────────────────────────────────────────────────────────── #>       .region_id time_period ecometric year value #> 1    25025000100  2010-01-01      <NA>   NA    NA #> 2    25025000100  2011-01-01      Guns 2011  1.54 #> 3    25025000100  2012-01-01      Guns 2012  1.84 #> 4    25025000100  2013-01-01      Guns 2013  4.36 #> 5    25025000100  2014-01-01      Guns 2014  1.91 #> 6    25025000100  2015-01-01      Guns 2015  1.93 #> 7    25025000100  2016-01-01      Guns 2016  1.50 #> 8    25025000100  2017-01-01      Guns 2017  2.14 #> 9    25025000100  2018-01-01      Guns 2018  2.78 #> 10   25025000100  2019-01-01      Guns 2019  1.69 #> 11   25025000201  2010-01-01      Guns 2010  0.00 #> 12   25025000201  2011-01-01      Guns 2011  1.60 #> 13   25025000201  2012-01-01      Guns 2012  0.65 #> 14   25025000201  2013-01-01      Guns 2013  0.91 #> 15   25025000201  2014-01-01      Guns 2014  0.28 #> 16   25025000201  2015-01-01      Guns 2015  0.78 #> 17   25025000201  2016-01-01      Guns 2016  0.52 #> 18   25025000201  2017-01-01      Guns 2017  0.00 #> 19   25025000201  2018-01-01      Guns 2018  1.81 #> 20   25025000201  2019-01-01      Guns 2019  0.25 #> 21   25025000202  2010-01-01      Guns 2010  0.82 #> 22   25025000202  2011-01-01      Guns 2011  2.02 #> 23   25025000202  2012-01-01      Guns 2012  1.72 #> 24   25025000202  2013-01-01      Guns 2013  3.07 #> 25   25025000202  2014-01-01      Guns 2014  2.43 #> 26   25025000202  2015-01-01      <NA>   NA    NA #> 27   25025000202  2016-01-01      Guns 2016  4.02 #> 28   25025000202  2017-01-01      Guns 2017  1.76 #> 29   25025000202  2018-01-01      Guns 2018  3.52 #> 30   25025000202  2019-01-01      Guns 2019  1.17 #> 31   25025000301  2010-01-01      Guns 2010  0.00 #> 32   25025000301  2011-01-01      Guns 2011  1.65 #> 33   25025000301  2012-01-01      Guns 2012  1.64 #> 34   25025000301  2013-01-01      Guns 2013  0.74 #> 35   25025000301  2014-01-01      Guns 2014  1.16 #> 36   25025000301  2015-01-01      Guns 2015  0.69 #> 37   25025000301  2016-01-01      Guns 2016  0.69 #> 38   25025000301  2017-01-01      Guns 2017  0.34 #> 39   25025000301  2018-01-01      Guns 2018  0.34 #> 40   25025000301  2019-01-01      Guns 2019  0.00 #> 41   25025000302  2010-01-01      Guns 2010  0.33 #> 42   25025000302  2011-01-01      Guns 2011  1.10 #> 43   25025000302  2012-01-01      Guns 2012  1.50 #> 44   25025000302  2013-01-01      Guns 2013  0.69 #> 45   25025000302  2014-01-01      Guns 2014  1.93 #> 46   25025000302  2015-01-01      Guns 2015  0.89 #> 47   25025000302  2016-01-01      Guns 2016  1.18 #> 48   25025000302  2017-01-01      Guns 2017  0.59 #> 49   25025000302  2018-01-01      Guns 2018  0.00 #> 50   25025000302  2019-01-01      <NA>   NA    NA #> 51   25025000401  2010-01-01      Guns 2010  0.19 #> 52   25025000401  2011-01-01      Guns 2011  0.96 #> 53   25025000401  2012-01-01      Guns 2012  1.77 #> 54   25025000401  2013-01-01      Guns 2013  0.57 #> 55   25025000401  2014-01-01      Guns 2014  0.78 #> 56   25025000401  2015-01-01      Guns 2015  0.59 #> 57   25025000401  2016-01-01      Guns 2016  1.17 #> 58   25025000401  2017-01-01      Guns 2017  1.17 #> 59   25025000401  2018-01-01      Guns 2018  0.39 #> 60   25025000401  2019-01-01      Guns 2019  0.00 #> 61   25025000402  2010-01-01      Guns 2010  0.00 #> 62   25025000402  2011-01-01      Guns 2011  0.00 #> 63   25025000402  2012-01-01      Guns 2012  2.92 #> 64   25025000402  2013-01-01      Guns 2013  1.57 #> 65   25025000402  2014-01-01      Guns 2014  0.00 #> 66   25025000402  2015-01-01      Guns 2015  0.29 #> 67   25025000402  2016-01-01      Guns 2016  0.87 #> 68   25025000402  2017-01-01      Guns 2017  0.58 #> 69   25025000402  2018-01-01      Guns 2018  0.00 #> 70   25025000402  2019-01-01      Guns 2019  0.00 #> 71   25025000502  2010-01-01      Guns 2010  0.20 #> 72   25025000502  2011-01-01      Guns 2011  0.39 #> 73   25025000502  2012-01-01      Guns 2012  0.72 #> 74   25025000502  2013-01-01      Guns 2013  0.16 #> 75   25025000502  2014-01-01      Guns 2014  0.34 #> 76   25025000502  2015-01-01      Guns 2015  0.17 #> 77   25025000502  2016-01-01      Guns 2016  0.85 #> 78   25025000502  2017-01-01      Guns 2017  0.34 #> 79   25025000502  2018-01-01      Guns 2018  0.00 #> 80   25025000502  2019-01-01      Guns 2019  0.86 #> 81   25025000503  2010-01-01      Guns 2010  0.00 #> 82   25025000503  2011-01-01      Guns 2011  1.03 #> 83   25025000503  2012-01-01      Guns 2012  0.53 #> 84   25025000503  2013-01-01      Guns 2013  2.39 #> 85   25025000503  2014-01-01      Guns 2014  0.00 #> 86   25025000503  2015-01-01      Guns 2015  0.94 #> 87   25025000503  2016-01-01      Guns 2016  0.94 #> 88   25025000503  2017-01-01      Guns 2017  0.94 #> 89   25025000503  2018-01-01      Guns 2018  0.00 #> 90   25025000503  2019-01-01      Guns 2019  1.00 #> 91   25025000504  2010-01-01      Guns 2010  0.22 #> 92   25025000504  2011-01-01      Guns 2011  1.35 #> 93   25025000504  2012-01-01      Guns 2012  1.66 #> 94   25025000504  2013-01-01      Guns 2013  2.89 #> 95   25025000504  2014-01-01      Guns 2014  0.66 #> 96   25025000504  2015-01-01      Guns 2015  1.35 #> 97   25025000504  2016-01-01      Guns 2016  0.90 #> 98   25025000504  2017-01-01      Guns 2017  1.12 #> 99   25025000504  2018-01-01      Guns 2018  1.57 #> 100  25025000504  2019-01-01      Guns 2019  0.61 #> 101  25025000601  2010-01-01      Guns 2010  0.00 #> 102  25025000601  2011-01-01      Guns 2011  0.33 #> 103  25025000601  2012-01-01      Guns 2012  0.31 #> 104  25025000601  2013-01-01      Guns 2013  1.82 #> 105  25025000601  2014-01-01      Guns 2014  1.42 #> 106  25025000601  2015-01-01      Guns 2015  1.05 #> 107  25025000601  2016-01-01      Guns 2016  1.05 #> 108  25025000601  2017-01-01      Guns 2017  0.79 #> 109  25025000601  2018-01-01      Guns 2018  1.84 #> 110  25025000601  2019-01-01      Guns 2019  0.75 #> 111  25025000602  2010-01-01      Guns 2010  0.00 #> 112  25025000602  2011-01-01      Guns 2011  1.60 #> 113  25025000602  2012-01-01      Guns 2012  2.61 #> 114  25025000602  2013-01-01      Guns 2013  6.24 #> 115  25025000602  2014-01-01      Guns 2014  2.24 #> 116  25025000602  2015-01-01      Guns 2015  3.59 #> 117  25025000602  2016-01-01      Guns 2016  3.85 #> 118  25025000602  2017-01-01      Guns 2017  2.31 #> 119  25025000602  2018-01-01      Guns 2018  3.34 #> 120  25025000602  2019-01-01      Guns 2019  3.56 #> 121  25025000701  2010-01-01      Guns 2010  0.00 #> 122  25025000701  2011-01-01      Guns 2011  2.63 #> 123  25025000701  2012-01-01      Guns 2012  2.02 #> 124  25025000701  2013-01-01      Guns 2013  2.38 #> 125  25025000701  2014-01-01      Guns 2014  0.51 #> 126  25025000701  2015-01-01      Guns 2015  0.70 #> 127  25025000701  2016-01-01      Guns 2016  1.16 #> 128  25025000701  2017-01-01      Guns 2017  0.47 #> 129  25025000701  2018-01-01      Guns 2018  0.00 #> 130  25025000701  2019-01-01      Guns 2019  0.42 #> 131  25025000703  2010-01-01      Guns 2010  0.00 #> 132  25025000703  2011-01-01      Guns 2011  3.34 #> 133  25025000703  2012-01-01      Guns 2012  1.34 #> 134  25025000703  2013-01-01      Guns 2013  2.80 #> 135  25025000703  2014-01-01      Guns 2014  3.06 #> 136  25025000703  2015-01-01      Guns 2015  4.67 #> 137  25025000703  2016-01-01      Guns 2016  3.63 #> 138  25025000703  2017-01-01      Guns 2017  3.63 #> 139  25025000703  2018-01-01      Guns 2018  5.71 #> 140  25025000703  2019-01-01      Guns 2019  3.06 #> 141  25025000704  2010-01-01      Guns 2010  0.00 #> 142  25025000704  2011-01-01      Guns 2011  2.66 #> 143  25025000704  2012-01-01      Guns 2012  1.63 #> 144  25025000704  2013-01-01      Guns 2013  3.05 #> 145  25025000704  2014-01-01      Guns 2014  2.21 #> 146  25025000704  2015-01-01      Guns 2015  1.96 #> 147  25025000704  2016-01-01      Guns 2016  2.62 #> 148  25025000704  2017-01-01      Guns 2017  0.65 #> 149  25025000704  2018-01-01      Guns 2018  1.09 #> 150  25025000704  2019-01-01      Guns 2019  0.41 #> 151  25025000802  2010-01-01      Guns 2010  0.25 #> 152  25025000802  2011-01-01      Guns 2011  1.58 #> 153  25025000802  2012-01-01      Guns 2012  2.35 #> 154  25025000802  2013-01-01      Guns 2013  3.51 #> 155  25025000802  2014-01-01      Guns 2014  2.13 #> 156  25025000802  2015-01-01      Guns 2015  2.12 #> 157  25025000802  2016-01-01      Guns 2016  3.49 #> 158  25025000802  2017-01-01      Guns 2017  3.03 #> 159  25025000802  2018-01-01      Guns 2018  3.18 #> 160  25025000802  2019-01-01      Guns 2019  2.55 #> 161  25025000803  2010-01-01      Guns 2010  0.00 #> 162  25025000803  2011-01-01      Guns 2011  0.87 #> 163  25025000803  2012-01-01      Guns 2012  0.49 #> 164  25025000803  2013-01-01      Guns 2013  0.00 #> 165  25025000803  2014-01-01      Guns 2014  0.00 #> 166  25025000803  2015-01-01      Guns 2015  0.00 #> 167  25025000803  2016-01-01      Guns 2016  0.32 #> 168  25025000803  2017-01-01      Guns 2017  0.16 #> 169  25025000803  2018-01-01      Guns 2018  0.48 #> 170  25025000803  2019-01-01      Guns 2019  0.33 #> 171  25025010103  2010-01-01      Guns 2010  0.00 #> 172  25025010103  2011-01-01      Guns 2011  0.51 #> 173  25025010103  2012-01-01      Guns 2012  0.00 #> 174  25025010103  2013-01-01      Guns 2013  0.28 #> 175  25025010103  2014-01-01      Guns 2014  0.27 #> 176  25025010103  2015-01-01      Guns 2015  1.35 #> 177  25025010103  2016-01-01      Guns 2016  0.00 #> 178  25025010103  2017-01-01      Guns 2017  0.00 #> 179  25025010103  2018-01-01      Guns 2018  0.81 #> 180  25025010103  2019-01-01      Guns 2019  0.00 #> 181  25025010104  2010-01-01      Guns 2010  0.00 #> 182  25025010104  2011-01-01      Guns 2011  0.42 #> 183  25025010104  2012-01-01      Guns 2012  0.64 #> 184  25025010104  2013-01-01      Guns 2013  0.84 #> 185  25025010104  2014-01-01      Guns 2014  0.21 #> 186  25025010104  2015-01-01      Guns 2015  0.82 #> 187  25025010104  2016-01-01      Guns 2016  0.00 #> 188  25025010104  2017-01-01      Guns 2017  0.61 #> 189  25025010104  2018-01-01      Guns 2018  1.02 #> 190  25025010104  2019-01-01      <NA>   NA    NA #> 191  25025010203  2010-01-01      Guns 2010  0.42 #> 192  25025010203  2011-01-01      Guns 2011  1.47 #> 193  25025010203  2012-01-01      Guns 2012  1.05 #> 194  25025010203  2013-01-01      Guns 2013  1.21 #> 195  25025010203  2014-01-01      Guns 2014  2.17 #> 196  25025010203  2015-01-01      Guns 2015  3.29 #> 197  25025010203  2016-01-01      Guns 2016  2.71 #> 198  25025010203  2017-01-01      Guns 2017  1.35 #> 199  25025010203  2018-01-01      Guns 2018  1.93 #> 200  25025010203  2019-01-01      Guns 2019  1.49 #> 201  25025010204  2010-01-01      Guns 2010  0.00 #> 202  25025010204  2011-01-01      Guns 2011  0.30 #> 203  25025010204  2012-01-01      Guns 2012  0.31 #> 204  25025010204  2013-01-01      Guns 2013  0.60 #> 205  25025010204  2014-01-01      Guns 2014  0.92 #> 206  25025010204  2015-01-01      Guns 2015  0.00 #> 207  25025010204  2016-01-01      Guns 2016  0.89 #> 208  25025010204  2017-01-01      Guns 2017  0.00 #> 209  25025010204  2018-01-01      Guns 2018  1.49 #> 210  25025010204  2019-01-01      <NA>   NA    NA #> 211  25025010300  2010-01-01      Guns 2010  0.00 #> 212  25025010300  2011-01-01      Guns 2011  0.59 #> 213  25025010300  2012-01-01      Guns 2012  0.19 #> 214  25025010300  2013-01-01      <NA>   NA    NA #> 215  25025010300  2014-01-01      Guns 2014  0.00 #> 216  25025010300  2015-01-01      Guns 2015  0.56 #> 217  25025010300  2016-01-01      Guns 2016  0.56 #> 218  25025010300  2017-01-01      Guns 2017  0.37 #> 219  25025010300  2018-01-01      Guns 2018  0.56 #> 220  25025010300  2019-01-01      Guns 2019  0.00 #> 221  25025010403  2010-01-01      Guns 2010  0.00 #> 222  25025010403  2011-01-01      Guns 2011  3.11 #> 223  25025010403  2012-01-01      Guns 2012  0.68 #> 224  25025010403  2013-01-01      Guns 2013  3.13 #> 225  25025010403  2014-01-01      Guns 2014  1.03 #> 226  25025010403  2015-01-01      Guns 2015  2.44 #> 227  25025010403  2016-01-01      Guns 2016  0.35 #> 228  25025010403  2017-01-01      Guns 2017  2.79 #> 229  25025010403  2018-01-01      Guns 2018  3.83 #> 230  25025010403  2019-01-01      Guns 2019  2.10 #> 231  25025010404  2010-01-01      Guns 2010  0.00 #> 232  25025010404  2011-01-01      Guns 2011  0.86 #> 233  25025010404  2012-01-01      Guns 2012  0.17 #> 234  25025010404  2013-01-01      Guns 2013  1.35 #> 235  25025010404  2014-01-01      Guns 2014  1.58 #> 236  25025010404  2015-01-01      Guns 2015  1.17 #> 237  25025010404  2016-01-01      Guns 2016  0.78 #> 238  25025010404  2017-01-01      Guns 2017  0.39 #> 239  25025010404  2018-01-01      Guns 2018  1.17 #> 240  25025010404  2019-01-01      Guns 2019  0.19 #> 241  25025010405  2010-01-01      Guns 2010  0.35 #> 242  25025010405  2011-01-01      Guns 2011  0.89 #> 243  25025010405  2012-01-01      Guns 2012  1.20 #> 244  25025010405  2013-01-01      Guns 2013  0.84 #> 245  25025010405  2014-01-01      Guns 2014  1.50 #> 246  25025010405  2015-01-01      <NA>   NA    NA #> 247  25025010405  2016-01-01      Guns 2016  1.48 #> 248  25025010405  2017-01-01      Guns 2017  1.64 #> 249  25025010405  2018-01-01      Guns 2018  0.49 #> 250  25025010405  2019-01-01      Guns 2019  0.17 #> 251  25025010408  2010-01-01      Guns 2010  0.00 #> 252  25025010408  2011-01-01      Guns 2011  0.68 #> 253  25025010408  2012-01-01      Guns 2012  1.33 #> 254  25025010408  2013-01-01      Guns 2013  1.35 #> 255  25025010408  2014-01-01      Guns 2014  2.13 #> 256  25025010408  2015-01-01      Guns 2015  0.72 #> 257  25025010408  2016-01-01      Guns 2016  0.72 #> 258  25025010408  2017-01-01      Guns 2017  0.72 #> 259  25025010408  2018-01-01      Guns 2018  0.00 #> 260  25025010408  2019-01-01      Guns 2019  0.00 #> 261  25025010500  2010-01-01      Guns 2010  0.00 #> 262  25025010500  2011-01-01      Guns 2011  0.00 #> 263  25025010500  2012-01-01      Guns 2012  0.60 #> 264  25025010500  2013-01-01      Guns 2013  1.80 #> 265  25025010500  2014-01-01      <NA>   NA    NA #> 266  25025010500  2015-01-01      Guns 2015  2.06 #> 267  25025010500  2016-01-01      Guns 2016  1.47 #> 268  25025010500  2017-01-01      Guns 2017  1.47 #> 269  25025010500  2018-01-01      Guns 2018  3.24 #> 270  25025010500  2019-01-01      Guns 2019  1.99 #> 271  25025010600  2010-01-01      Guns 2010  0.35 #> 272  25025010600  2011-01-01      Guns 2011  2.19 #> 273  25025010600  2012-01-01      Guns 2012  1.06 #> 274  25025010600  2013-01-01      Guns 2013  1.65 #> 275  25025010600  2014-01-01      Guns 2014  3.50 #> 276  25025010600  2015-01-01      Guns 2015  5.12 #> 277  25025010600  2016-01-01      Guns 2016  4.16 #> 278  25025010600  2017-01-01      Guns 2017  4.48 #> 279  25025010600  2018-01-01      Guns 2018  5.76 #> 280  25025010600  2019-01-01      Guns 2019  4.77 #> 281  25025010701  2010-01-01      Guns 2010  0.00 #> 282  25025010701  2011-01-01      <NA>   NA    NA #> 283  25025010701  2012-01-01      Guns 2012  0.68 #> 284  25025010701  2013-01-01      <NA>   NA    NA #> 285  25025010701  2014-01-01      Guns 2014  1.43 #> 286  25025010701  2015-01-01      Guns 2015  1.48 #> 287  25025010701  2016-01-01      Guns 2016  1.11 #> 288  25025010701  2017-01-01      Guns 2017  3.33 #> 289  25025010701  2018-01-01      Guns 2018  1.85 #> 290  25025010701  2019-01-01      Guns 2019  4.67 #> 291  25025010702  2010-01-01      Guns 2010  0.46 #> 292  25025010702  2011-01-01      Guns 2011  2.12 #> 293  25025010702  2012-01-01      Guns 2012  2.88 #> 294  25025010702  2013-01-01      Guns 2013  3.68 #> 295  25025010702  2014-01-01      Guns 2014  3.22 #> 296  25025010702  2015-01-01      Guns 2015  2.71 #> 297  25025010702  2016-01-01      Guns 2016  5.80 #> 298  25025010702  2017-01-01      Guns 2017  5.41 #> 299  25025010702  2018-01-01      Guns 2018  5.41 #> 300  25025010702  2019-01-01      Guns 2019  2.68 #> 301  25025010801  2010-01-01      Guns 2010  0.00 #> 302  25025010801  2011-01-01      Guns 2011  0.00 #> 303  25025010801  2012-01-01      Guns 2012  0.00 #> 304  25025010801  2013-01-01      Guns 2013  0.32 #> 305  25025010801  2014-01-01      Guns 2014  0.61 #> 306  25025010801  2015-01-01      Guns 2015  0.31 #> 307  25025010801  2016-01-01      Guns 2016  0.62 #> 308  25025010801  2017-01-01      Guns 2017  0.31 #> 309  25025010801  2018-01-01      Guns 2018  0.62 #> 310  25025010801  2019-01-01      Guns 2019  0.00 #> 311  25025010802  2010-01-01      Guns 2010  0.00 #> 312  25025010802  2011-01-01      Guns 2011  0.33 #> 313  25025010802  2012-01-01      Guns 2012  0.00 #> 314  25025010802  2013-01-01      Guns 2013  0.70 #> 315  25025010802  2014-01-01      Guns 2014  0.00 #> 316  25025010802  2015-01-01      Guns 2015  0.63 #> 317  25025010802  2016-01-01      Guns 2016  0.00 #> 318  25025010802  2017-01-01      Guns 2017  0.63 #> 319  25025010802  2018-01-01      Guns 2018  0.32 #> 320  25025010802  2019-01-01      Guns 2019  0.00 #> 321  25025020101  2010-01-01      Guns 2010  0.00 #> 322  25025020101  2011-01-01      Guns 2011  0.00 #> 323  25025020101  2012-01-01      Guns 2012  0.00 #> 324  25025020101  2013-01-01      Guns 2013  1.36 #> 325  25025020101  2014-01-01      Guns 2014  0.91 #> 326  25025020101  2015-01-01      Guns 2015  1.43 #> 327  25025020101  2016-01-01      Guns 2016  1.02 #> 328  25025020101  2017-01-01      Guns 2017  0.41 #> 329  25025020101  2018-01-01      Guns 2018  0.00 #> 330  25025020101  2019-01-01      Guns 2019  0.21 #> 331  25025020200  2010-01-01      Guns 2010  0.00 #> 332  25025020200  2011-01-01      Guns 2011  0.26 #> 333  25025020200  2012-01-01      Guns 2012  0.77 #> 334  25025020200  2013-01-01      Guns 2013  0.26 #> 335  25025020200  2014-01-01      Guns 2014  0.00 #> 336  25025020200  2015-01-01      Guns 2015  0.26 #> 337  25025020200  2016-01-01      Guns 2016  1.06 #> 338  25025020200  2017-01-01      Guns 2017  1.06 #> 339  25025020200  2018-01-01      Guns 2018  0.26 #> 340  25025020200  2019-01-01      Guns 2019  0.00 #> 341  25025020301  2010-01-01      Guns 2010  0.00 #> 342  25025020301  2011-01-01      Guns 2011  0.44 #> 343  25025020301  2012-01-01      Guns 2012  1.53 #> 344  25025020301  2013-01-01      Guns 2013  2.11 #> 345  25025020301  2014-01-01      Guns 2014  3.39 #> 346  25025020301  2015-01-01      Guns 2015  1.27 #> 347  25025020301  2016-01-01      Guns 2016  2.12 #> 348  25025020301  2017-01-01      Guns 2017  0.42 #> 349  25025020301  2018-01-01      <NA>   NA    NA #> 350  25025020301  2019-01-01      Guns 2019  0.46 #> 351  25025020302  2010-01-01      <NA>   NA    NA #> 352  25025020302  2011-01-01      Guns 2011  2.49 #> 353  25025020302  2012-01-01      Guns 2012  0.00 #> 354  25025020302  2013-01-01      Guns 2013  2.01 #> 355  25025020302  2014-01-01      Guns 2014  0.99 #> 356  25025020302  2015-01-01      Guns 2015  0.95 #> 357  25025020302  2016-01-01      Guns 2016  0.00 #> 358  25025020302  2017-01-01      Guns 2017  3.80 #> 359  25025020302  2018-01-01      Guns 2018  0.00 #> 360  25025020302  2019-01-01      Guns 2019  1.02 #> 361  25025020303  2010-01-01      Guns 2010  0.00 #> 362  25025020303  2011-01-01      Guns 2011  1.60 #> 363  25025020303  2012-01-01      Guns 2012  0.86 #> 364  25025020303  2013-01-01      Guns 2013  2.24 #> 365  25025020303  2014-01-01      Guns 2014  1.35 #> 366  25025020303  2015-01-01      Guns 2015  2.10 #> 367  25025020303  2016-01-01      Guns 2016  1.31 #> 368  25025020303  2017-01-01      Guns 2017  2.88 #> 369  25025020303  2018-01-01      Guns 2018  2.36 #> 370  25025020303  2019-01-01      Guns 2019  2.09 #> 371  25025030100  2010-01-01      Guns 2010  0.00 #> 372  25025030100  2011-01-01      Guns 2011  0.99 #> 373  25025030100  2012-01-01      Guns 2012  0.46 #> 374  25025030100  2013-01-01      <NA>   NA    NA #> 375  25025030100  2014-01-01      Guns 2014  0.91 #> 376  25025030100  2015-01-01      Guns 2015  0.44 #> 377  25025030100  2016-01-01      Guns 2016  0.44 #> 378  25025030100  2017-01-01      Guns 2017  0.44 #> 379  25025030100  2018-01-01      Guns 2018  1.33 #> 380  25025030100  2019-01-01      Guns 2019  0.43 #> 381  25025030200  2010-01-01      Guns 2010  0.00 #> 382  25025030200  2011-01-01      Guns 2011  0.00 #> 383  25025030200  2012-01-01      Guns 2012  0.00 #> 384  25025030200  2013-01-01      Guns 2013  1.15 #> 385  25025030200  2014-01-01      Guns 2014  0.59 #> 386  25025030200  2015-01-01      Guns 2015  1.18 #> 387  25025030200  2016-01-01      Guns 2016  1.18 #> 388  25025030200  2017-01-01      Guns 2017  1.77 #> 389  25025030200  2018-01-01      Guns 2018  1.77 #> 390  25025030200  2019-01-01      Guns 2019  1.65 #> 391  25025030300  2010-01-01      Guns 2010  0.19 #> 392  25025030300  2011-01-01      Guns 2011  1.85 #> 393  25025030300  2012-01-01      Guns 2012  0.92 #> 394  25025030300  2013-01-01      Guns 2013  2.18 #> 395  25025030300  2014-01-01      Guns 2014  2.70 #> 396  25025030300  2015-01-01      Guns 2015  4.84 #> 397  25025030300  2016-01-01      Guns 2016  3.94 #> 398  25025030300  2017-01-01      Guns 2017  3.58 #> 399  25025030300  2018-01-01      Guns 2018  3.40 #> 400  25025030300  2019-01-01      Guns 2019  3.06 #> 401  25025030400  2010-01-01      Guns 2010  0.00 #> 402  25025030400  2011-01-01      Guns 2011  0.42 #> 403  25025030400  2012-01-01      Guns 2012  0.39 #> 404  25025030400  2013-01-01      Guns 2013  0.00 #> 405  25025030400  2014-01-01      Guns 2014  1.41 #> 406  25025030400  2015-01-01      Guns 2015  0.73 #> 407  25025030400  2016-01-01      Guns 2016  0.73 #> 408  25025030400  2017-01-01      Guns 2017  0.36 #> 409  25025030400  2018-01-01      Guns 2018  0.36 #> 410  25025030400  2019-01-01      Guns 2019  0.37 #> 411  25025030500  2010-01-01      Guns 2010  0.00 #> 412  25025030500  2011-01-01      Guns 2011  0.00 #> 413  25025030500  2012-01-01      Guns 2012  0.74 #> 414  25025030500  2013-01-01      Guns 2013  0.38 #> 415  25025030500  2014-01-01      Guns 2014  0.00 #> 416  25025030500  2015-01-01      Guns 2015  0.39 #> 417  25025030500  2016-01-01      <NA>   NA    NA #> 418  25025030500  2017-01-01      Guns 2017  0.39 #> 419  25025030500  2018-01-01      Guns 2018  0.39 #> 420  25025030500  2019-01-01      Guns 2019  0.40 #> 421  25025040100  2010-01-01      Guns 2010  0.00 #> 422  25025040100  2011-01-01      Guns 2011  0.88 #> 423  25025040100  2012-01-01      Guns 2012  0.43 #> 424  25025040100  2013-01-01      Guns 2013  1.67 #> 425  25025040100  2014-01-01      Guns 2014  1.20 #> 426  25025040100  2015-01-01      Guns 2015  0.41 #> 427  25025040100  2016-01-01      Guns 2016  0.81 #> 428  25025040100  2017-01-01      Guns 2017  0.81 #> 429  25025040100  2018-01-01      Guns 2018  0.41 #> 430  25025040100  2019-01-01      Guns 2019  0.41 #> 431  25025040200  2010-01-01      Guns 2010  1.61 #> 432  25025040200  2011-01-01      Guns 2011  1.70 #> 433  25025040200  2012-01-01      Guns 2012  3.66 #> 434  25025040200  2013-01-01      Guns 2013  4.35 #> 435  25025040200  2014-01-01      Guns 2014  4.17 #> 436  25025040200  2015-01-01      Guns 2015  1.04 #> 437  25025040200  2016-01-01      Guns 2016  2.60 #> 438  25025040200  2017-01-01      Guns 2017  2.60 #> 439  25025040200  2018-01-01      Guns 2018  3.12 #> 440  25025040200  2019-01-01      Guns 2019  2.45 #> 441  25025040300  2010-01-01      Guns 2010  0.48 #> 442  25025040300  2011-01-01      Guns 2011  2.64 #> 443  25025040300  2012-01-01      Guns 2012  2.39 #> 444  25025040300  2013-01-01      Guns 2013  3.47 #> 445  25025040300  2014-01-01      Guns 2014  5.75 #> 446  25025040300  2015-01-01      Guns 2015  2.39 #> 447  25025040300  2016-01-01      Guns 2016  0.48 #> 448  25025040300  2017-01-01      Guns 2017  0.95 #> 449  25025040300  2018-01-01      Guns 2018  1.67 #> 450  25025040300  2019-01-01      Guns 2019  1.11 #> 451  25025040401  2010-01-01      Guns 2010  0.35 #> 452  25025040401  2011-01-01      Guns 2011  1.17 #> 453  25025040401  2012-01-01      Guns 2012  0.80 #> 454  25025040401  2013-01-01      Guns 2013  2.38 #> 455  25025040401  2014-01-01      Guns 2014  2.30 #> 456  25025040401  2015-01-01      Guns 2015  1.45 #> 457  25025040401  2016-01-01      Guns 2016  2.18 #> 458  25025040401  2017-01-01      Guns 2017  2.18 #> 459  25025040401  2018-01-01      <NA>   NA    NA #> 460  25025040401  2019-01-01      Guns 2019  0.68 #> 461  25025040600  2010-01-01      Guns 2010  0.00 #> 462  25025040600  2011-01-01      Guns 2011  0.35 #> 463  25025040600  2012-01-01      Guns 2012  1.05 #> 464  25025040600  2013-01-01      Guns 2013  2.44 #> 465  25025040600  2014-01-01      Guns 2014  0.00 #> 466  25025040600  2015-01-01      Guns 2015  1.30 #> 467  25025040600  2016-01-01      Guns 2016  1.95 #> 468  25025040600  2017-01-01      Guns 2017  1.62 #> 469  25025040600  2018-01-01      Guns 2018  2.27 #> 470  25025040600  2019-01-01      Guns 2019  1.96 #> 471  25025040801  2010-01-01      Guns 2010  0.58 #> 472  25025040801  2011-01-01      Guns 2011  3.69 #> 473  25025040801  2012-01-01      Guns 2012  1.68 #> 474  25025040801  2013-01-01      Guns 2013  7.08 #> 475  25025040801  2014-01-01      Guns 2014  4.11 #> 476  25025040801  2015-01-01      Guns 2015  2.90 #> 477  25025040801  2016-01-01      Guns 2016  5.13 #> 478  25025040801  2017-01-01      Guns 2017  3.12 #> 479  25025040801  2018-01-01      Guns 2018  4.68 #> 480  25025040801  2019-01-01      Guns 2019  1.83 #> 481  25025050101  2010-01-01      Guns 2010  0.19 #> 482  25025050101  2011-01-01      Guns 2011  1.52 #> 483  25025050101  2012-01-01      <NA>   NA    NA #> 484  25025050101  2013-01-01      Guns 2013  1.09 #> 485  25025050101  2014-01-01      Guns 2014  2.94 #> 486  25025050101  2015-01-01      Guns 2015  1.68 #> 487  25025050101  2016-01-01      Guns 2016  1.31 #> 488  25025050101  2017-01-01      Guns 2017  1.31 #> 489  25025050101  2018-01-01      Guns 2018  3.17 #> 490  25025050101  2019-01-01      Guns 2019  1.80 #> 491  25025050200  2010-01-01      Guns 2010  0.20 #> 492  25025050200  2011-01-01      Guns 2011  1.83 #> 493  25025050200  2012-01-01      Guns 2012  2.01 #> 494  25025050200  2013-01-01      Guns 2013  1.32 #> 495  25025050200  2014-01-01      Guns 2014  2.55 #> 496  25025050200  2015-01-01      Guns 2015  1.80 #> 497  25025050200  2016-01-01      Guns 2016  1.80 #> 498  25025050200  2017-01-01      Guns 2017  1.14 #> 499  25025050200  2018-01-01      Guns 2018  1.47 #> 500  25025050200  2019-01-01      Guns 2019  0.71 #> 501  25025050300  2010-01-01      Guns 2010  0.00 #> 502  25025050300  2011-01-01      Guns 2011  1.37 #> 503  25025050300  2012-01-01      Guns 2012  2.54 #> 504  25025050300  2013-01-01      Guns 2013  5.60 #> 505  25025050300  2014-01-01      Guns 2014  6.07 #> 506  25025050300  2015-01-01      Guns 2015  7.87 #> 507  25025050300  2016-01-01      Guns 2016  6.56 #> 508  25025050300  2017-01-01      Guns 2017  5.68 #> 509  25025050300  2018-01-01      Guns 2018  4.37 #> 510  25025050300  2019-01-01      Guns 2019  1.61 #> 511  25025050400  2010-01-01      Guns 2010  0.00 #> 512  25025050400  2011-01-01      Guns 2011  3.02 #> 513  25025050400  2012-01-01      Guns 2012  1.60 #> 514  25025050400  2013-01-01      Guns 2013  3.28 #> 515  25025050400  2014-01-01      Guns 2014  1.17 #> 516  25025050400  2015-01-01      Guns 2015  1.95 #> 517  25025050400  2016-01-01      Guns 2016  4.30 #> 518  25025050400  2017-01-01      Guns 2017  1.17 #> 519  25025050400  2018-01-01      Guns 2018  2.73 #> 520  25025050400  2019-01-01      Guns 2019  1.21 #> 521  25025050500  2010-01-01      <NA>   NA    NA #> 522  25025050500  2011-01-01      <NA>   NA    NA #> 523  25025050500  2012-01-01      Guns 2012  0.91 #> 524  25025050500  2013-01-01      Guns 2013  0.87 #> 525  25025050500  2014-01-01      Guns 2014  0.81 #> 526  25025050500  2015-01-01      Guns 2015  0.00 #> 527  25025050500  2016-01-01      Guns 2016  0.80 #> 528  25025050500  2017-01-01      Guns 2017  0.40 #> 529  25025050500  2018-01-01      <NA>   NA    NA #> 530  25025050500  2019-01-01      Guns 2019  0.43 #> 531  25025050600  2010-01-01      <NA>   NA    NA #> 532  25025050600  2011-01-01      Guns 2011  1.22 #> 533  25025050600  2012-01-01      Guns 2012  1.26 #> 534  25025050600  2013-01-01      Guns 2013  2.62 #> 535  25025050600  2014-01-01      Guns 2014  2.36 #> 536  25025050600  2015-01-01      Guns 2015  3.74 #> 537  25025050600  2016-01-01      <NA>   NA    NA #> 538  25025050600  2017-01-01      Guns 2017  0.42 #> 539  25025050600  2018-01-01      Guns 2018  0.83 #> 540  25025050600  2019-01-01      Guns 2019  2.02 #> 541  25025050700  2010-01-01      Guns 2010  0.00 #> 542  25025050700  2011-01-01      Guns 2011  0.62 #> 543  25025050700  2012-01-01      Guns 2012  1.01 #> 544  25025050700  2013-01-01      Guns 2013  1.69 #> 545  25025050700  2014-01-01      Guns 2014  1.83 #> 546  25025050700  2015-01-01      Guns 2015  0.89 #> 547  25025050700  2016-01-01      Guns 2016  0.89 #> 548  25025050700  2017-01-01      Guns 2017  0.89 #> 549  25025050700  2018-01-01      Guns 2018  0.72 #> 550  25025050700  2019-01-01      Guns 2019  0.36 #> 551  25025050901  2010-01-01      <NA>   NA    NA #> 552  25025050901  2011-01-01      Guns 2011  1.83 #> 553  25025050901  2012-01-01      Guns 2012  2.42 #> 554  25025050901  2013-01-01      Guns 2013  1.27 #> 555  25025050901  2014-01-01      Guns 2014  2.34 #> 556  25025050901  2015-01-01      Guns 2015  1.99 #> 557  25025050901  2016-01-01      Guns 2016  3.32 #> 558  25025050901  2017-01-01      Guns 2017  2.21 #> 559  25025050901  2018-01-01      Guns 2018  2.43 #> 560  25025050901  2019-01-01      Guns 2019  1.52 #> 561  25025051000  2010-01-01      Guns 2010  0.23 #> 562  25025051000  2011-01-01      Guns 2011  0.92 #> 563  25025051000  2012-01-01      Guns 2012  0.86 #> 564  25025051000  2013-01-01      Guns 2013  0.66 #> 565  25025051000  2014-01-01      Guns 2014  0.90 #> 566  25025051000  2015-01-01      Guns 2015  0.86 #> 567  25025051000  2016-01-01      Guns 2016  0.64 #> 568  25025051000  2017-01-01      Guns 2017  1.50 #> 569  25025051000  2018-01-01      Guns 2018  0.64 #> 570  25025051000  2019-01-01      Guns 2019  0.41 #> 571  25025051101  2010-01-01      Guns 2010  0.31 #> 572  25025051101  2011-01-01      Guns 2011  1.89 #> 573  25025051101  2012-01-01      Guns 2012  1.41 #> 574  25025051101  2013-01-01      Guns 2013  2.01 #> 575  25025051101  2014-01-01      Guns 2014  1.97 #> 576  25025051101  2015-01-01      Guns 2015  1.78 #> 577  25025051101  2016-01-01      Guns 2016  0.96 #> 578  25025051101  2017-01-01      Guns 2017  2.46 #> 579  25025051101  2018-01-01      Guns 2018  0.68 #> 580  25025051101  2019-01-01      Guns 2019  1.20 #> 581  25025051200  2010-01-01      Guns 2010  0.47 #> 582  25025051200  2011-01-01      <NA>   NA    NA #> 583  25025051200  2012-01-01      Guns 2012  1.94 #> 584  25025051200  2013-01-01      Guns 2013  1.48 #> 585  25025051200  2014-01-01      Guns 2014  2.70 #> 586  25025051200  2015-01-01      Guns 2015  1.38 #> 587  25025051200  2016-01-01      Guns 2016  1.73 #> 588  25025051200  2017-01-01      Guns 2017  0.69 #> 589  25025051200  2018-01-01      <NA>   NA    NA #> 590  25025051200  2019-01-01      Guns 2019  0.69 #> 591  25025060101  2010-01-01      Guns 2010  0.00 #> 592  25025060101  2011-01-01      Guns 2011  1.10 #> 593  25025060101  2012-01-01      <NA>   NA    NA #> 594  25025060101  2013-01-01      Guns 2013  0.26 #> 595  25025060101  2014-01-01      Guns 2014  1.11 #> 596  25025060101  2015-01-01      Guns 2015  1.10 #> 597  25025060101  2016-01-01      Guns 2016  0.28 #> 598  25025060101  2017-01-01      Guns 2017  0.00 #> 599  25025060101  2018-01-01      Guns 2018  0.28 #> 600  25025060101  2019-01-01      Guns 2019  0.57 #> 601  25025060200  2010-01-01      Guns 2010  0.00 #> 602  25025060200  2011-01-01      Guns 2011  0.95 #> 603  25025060200  2012-01-01      Guns 2012  0.89 #> 604  25025060200  2013-01-01      Guns 2013  0.00 #> 605  25025060200  2014-01-01      Guns 2014  0.83 #> 606  25025060200  2015-01-01      Guns 2015  0.00 #> 607  25025060200  2016-01-01      Guns 2016  0.00 #> 608  25025060200  2017-01-01      Guns 2017  0.86 #> 609  25025060200  2018-01-01      <NA>   NA    NA #> 610  25025060200  2019-01-01      Guns 2019  0.44 #> 611  25025060301  2010-01-01      Guns 2010  0.33 #> 612  25025060301  2011-01-01      Guns 2011  0.97 #> 613  25025060301  2012-01-01      Guns 2012  0.63 #> 614  25025060301  2013-01-01      <NA>   NA    NA #> 615  25025060301  2014-01-01      Guns 2014  0.29 #> 616  25025060301  2015-01-01      Guns 2015  1.40 #> 617  25025060301  2016-01-01      Guns 2016  0.56 #> 618  25025060301  2017-01-01      Guns 2017  0.00 #> 619  25025060301  2018-01-01      Guns 2018  0.84 #> 620  25025060301  2019-01-01      Guns 2019  0.00 #> 621  25025060400  2010-01-01      Guns 2010  0.00 #> 622  25025060400  2011-01-01      Guns 2011  0.40 #> 623  25025060400  2012-01-01      Guns 2012  0.19 #> 624  25025060400  2013-01-01      Guns 2013  0.56 #> 625  25025060400  2014-01-01      Guns 2014  0.90 #> 626  25025060400  2015-01-01      Guns 2015  0.53 #> 627  25025060400  2016-01-01      Guns 2016  0.35 #> 628  25025060400  2017-01-01      Guns 2017  0.71 #> 629  25025060400  2018-01-01      Guns 2018  1.06 #> 630  25025060400  2019-01-01      Guns 2019  1.06 #> 631  25025060501  2010-01-01      Guns 2010  0.00 #> 632  25025060501  2011-01-01      Guns 2011  0.81 #> 633  25025060501  2012-01-01      Guns 2012  0.79 #> 634  25025060501  2013-01-01      Guns 2013  1.48 #> 635  25025060501  2014-01-01      Guns 2014  0.97 #> 636  25025060501  2015-01-01      Guns 2015  1.43 #> 637  25025060501  2016-01-01      Guns 2016  0.71 #> 638  25025060501  2017-01-01      Guns 2017  0.95 #> 639  25025060501  2018-01-01      Guns 2018  1.19 #> 640  25025060501  2019-01-01      Guns 2019  0.25 #> 641  25025060600  2010-01-01      Guns 2010  0.00 #> 642  25025060600  2011-01-01      Guns 2011  2.44 #> 643  25025060600  2012-01-01      Guns 2012  0.39 #> 644  25025060600  2013-01-01      Guns 2013  2.99 #> 645  25025060600  2014-01-01      <NA>   NA    NA #> 646  25025060600  2015-01-01      Guns 2015  1.24 #> 647  25025060600  2016-01-01      Guns 2016  1.86 #> 648  25025060600  2017-01-01      Guns 2017  3.11 #> 649  25025060600  2018-01-01      Guns 2018  2.49 #> 650  25025060600  2019-01-01      <NA>   NA    NA #> 651  25025060700  2010-01-01      Guns 2010  0.00 #> 652  25025060700  2011-01-01      Guns 2011  2.12 #> 653  25025060700  2012-01-01      Guns 2012  6.14 #> 654  25025060700  2013-01-01      Guns 2013  3.13 #> 655  25025060700  2014-01-01      Guns 2014  5.07 #> 656  25025060700  2015-01-01      Guns 2015  9.53 #> 657  25025060700  2016-01-01      Guns 2016  3.81 #> 658  25025060700  2017-01-01      Guns 2017 21.34 #> 659  25025060700  2018-01-01      Guns 2018 15.62 #> 660  25025060700  2019-01-01      Guns 2019  3.06 #> 661  25025060800  2010-01-01      Guns 2010  0.00 #> 662  25025060800  2011-01-01      Guns 2011  0.67 #> 663  25025060800  2012-01-01      Guns 2012  0.66 #> 664  25025060800  2013-01-01      Guns 2013  1.76 #> 665  25025060800  2014-01-01      Guns 2014  0.45 #> 666  25025060800  2015-01-01      Guns 2015  3.20 #> 667  25025060800  2016-01-01      Guns 2016  1.83 #> 668  25025060800  2017-01-01      Guns 2017  3.43 #> 669  25025060800  2018-01-01      Guns 2018  4.12 #> 670  25025060800  2019-01-01      Guns 2019  1.62 #> 671  25025061000  2010-01-01      Guns 2010  0.30 #> 672  25025061000  2011-01-01      Guns 2011  0.60 #> 673  25025061000  2012-01-01      Guns 2012  2.47 #> 674  25025061000  2013-01-01      Guns 2013  3.45 #> 675  25025061000  2014-01-01      Guns 2014  1.91 #> 676  25025061000  2015-01-01      Guns 2015  3.64 #> 677  25025061000  2016-01-01      Guns 2016  3.04 #> 678  25025061000  2017-01-01      Guns 2017 10.02 #> 679  25025061000  2018-01-01      Guns 2018  6.68 #> 680  25025061000  2019-01-01      Guns 2019  2.79 #> 681  25025061101  2010-01-01      Guns 2010  0.91 #> 682  25025061101  2011-01-01      Guns 2011  3.34 #> 683  25025061101  2012-01-01      Guns 2012  5.29 #> 684  25025061101  2013-01-01      Guns 2013  5.54 #> 685  25025061101  2014-01-01      Guns 2014  6.33 #> 686  25025061101  2015-01-01      Guns 2015 11.49 #> 687  25025061101  2016-01-01      Guns 2016 12.37 #> 688  25025061101  2017-01-01      Guns 2017 11.93 #> 689  25025061101  2018-01-01      Guns 2018 10.16 #> 690  25025061101  2019-01-01      Guns 2019  9.57 #> 691  25025061200  2010-01-01      Guns 2010  0.59 #> 692  25025061200  2011-01-01      Guns 2011  1.54 #> 693  25025061200  2012-01-01      Guns 2012  3.18 #> 694  25025061200  2013-01-01      Guns 2013  4.51 #> 695  25025061200  2014-01-01      Guns 2014  2.05 #> 696  25025061200  2015-01-01      Guns 2015  3.52 #> 697  25025061200  2016-01-01      Guns 2016  1.64 #> 698  25025061200  2017-01-01      Guns 2017  3.28 #> 699  25025061200  2018-01-01      Guns 2018  6.10 #> 700  25025061200  2019-01-01      Guns 2019  3.90 #> 701  25025070101  2010-01-01      Guns 2010  0.36 #> 702  25025070101  2011-01-01      Guns 2011  3.04 #> 703  25025070101  2012-01-01      Guns 2012  2.73 #> 704  25025070101  2013-01-01      Guns 2013  7.06 #> 705  25025070101  2014-01-01      Guns 2014  6.76 #> 706  25025070101  2015-01-01      Guns 2015  7.08 #> 707  25025070101  2016-01-01      Guns 2016  8.93 #> 708  25025070101  2017-01-01      Guns 2017 10.62 #> 709  25025070101  2018-01-01      Guns 2018  9.08 #> 710  25025070101  2019-01-01      Guns 2019  5.09 #> 711  25025070200  2010-01-01      Guns 2010  0.19 #> 712  25025070200  2011-01-01      Guns 2011  3.26 #> 713  25025070200  2012-01-01      Guns 2012  3.30 #> 714  25025070200  2013-01-01      Guns 2013  2.10 #> 715  25025070200  2014-01-01      Guns 2014  2.66 #> 716  25025070200  2015-01-01      Guns 2015  2.36 #> 717  25025070200  2016-01-01      Guns 2016  2.54 #> 718  25025070200  2017-01-01      Guns 2017  4.00 #> 719  25025070200  2018-01-01      Guns 2018  3.45 #> 720  25025070200  2019-01-01      Guns 2019  2.67 #> 721  25025070300  2010-01-01      Guns 2010  0.45 #> 722  25025070300  2011-01-01      Guns 2011  0.91 #> 723  25025070300  2012-01-01      Guns 2012  0.22 #> 724  25025070300  2013-01-01      Guns 2013  1.61 #> 725  25025070300  2014-01-01      Guns 2014  0.44 #> 726  25025070300  2015-01-01      Guns 2015  1.12 #> 727  25025070300  2016-01-01      Guns 2016  1.12 #> 728  25025070300  2017-01-01      Guns 2017  2.69 #> 729  25025070300  2018-01-01      Guns 2018  1.35 #> 730  25025070300  2019-01-01      Guns 2019  1.34 #> 731  25025070402  2010-01-01      Guns 2010  0.00 #> 732  25025070402  2011-01-01      Guns 2011  3.49 #> 733  25025070402  2012-01-01      Guns 2012  1.81 #> 734  25025070402  2013-01-01      Guns 2013  0.00 #> 735  25025070402  2014-01-01      Guns 2014  2.11 #> 736  25025070402  2015-01-01      Guns 2015  2.72 #> 737  25025070402  2016-01-01      Guns 2016  2.27 #> 738  25025070402  2017-01-01      Guns 2017  2.27 #> 739  25025070402  2018-01-01      Guns 2018  2.72 #> 740  25025070402  2019-01-01      Guns 2019  1.25 #> 741  25025070500  2010-01-01      Guns 2010  0.16 #> 742  25025070500  2011-01-01      Guns 2011  2.79 #> 743  25025070500  2012-01-01      Guns 2012  3.86 #> 744  25025070500  2013-01-01      Guns 2013  6.76 #> 745  25025070500  2014-01-01      Guns 2014  7.30 #> 746  25025070500  2015-01-01      Guns 2015  6.94 #> 747  25025070500  2016-01-01      Guns 2016  7.79 #> 748  25025070500  2017-01-01      Guns 2017  2.88 #> 749  25025070500  2018-01-01      Guns 2018  2.20 #> 750  25025070500  2019-01-01      Guns 2019  3.29 #> 751  25025070600  2010-01-01      Guns 2010  0.00 #> 752  25025070600  2011-01-01      Guns 2011  1.30 #> 753  25025070600  2012-01-01      Guns 2012  1.68 #> 754  25025070600  2013-01-01      Guns 2013  2.15 #> 755  25025070600  2014-01-01      Guns 2014  2.41 #> 756  25025070600  2015-01-01      Guns 2015  3.59 #> 757  25025070600  2016-01-01      Guns 2016  2.39 #> 758  25025070600  2017-01-01      Guns 2017  0.40 #> 759  25025070600  2018-01-01      Guns 2018  1.20 #> 760  25025070600  2019-01-01      Guns 2019  2.34 #> 761  25025070700  2010-01-01      Guns 2010  0.00 #> 762  25025070700  2011-01-01      Guns 2011  2.49 #> 763  25025070700  2012-01-01      Guns 2012  1.34 #> 764  25025070700  2013-01-01      Guns 2013  3.37 #> 765  25025070700  2014-01-01      Guns 2014  2.19 #> 766  25025070700  2015-01-01      Guns 2015  1.08 #> 767  25025070700  2016-01-01      Guns 2016  2.52 #> 768  25025070700  2017-01-01      Guns 2017  1.08 #> 769  25025070700  2018-01-01      Guns 2018  2.52 #> 770  25025070700  2019-01-01      Guns 2019  2.19 #> 771  25025070800  2010-01-01      Guns 2010  0.27 #> 772  25025070800  2011-01-01      Guns 2011  3.51 #> 773  25025070800  2012-01-01      Guns 2012  3.25 #> 774  25025070800  2013-01-01      Guns 2013  4.30 #> 775  25025070800  2014-01-01      Guns 2014  6.44 #> 776  25025070800  2015-01-01      Guns 2015  4.06 #> 777  25025070800  2016-01-01      Guns 2016  1.45 #> 778  25025070800  2017-01-01      Guns 2017  1.45 #> 779  25025070800  2018-01-01      Guns 2018  3.19 #> 780  25025070800  2019-01-01      Guns 2019  2.24 #> 781  25025070900  2010-01-01      Guns 2010  0.67 #> 782  25025070900  2011-01-01      <NA>   NA    NA #> 783  25025070900  2012-01-01      Guns 2012  4.99 #> 784  25025070900  2013-01-01      Guns 2013  3.17 #> 785  25025070900  2014-01-01      Guns 2014  8.24 #> 786  25025070900  2015-01-01      <NA>   NA    NA #> 787  25025070900  2016-01-01      Guns 2016  7.75 #> 788  25025070900  2017-01-01      Guns 2017 10.11 #> 789  25025070900  2018-01-01      Guns 2018  2.36 #> 790  25025070900  2019-01-01      Guns 2019  5.70 #> 791  25025071101  2010-01-01      Guns 2010  1.79 #> 792  25025071101  2011-01-01      Guns 2011  8.60 #> 793  25025071101  2012-01-01      Guns 2012  7.70 #> 794  25025071101  2013-01-01      <NA>   NA    NA #> 795  25025071101  2014-01-01      Guns 2014 11.08 #> 796  25025071101  2015-01-01      Guns 2015 10.03 #> 797  25025071101  2016-01-01      Guns 2016 12.90 #> 798  25025071101  2017-01-01      Guns 2017 12.90 #> 799  25025071101  2018-01-01      Guns 2018 12.66 #> 800  25025071101  2019-01-01      Guns 2019  9.79 #> 801  25025071201  2010-01-01      Guns 2010  0.34 #> 802  25025071201  2011-01-01      Guns 2011  5.11 #> 803  25025071201  2012-01-01      Guns 2012  1.79 #> 804  25025071201  2013-01-01      Guns 2013  1.77 #> 805  25025071201  2014-01-01      Guns 2014  1.72 #> 806  25025071201  2015-01-01      Guns 2015  2.79 #> 807  25025071201  2016-01-01      Guns 2016  5.59 #> 808  25025071201  2017-01-01      Guns 2017  2.51 #> 809  25025071201  2018-01-01      Guns 2018  2.79 #> 810  25025071201  2019-01-01      Guns 2019  3.75 #> 811  25025080100  2010-01-01      Guns 2010  1.67 #> 812  25025080100  2011-01-01      Guns 2011  5.97 #> 813  25025080100  2012-01-01      Guns 2012  6.63 #> 814  25025080100  2013-01-01      Guns 2013 15.28 #> 815  25025080100  2014-01-01      Guns 2014  8.66 #> 816  25025080100  2015-01-01      Guns 2015 11.75 #> 817  25025080100  2016-01-01      Guns 2016 18.72 #> 818  25025080100  2017-01-01      <NA>   NA    NA #> 819  25025080100  2018-01-01      <NA>   NA    NA #> 820  25025080100  2019-01-01      Guns 2019 12.27 #> 821  25025080300  2010-01-01      Guns 2010  4.15 #> 822  25025080300  2011-01-01      Guns 2011 10.81 #> 823  25025080300  2012-01-01      Guns 2012  9.76 #> 824  25025080300  2013-01-01      Guns 2013 23.18 #> 825  25025080300  2014-01-01      Guns 2014 18.80 #> 826  25025080300  2015-01-01      Guns 2015 19.64 #> 827  25025080300  2016-01-01      Guns 2016 12.38 #> 828  25025080300  2017-01-01      Guns 2017 17.51 #> 829  25025080300  2018-01-01      Guns 2018 12.38 #> 830  25025080300  2019-01-01      Guns 2019  8.62 #> 831  25025080401  2010-01-01      <NA>   NA    NA #> 832  25025080401  2011-01-01      Guns 2011  5.11 #> 833  25025080401  2012-01-01      <NA>   NA    NA #> 834  25025080401  2013-01-01      Guns 2013 10.35 #> 835  25025080401  2014-01-01      Guns 2014 14.06 #> 836  25025080401  2015-01-01      Guns 2015 16.82 #> 837  25025080401  2016-01-01      Guns 2016 15.53 #> 838  25025080401  2017-01-01      Guns 2017 21.03 #> 839  25025080401  2018-01-01      Guns 2018 11.32 #> 840  25025080401  2019-01-01      Guns 2019 10.11 #> 841  25025080500  2010-01-01      Guns 2010  1.52 #> 842  25025080500  2011-01-01      Guns 2011 12.63 #> 843  25025080500  2012-01-01      Guns 2012 14.64 #> 844  25025080500  2013-01-01      Guns 2013 14.30 #> 845  25025080500  2014-01-01      <NA>   NA    NA #> 846  25025080500  2015-01-01      Guns 2015 12.17 #> 847  25025080500  2016-01-01      Guns 2016 13.77 #> 848  25025080500  2017-01-01      Guns 2017  9.93 #> 849  25025080500  2018-01-01      Guns 2018  4.16 #> 850  25025080500  2019-01-01      Guns 2019  5.29 #> 851  25025080601  2010-01-01      Guns 2010  0.59 #> 852  25025080601  2011-01-01      Guns 2011  5.32 #> 853  25025080601  2012-01-01      Guns 2012  6.04 #> 854  25025080601  2013-01-01      Guns 2013  7.71 #> 855  25025080601  2014-01-01      Guns 2014  8.62 #> 856  25025080601  2015-01-01      Guns 2015 14.31 #> 857  25025080601  2016-01-01      <NA>   NA    NA #> 858  25025080601  2017-01-01      Guns 2017 11.54 #> 859  25025080601  2018-01-01      Guns 2018  6.46 #> 860  25025080601  2019-01-01      Guns 2019  6.30 #> 861  25025080801  2010-01-01      Guns 2010  0.58 #> 862  25025080801  2011-01-01      Guns 2011 11.00 #> 863  25025080801  2012-01-01      Guns 2012  6.50 #> 864  25025080801  2013-01-01      Guns 2013  9.68 #> 865  25025080801  2014-01-01      Guns 2014  9.77 #> 866  25025080801  2015-01-01      Guns 2015 12.24 #> 867  25025080801  2016-01-01      Guns 2016  7.79 #> 868  25025080801  2017-01-01      Guns 2017 10.68 #> 869  25025080801  2018-01-01      <NA>   NA    NA #> 870  25025080801  2019-01-01      Guns 2019  6.20 #> 871  25025080900  2010-01-01      Guns 2010  0.58 #> 872  25025080900  2011-01-01      Guns 2011  3.21 #> 873  25025080900  2012-01-01      Guns 2012  2.67 #> 874  25025080900  2013-01-01      Guns 2013  2.87 #> 875  25025080900  2014-01-01      Guns 2014  3.22 #> 876  25025080900  2015-01-01      Guns 2015  2.11 #> 877  25025080900  2016-01-01      Guns 2016  2.38 #> 878  25025080900  2017-01-01      Guns 2017  2.64 #> 879  25025080900  2018-01-01      Guns 2018  0.53 #> 880  25025080900  2019-01-01      <NA>   NA    NA #> 881  25025081001  2010-01-01      Guns 2010  0.67 #> 882  25025081001  2011-01-01      Guns 2011  1.25 #> 883  25025081001  2012-01-01      Guns 2012  1.49 #> 884  25025081001  2013-01-01      Guns 2013  2.19 #> 885  25025081001  2014-01-01      Guns 2014  2.92 #> 886  25025081001  2015-01-01      Guns 2015  5.41 #> 887  25025081001  2016-01-01      Guns 2016  4.21 #> 888  25025081001  2017-01-01      Guns 2017  2.00 #> 889  25025081001  2018-01-01      Guns 2018  2.80 #> 890  25025081001  2019-01-01      Guns 2019  3.12 #> 891  25025081100  2010-01-01      Guns 2010  0.00 #> 892  25025081100  2011-01-01      Guns 2011  2.19 #> 893  25025081100  2012-01-01      Guns 2012  2.85 #> 894  25025081100  2013-01-01      Guns 2013  2.34 #> 895  25025081100  2014-01-01      Guns 2014  4.33 #> 896  25025081100  2015-01-01      Guns 2015  2.90 #> 897  25025081100  2016-01-01      Guns 2016  4.35 #> 898  25025081100  2017-01-01      Guns 2017  7.01 #> 899  25025081100  2018-01-01      Guns 2018  3.14 #> 900  25025081100  2019-01-01      <NA>   NA    NA #> 901  25025081200  2010-01-01      Guns 2010  0.57 #> 902  25025081200  2011-01-01      <NA>   NA    NA #> 903  25025081200  2012-01-01      Guns 2012 11.90 #> 904  25025081200  2013-01-01      Guns 2013 16.06 #> 905  25025081200  2014-01-01      Guns 2014 11.42 #> 906  25025081200  2015-01-01      Guns 2015 24.60 #> 907  25025081200  2016-01-01      Guns 2016 20.69 #> 908  25025081200  2017-01-01      Guns 2017 20.69 #> 909  25025081200  2018-01-01      Guns 2018 12.30 #> 910  25025081200  2019-01-01      Guns 2019 15.01 #> 911  25025081300  2010-01-01      Guns 2010  0.58 #> 912  25025081300  2011-01-01      Guns 2011 10.41 #> 913  25025081300  2012-01-01      Guns 2012  5.21 #> 914  25025081300  2013-01-01      <NA>   NA    NA #> 915  25025081300  2014-01-01      Guns 2014 12.26 #> 916  25025081300  2015-01-01      Guns 2015 14.89 #> 917  25025081300  2016-01-01      Guns 2016 14.35 #> 918  25025081300  2017-01-01      Guns 2017 13.46 #> 919  25025081300  2018-01-01      Guns 2018 10.95 #> 920  25025081300  2019-01-01      Guns 2019  8.26 #> 921  25025081400  2010-01-01      Guns 2010  0.74 #> 922  25025081400  2011-01-01      Guns 2011  5.10 #> 923  25025081400  2012-01-01      Guns 2012  2.74 #> 924  25025081400  2013-01-01      Guns 2013  5.94 #> 925  25025081400  2014-01-01      Guns 2014  6.17 #> 926  25025081400  2015-01-01      Guns 2015  6.51 #> 927  25025081400  2016-01-01      Guns 2016  7.88 #> 928  25025081400  2017-01-01      Guns 2017 11.30 #> 929  25025081400  2018-01-01      <NA>   NA    NA #> 930  25025081400  2019-01-01      Guns 2019  7.14 #> 931  25025081500  2010-01-01      Guns 2010  0.00 #> 932  25025081500  2011-01-01      Guns 2011  7.06 #> 933  25025081500  2012-01-01      <NA>   NA    NA #> 934  25025081500  2013-01-01      Guns 2013  6.41 #> 935  25025081500  2014-01-01      Guns 2014  7.58 #> 936  25025081500  2015-01-01      Guns 2015  5.30 #> 937  25025081500  2016-01-01      <NA>   NA    NA #> 938  25025081500  2017-01-01      Guns 2017  5.30 #> 939  25025081500  2018-01-01      Guns 2018 11.01 #> 940  25025081500  2019-01-01      Guns 2019  7.65 #> 941  25025081700  2010-01-01      Guns 2010  0.87 #> 942  25025081700  2011-01-01      Guns 2011  9.46 #> 943  25025081700  2012-01-01      Guns 2012 15.42 #> 944  25025081700  2013-01-01      Guns 2013 21.58 #> 945  25025081700  2014-01-01      Guns 2014 17.33 #> 946  25025081700  2015-01-01      Guns 2015 15.46 #> 947  25025081700  2016-01-01      Guns 2016 14.43 #> 948  25025081700  2017-01-01      Guns 2017 14.43 #> 949  25025081700  2018-01-01      Guns 2018  8.24 #> 950  25025081700  2019-01-01      <NA>   NA    NA #> 951  25025081800  2010-01-01      Guns 2010  2.22 #> 952  25025081800  2011-01-01      Guns 2011 12.99 #> 953  25025081800  2012-01-01      Guns 2012  9.06 #> 954  25025081800  2013-01-01      <NA>   NA    NA #> 955  25025081800  2014-01-01      Guns 2014 12.84 #> 956  25025081800  2015-01-01      Guns 2015 10.18 #> 957  25025081800  2016-01-01      Guns 2016 10.18 #> 958  25025081800  2017-01-01      Guns 2017 13.01 #> 959  25025081800  2018-01-01      Guns 2018  9.90 #> 960  25025081800  2019-01-01      Guns 2019  6.59 #> 961  25025081900  2010-01-01      Guns 2010  1.04 #> 962  25025081900  2011-01-01      Guns 2011 11.21 #> 963  25025081900  2012-01-01      Guns 2012 13.37 #> 964  25025081900  2013-01-01      Guns 2013 21.91 #> 965  25025081900  2014-01-01      Guns 2014 17.31 #> 966  25025081900  2015-01-01      Guns 2015 16.07 #> 967  25025081900  2016-01-01      Guns 2016 18.33 #> 968  25025081900  2017-01-01      Guns 2017 10.71 #> 969  25025081900  2018-01-01      Guns 2018  7.61 #> 970  25025081900  2019-01-01      Guns 2019 11.73 #> 971  25025082000  2010-01-01      Guns 2010  0.00 #> 972  25025082000  2011-01-01      Guns 2011 13.75 #> 973  25025082000  2012-01-01      Guns 2012 12.50 #> 974  25025082000  2013-01-01      Guns 2013 11.01 #> 975  25025082000  2014-01-01      Guns 2014  9.91 #> 976  25025082000  2015-01-01      <NA>   NA    NA #> 977  25025082000  2016-01-01      Guns 2016 11.70 #> 978  25025082000  2017-01-01      Guns 2017  7.91 #> 979  25025082000  2018-01-01      Guns 2018  5.85 #> 980  25025082000  2019-01-01      Guns 2019  6.16 #> 981  25025082100  2010-01-01      Guns 2010  1.00 #> 982  25025082100  2011-01-01      Guns 2011 10.76 #> 983  25025082100  2012-01-01      Guns 2012  5.59 #> 984  25025082100  2013-01-01      Guns 2013 14.69 #> 985  25025082100  2014-01-01      <NA>   NA    NA #> 986  25025082100  2015-01-01      Guns 2015  8.71 #> 987  25025082100  2016-01-01      Guns 2016 12.79 #> 988  25025082100  2017-01-01      Guns 2017 14.08 #> 989  25025082100  2018-01-01      Guns 2018  7.04 #> 990  25025082100  2019-01-01      Guns 2019  7.30 #> 991  25025090100  2010-01-01      Guns 2010  1.82 #> 992  25025090100  2011-01-01      Guns 2011  8.39 #> 993  25025090100  2012-01-01      Guns 2012  8.38 #> 994  25025090100  2013-01-01      Guns 2013 18.91 #> 995  25025090100  2014-01-01      <NA>   NA    NA #> 996  25025090100  2015-01-01      Guns 2015 12.73 #> 997  25025090100  2016-01-01      Guns 2016 15.36 #> 998  25025090100  2017-01-01      Guns 2017 11.72 #> 999  25025090100  2018-01-01      Guns 2018 12.33 #> 1000 25025090100  2019-01-01      Guns 2019 10.10 #> 1001 25025090200  2010-01-01      Guns 2010  2.04 #> 1002 25025090200  2011-01-01      Guns 2011 13.87 #> 1003 25025090200  2012-01-01      Guns 2012 14.25 #> 1004 25025090200  2013-01-01      Guns 2013 18.88 #> 1005 25025090200  2014-01-01      Guns 2014 15.72 #> 1006 25025090200  2015-01-01      Guns 2015 14.26 #> 1007 25025090200  2016-01-01      Guns 2016 17.52 #> 1008 25025090200  2017-01-01      Guns 2017 11.00 #> 1009 25025090200  2018-01-01      Guns 2018 11.41 #> 1010 25025090200  2019-01-01      <NA>   NA    NA #> 1011 25025090300  2010-01-01      Guns 2010  0.31 #> 1012 25025090300  2011-01-01      Guns 2011 16.33 #> 1013 25025090300  2012-01-01      Guns 2012  7.95 #> 1014 25025090300  2013-01-01      Guns 2013 11.29 #> 1015 25025090300  2014-01-01      Guns 2014 12.36 #> 1016 25025090300  2015-01-01      Guns 2015 15.34 #> 1017 25025090300  2016-01-01      Guns 2016 13.28 #> 1018 25025090300  2017-01-01      Guns 2017 12.98 #> 1019 25025090300  2018-01-01      Guns 2018  6.49 #> 1020 25025090300  2019-01-01      Guns 2019  9.22 #> 1021 25025090400  2010-01-01      Guns 2010  2.46 #> 1022 25025090400  2011-01-01      Guns 2011 10.09 #> 1023 25025090400  2012-01-01      Guns 2012 15.82 #> 1024 25025090400  2013-01-01      Guns 2013  9.84 #> 1025 25025090400  2014-01-01      Guns 2014  6.19 #> 1026 25025090400  2015-01-01      Guns 2015  7.42 #> 1027 25025090400  2016-01-01      Guns 2016  5.34 #> 1028 25025090400  2017-01-01      Guns 2017  7.42 #> 1029 25025090400  2018-01-01      Guns 2018  7.66 #> 1030 25025090400  2019-01-01      Guns 2019  6.72 #> 1031 25025090600  2010-01-01      Guns 2010  1.39 #> 1032 25025090600  2011-01-01      Guns 2011 12.66 #> 1033 25025090600  2012-01-01      Guns 2012 10.00 #> 1034 25025090600  2013-01-01      Guns 2013 15.83 #> 1035 25025090600  2014-01-01      Guns 2014 15.11 #> 1036 25025090600  2015-01-01      <NA>   NA    NA #> 1037 25025090600  2016-01-01      Guns 2016  9.83 #> 1038 25025090600  2017-01-01      Guns 2017 11.06 #> 1039 25025090600  2018-01-01      Guns 2018  6.96 #> 1040 25025090600  2019-01-01      Guns 2019 11.16 #> 1041 25025090700  2010-01-01      Guns 2010  0.24 #> 1042 25025090700  2011-01-01      <NA>   NA    NA #> 1043 25025090700  2012-01-01      Guns 2012  2.20 #> 1044 25025090700  2013-01-01      Guns 2013  4.34 #> 1045 25025090700  2014-01-01      <NA>   NA    NA #> 1046 25025090700  2015-01-01      Guns 2015  4.55 #> 1047 25025090700  2016-01-01      Guns 2016  4.79 #> 1048 25025090700  2017-01-01      Guns 2017  4.79 #> 1049 25025090700  2018-01-01      Guns 2018  3.59 #> 1050 25025090700  2019-01-01      Guns 2019  6.44 #> 1051 25025090901  2010-01-01      Guns 2010  0.00 #> 1052 25025090901  2011-01-01      Guns 2011  2.30 #> 1053 25025090901  2012-01-01      Guns 2012  1.89 #> 1054 25025090901  2013-01-01      Guns 2013  1.04 #> 1055 25025090901  2014-01-01      Guns 2014  2.30 #> 1056 25025090901  2015-01-01      Guns 2015  1.04 #> 1057 25025090901  2016-01-01      Guns 2016  1.82 #> 1058 25025090901  2017-01-01      Guns 2017  1.56 #> 1059 25025090901  2018-01-01      Guns 2018  1.82 #> 1060 25025090901  2019-01-01      <NA>   NA    NA #> 1061 25025091001  2010-01-01      Guns 2010  0.36 #> 1062 25025091001  2011-01-01      Guns 2011  5.39 #> 1063 25025091001  2012-01-01      Guns 2012  3.19 #> 1064 25025091001  2013-01-01      Guns 2013  6.53 #> 1065 25025091001  2014-01-01      Guns 2014  3.40 #> 1066 25025091001  2015-01-01      Guns 2015  3.94 #> 1067 25025091001  2016-01-01      Guns 2016  2.95 #> 1068 25025091001  2017-01-01      Guns 2017  4.60 #> 1069 25025091001  2018-01-01      <NA>   NA    NA #> 1070 25025091001  2019-01-01      Guns 2019  3.03 #> 1071 25025091100  2010-01-01      Guns 2010  0.00 #> 1072 25025091100  2011-01-01      Guns 2011  2.34 #> 1073 25025091100  2012-01-01      Guns 2012  2.64 #> 1074 25025091100  2013-01-01      Guns 2013  2.92 #> 1075 25025091100  2014-01-01      Guns 2014  2.44 #> 1076 25025091100  2015-01-01      Guns 2015  1.78 #> 1077 25025091100  2016-01-01      Guns 2016  1.19 #> 1078 25025091100  2017-01-01      Guns 2017  2.78 #> 1079 25025091100  2018-01-01      Guns 2018  2.78 #> 1080 25025091100  2019-01-01      Guns 2019  1.89 #> 1081 25025091200  2010-01-01      Guns 2010  0.68 #> 1082 25025091200  2011-01-01      Guns 2011  5.18 #> 1083 25025091200  2012-01-01      Guns 2012  5.05 #> 1084 25025091200  2013-01-01      Guns 2013  7.41 #> 1085 25025091200  2014-01-01      Guns 2014 10.80 #> 1086 25025091200  2015-01-01      Guns 2015 11.58 #> 1087 25025091200  2016-01-01      Guns 2016  9.60 #> 1088 25025091200  2017-01-01      Guns 2017 15.88 #> 1089 25025091200  2018-01-01      <NA>   NA    NA #> 1090 25025091200  2019-01-01      Guns 2019  3.98 #> 1091 25025091300  2010-01-01      Guns 2010  0.00 #> 1092 25025091300  2011-01-01      <NA>   NA    NA #> 1093 25025091300  2012-01-01      Guns 2012 16.65 #> 1094 25025091300  2013-01-01      Guns 2013 12.33 #> 1095 25025091300  2014-01-01      <NA>   NA    NA #> 1096 25025091300  2015-01-01      Guns 2015 21.10 #> 1097 25025091300  2016-01-01      Guns 2016 25.79 #> 1098 25025091300  2017-01-01      Guns 2017 14.46 #> 1099 25025091300  2018-01-01      Guns 2018 14.07 #> 1100 25025091300  2019-01-01      Guns 2019  7.81 #> 1101 25025091400  2010-01-01      Guns 2010  0.46 #> 1102 25025091400  2011-01-01      Guns 2011  7.21 #> 1103 25025091400  2012-01-01      Guns 2012  6.13 #> 1104 25025091400  2013-01-01      Guns 2013 13.23 #> 1105 25025091400  2014-01-01      Guns 2014 10.50 #> 1106 25025091400  2015-01-01      Guns 2015  8.42 #> 1107 25025091400  2016-01-01      Guns 2016  7.77 #> 1108 25025091400  2017-01-01      Guns 2017  7.45 #> 1109 25025091400  2018-01-01      Guns 2018  9.71 #> 1110 25025091400  2019-01-01      Guns 2019  8.85 #> 1111 25025091500  2010-01-01      Guns 2010  1.20 #> 1112 25025091500  2011-01-01      Guns 2011  6.91 #> 1113 25025091500  2012-01-01      Guns 2012  7.15 #> 1114 25025091500  2013-01-01      Guns 2013  9.16 #> 1115 25025091500  2014-01-01      Guns 2014 10.47 #> 1116 25025091500  2015-01-01      Guns 2015  9.22 #> 1117 25025091500  2016-01-01      Guns 2016 12.10 #> 1118 25025091500  2017-01-01      Guns 2017 12.49 #> 1119 25025091500  2018-01-01      <NA>   NA    NA #> 1120 25025091500  2019-01-01      Guns 2019  3.96 #> 1121 25025091600  2010-01-01      Guns 2010  1.58 #> 1122 25025091600  2011-01-01      Guns 2011  6.25 #> 1123 25025091600  2012-01-01      Guns 2012  4.18 #> 1124 25025091600  2013-01-01      Guns 2013 14.78 #> 1125 25025091600  2014-01-01      Guns 2014  5.59 #> 1126 25025091600  2015-01-01      Guns 2015  4.39 #> 1127 25025091600  2016-01-01      Guns 2016  7.44 #> 1128 25025091600  2017-01-01      Guns 2017 11.49 #> 1129 25025091600  2018-01-01      Guns 2018  9.80 #> 1130 25025091600  2019-01-01      Guns 2019  7.08 #> 1131 25025091700  2010-01-01      Guns 2010  0.60 #> 1132 25025091700  2011-01-01      Guns 2011  5.26 #> 1133 25025091700  2012-01-01      Guns 2012 10.53 #> 1134 25025091700  2013-01-01      Guns 2013 16.95 #> 1135 25025091700  2014-01-01      Guns 2014 10.86 #> 1136 25025091700  2015-01-01      Guns 2015 11.40 #> 1137 25025091700  2016-01-01      Guns 2016 11.71 #> 1138 25025091700  2017-01-01      Guns 2017 16.02 #> 1139 25025091700  2018-01-01      Guns 2018  5.55 #> 1140 25025091700  2019-01-01      Guns 2019  8.71 #> 1141 25025091800  2010-01-01      Guns 2010  0.87 #> 1142 25025091800  2011-01-01      Guns 2011 13.29 #> 1143 25025091800  2012-01-01      Guns 2012  7.60 #> 1144 25025091800  2013-01-01      Guns 2013  8.92 #> 1145 25025091800  2014-01-01      Guns 2014  9.15 #> 1146 25025091800  2015-01-01      Guns 2015 16.80 #> 1147 25025091800  2016-01-01      Guns 2016 13.22 #> 1148 25025091800  2017-01-01      Guns 2017 12.67 #> 1149 25025091800  2018-01-01      Guns 2018  9.09 #> 1150 25025091800  2019-01-01      Guns 2019  7.37 #> 1151 25025091900  2010-01-01      Guns 2010  0.98 #> 1152 25025091900  2011-01-01      Guns 2011  7.49 #> 1153 25025091900  2012-01-01      Guns 2012  5.65 #> 1154 25025091900  2013-01-01      Guns 2013 14.19 #> 1155 25025091900  2014-01-01      Guns 2014  8.96 #> 1156 25025091900  2015-01-01      Guns 2015 12.47 #> 1157 25025091900  2016-01-01      Guns 2016  9.48 #> 1158 25025091900  2017-01-01      Guns 2017  9.73 #> 1159 25025091900  2018-01-01      Guns 2018  6.73 #> 1160 25025091900  2019-01-01      Guns 2019  8.11 #> 1161 25025092000  2010-01-01      Guns 2010  1.32 #> 1162 25025092000  2011-01-01      Guns 2011  7.85 #> 1163 25025092000  2012-01-01      Guns 2012  9.27 #> 1164 25025092000  2013-01-01      Guns 2013 14.19 #> 1165 25025092000  2014-01-01      Guns 2014  9.26 #> 1166 25025092000  2015-01-01      Guns 2015  8.48 #> 1167 25025092000  2016-01-01      <NA>   NA    NA #> 1168 25025092000  2017-01-01      Guns 2017  9.40 #> 1169 25025092000  2018-01-01      Guns 2018  6.08 #> 1170 25025092000  2019-01-01      Guns 2019  6.92 #> 1171 25025092101  2010-01-01      Guns 2010  1.33 #> 1172 25025092101  2011-01-01      Guns 2011  5.76 #> 1173 25025092101  2012-01-01      Guns 2012  3.42 #> 1174 25025092101  2013-01-01      Guns 2013  5.35 #> 1175 25025092101  2014-01-01      Guns 2014  7.70 #> 1176 25025092101  2015-01-01      <NA>   NA    NA #> 1177 25025092101  2016-01-01      Guns 2016  4.90 #> 1178 25025092101  2017-01-01      Guns 2017  5.74 #> 1179 25025092101  2018-01-01      Guns 2018  4.06 #> 1180 25025092101  2019-01-01      Guns 2019  3.76 #> 1181 25025092200  2010-01-01      Guns 2010  1.38 #> 1182 25025092200  2011-01-01      Guns 2011 13.37 #> 1183 25025092200  2012-01-01      Guns 2012 10.47 #> 1184 25025092200  2013-01-01      Guns 2013 10.42 #> 1185 25025092200  2014-01-01      Guns 2014 14.61 #> 1186 25025092200  2015-01-01      Guns 2015 12.86 #> 1187 25025092200  2016-01-01      Guns 2016 19.30 #> 1188 25025092200  2017-01-01      Guns 2017 15.01 #> 1189 25025092200  2018-01-01      Guns 2018 17.46 #> 1190 25025092200  2019-01-01      Guns 2019 15.13 #> 1191 25025092300  2010-01-01      Guns 2010  0.32 #> 1192 25025092300  2011-01-01      Guns 2011 10.53 #> 1193 25025092300  2012-01-01      Guns 2012  9.48 #> 1194 25025092300  2013-01-01      Guns 2013  7.24 #> 1195 25025092300  2014-01-01      Guns 2014  5.91 #> 1196 25025092300  2015-01-01      Guns 2015 12.79 #> 1197 25025092300  2016-01-01      Guns 2016 10.80 #> 1198 25025092300  2017-01-01      Guns 2017 13.07 #> 1199 25025092300  2018-01-01      Guns 2018  7.10 #> 1200 25025092300  2019-01-01      Guns 2019  8.25 #> 1201 25025092400  2010-01-01      Guns 2010  1.19 #> 1202 25025092400  2011-01-01      Guns 2011  9.42 #> 1203 25025092400  2012-01-01      Guns 2012  8.22 #> 1204 25025092400  2013-01-01      Guns 2013 10.47 #> 1205 25025092400  2014-01-01      Guns 2014 13.41 #> 1206 25025092400  2015-01-01      Guns 2015 10.19 #> 1207 25025092400  2016-01-01      Guns 2016 11.20 #> 1208 25025092400  2017-01-01      Guns 2017 10.70 #> 1209 25025092400  2018-01-01      Guns 2018  6.68 #> 1210 25025092400  2019-01-01      Guns 2019  9.31 #> 1211 25025100100  2010-01-01      Guns 2010  0.16 #> 1212 25025100100  2011-01-01      Guns 2011  8.90 #> 1213 25025100100  2012-01-01      Guns 2012  8.79 #> 1214 25025100100  2013-01-01      Guns 2013 10.90 #> 1215 25025100100  2014-01-01      Guns 2014 11.03 #> 1216 25025100100  2015-01-01      Guns 2015 11.12 #> 1217 25025100100  2016-01-01      Guns 2016  9.64 #> 1218 25025100100  2017-01-01      Guns 2017  8.90 #> 1219 25025100100  2018-01-01      Guns 2018  7.42 #> 1220 25025100100  2019-01-01      Guns 2019  8.12 #> 1221 25025100200  2010-01-01      Guns 2010  1.49 #> 1222 25025100200  2011-01-01      Guns 2011 10.07 #> 1223 25025100200  2012-01-01      Guns 2012 13.21 #> 1224 25025100200  2013-01-01      Guns 2013 14.98 #> 1225 25025100200  2014-01-01      Guns 2014 11.99 #> 1226 25025100200  2015-01-01      <NA>   NA    NA #> 1227 25025100200  2016-01-01      Guns 2016  6.62 #> 1228 25025100200  2017-01-01      Guns 2017  9.14 #> 1229 25025100200  2018-01-01      Guns 2018  8.51 #> 1230 25025100200  2019-01-01      Guns 2019  9.59 #> 1231 25025100300  2010-01-01      Guns 2010  0.55 #> 1232 25025100300  2011-01-01      Guns 2011  4.69 #> 1233 25025100300  2012-01-01      Guns 2012  7.91 #> 1234 25025100300  2013-01-01      Guns 2013  9.34 #> 1235 25025100300  2014-01-01      Guns 2014  9.11 #> 1236 25025100300  2015-01-01      Guns 2015  8.86 #> 1237 25025100300  2016-01-01      Guns 2016  3.20 #> 1238 25025100300  2017-01-01      Guns 2017 10.83 #> 1239 25025100300  2018-01-01      Guns 2018  7.14 #> 1240 25025100300  2019-01-01      Guns 2019  3.65 #> 1241 25025100400  2010-01-01      Guns 2010  0.65 #> 1242 25025100400  2011-01-01      Guns 2011  4.95 #> 1243 25025100400  2012-01-01      Guns 2012  8.12 #> 1244 25025100400  2013-01-01      Guns 2013  6.91 #> 1245 25025100400  2014-01-01      Guns 2014  6.25 #> 1246 25025100400  2015-01-01      Guns 2015  5.65 #> 1247 25025100400  2016-01-01      Guns 2016 10.76 #> 1248 25025100400  2017-01-01      Guns 2017  6.00 #> 1249 25025100400  2018-01-01      Guns 2018  3.71 #> 1250 25025100400  2019-01-01      Guns 2019  3.51 #> 1251 25025100500  2010-01-01      Guns 2010  1.23 #> 1252 25025100500  2011-01-01      Guns 2011  6.43 #> 1253 25025100500  2012-01-01      Guns 2012  7.90 #> 1254 25025100500  2013-01-01      Guns 2013 10.24 #> 1255 25025100500  2014-01-01      Guns 2014  8.30 #> 1256 25025100500  2015-01-01      Guns 2015  9.54 #> 1257 25025100500  2016-01-01      Guns 2016 10.63 #> 1258 25025100500  2017-01-01      Guns 2017  6.00 #> 1259 25025100500  2018-01-01      Guns 2018  5.18 #> 1260 25025100500  2019-01-01      <NA>   NA    NA #> 1261 25025100601  2010-01-01      Guns 2010  0.20 #> 1262 25025100601  2011-01-01      Guns 2011  3.09 #> 1263 25025100601  2012-01-01      Guns 2012  4.44 #> 1264 25025100601  2013-01-01      Guns 2013  5.01 #> 1265 25025100601  2014-01-01      Guns 2014  2.67 #> 1266 25025100601  2015-01-01      Guns 2015  2.20 #> 1267 25025100601  2016-01-01      Guns 2016  2.37 #> 1268 25025100601  2017-01-01      Guns 2017  1.36 #> 1269 25025100601  2018-01-01      Guns 2018  0.85 #> 1270 25025100601  2019-01-01      Guns 2019  0.67 #> 1271 25025100603  2010-01-01      Guns 2010  0.00 #> 1272 25025100603  2011-01-01      Guns 2011  4.19 #> 1273 25025100603  2012-01-01      Guns 2012  1.96 #> 1274 25025100603  2013-01-01      Guns 2013  0.98 #> 1275 25025100603  2014-01-01      Guns 2014  1.93 #> 1276 25025100603  2015-01-01      Guns 2015  4.30 #> 1277 25025100603  2016-01-01      Guns 2016  0.48 #> 1278 25025100603  2017-01-01      Guns 2017  4.30 #> 1279 25025100603  2018-01-01      Guns 2018  1.91 #> 1280 25025100603  2019-01-01      Guns 2019  3.04 #> 1281 25025100700  2010-01-01      <NA>   NA    NA #> 1282 25025100700  2011-01-01      Guns 2011  2.05 #> 1283 25025100700  2012-01-01      Guns 2012  0.67 #> 1284 25025100700  2013-01-01      Guns 2013  1.14 #> 1285 25025100700  2014-01-01      Guns 2014  1.34 #> 1286 25025100700  2015-01-01      Guns 2015  0.45 #> 1287 25025100700  2016-01-01      Guns 2016  0.91 #> 1288 25025100700  2017-01-01      Guns 2017  1.81 #> 1289 25025100700  2018-01-01      Guns 2018  1.13 #> 1290 25025100700  2019-01-01      Guns 2019  0.46 #> 1291 25025100800  2010-01-01      Guns 2010  0.76 #> 1292 25025100800  2011-01-01      Guns 2011  2.51 #> 1293 25025100800  2012-01-01      Guns 2012  4.86 #> 1294 25025100800  2013-01-01      Guns 2013  4.17 #> 1295 25025100800  2014-01-01      Guns 2014  4.52 #> 1296 25025100800  2015-01-01      Guns 2015  1.97 #> 1297 25025100800  2016-01-01      Guns 2016  2.73 #> 1298 25025100800  2017-01-01      Guns 2017  2.89 #> 1299 25025100800  2018-01-01      Guns 2018  1.82 #> 1300 25025100800  2019-01-01      Guns 2019  2.89 #> 1301 25025100900  2010-01-01      Guns 2010  0.00 #> 1302 25025100900  2011-01-01      Guns 2011  4.63 #> 1303 25025100900  2012-01-01      Guns 2012  1.68 #> 1304 25025100900  2013-01-01      Guns 2013  3.77 #> 1305 25025100900  2014-01-01      Guns 2014  5.64 #> 1306 25025100900  2015-01-01      Guns 2015  6.20 #> 1307 25025100900  2016-01-01      Guns 2016  7.15 #> 1308 25025100900  2017-01-01      Guns 2017  7.39 #> 1309 25025100900  2018-01-01      Guns 2018  5.72 #> 1310 25025100900  2019-01-01      Guns 2019  3.07 #> 1311 25025101001  2010-01-01      Guns 2010  0.84 #> 1312 25025101001  2011-01-01      Guns 2011  5.43 #> 1313 25025101001  2012-01-01      Guns 2012  7.15 #> 1314 25025101001  2013-01-01      Guns 2013  8.08 #> 1315 25025101001  2014-01-01      Guns 2014  7.00 #> 1316 25025101001  2015-01-01      Guns 2015  6.15 #> 1317 25025101001  2016-01-01      Guns 2016  8.98 #> 1318 25025101001  2017-01-01      Guns 2017  8.83 #> 1319 25025101001  2018-01-01      Guns 2018  7.25 #> 1320 25025101001  2019-01-01      Guns 2019  4.85 #> 1321 25025101002  2010-01-01      Guns 2010  1.05 #> 1322 25025101002  2011-01-01      <NA>   NA    NA #> 1323 25025101002  2012-01-01      Guns 2012  6.46 #> 1324 25025101002  2013-01-01      Guns 2013  6.70 #> 1325 25025101002  2014-01-01      Guns 2014  7.73 #> 1326 25025101002  2015-01-01      Guns 2015  8.48 #> 1327 25025101002  2016-01-01      Guns 2016  5.88 #> 1328 25025101002  2017-01-01      Guns 2017  5.88 #> 1329 25025101002  2018-01-01      Guns 2018  6.92 #> 1330 25025101002  2019-01-01      Guns 2019  4.53 #> 1331 25025101101  2010-01-01      Guns 2010  0.59 #> 1332 25025101101  2011-01-01      Guns 2011  6.31 #> 1333 25025101101  2012-01-01      Guns 2012  3.49 #> 1334 25025101101  2013-01-01      Guns 2013  4.46 #> 1335 25025101101  2014-01-01      Guns 2014  4.84 #> 1336 25025101101  2015-01-01      Guns 2015  4.49 #> 1337 25025101101  2016-01-01      Guns 2016  3.96 #> 1338 25025101101  2017-01-01      Guns 2017  4.75 #> 1339 25025101101  2018-01-01      Guns 2018  2.64 #> 1340 25025101101  2019-01-01      Guns 2019  7.27 #> 1341 25025101102  2010-01-01      Guns 2010  1.66 #> 1342 25025101102  2011-01-01      Guns 2011  8.40 #> 1343 25025101102  2012-01-01      Guns 2012  7.78 #> 1344 25025101102  2013-01-01      Guns 2013 13.99 #> 1345 25025101102  2014-01-01      Guns 2014  9.02 #> 1346 25025101102  2015-01-01      Guns 2015 10.06 #> 1347 25025101102  2016-01-01      Guns 2016  8.29 #> 1348 25025101102  2017-01-01      Guns 2017  7.89 #> 1349 25025101102  2018-01-01      Guns 2018  7.70 #> 1350 25025101102  2019-01-01      Guns 2019  8.57 #> 1351 25025110103  2010-01-01      Guns 2010  0.68 #> 1352 25025110103  2011-01-01      Guns 2011  3.59 #> 1353 25025110103  2012-01-01      Guns 2012  3.69 #> 1354 25025110103  2013-01-01      Guns 2013  3.20 #> 1355 25025110103  2014-01-01      Guns 2014  2.14 #> 1356 25025110103  2015-01-01      Guns 2015  4.76 #> 1357 25025110103  2016-01-01      Guns 2016  2.54 #> 1358 25025110103  2017-01-01      Guns 2017  2.54 #> 1359 25025110103  2018-01-01      Guns 2018  1.59 #> 1360 25025110103  2019-01-01      Guns 2019  2.10 #> 1361 25025110201  2010-01-01      Guns 2010  0.00 #> 1362 25025110201  2011-01-01      Guns 2011  0.90 #> 1363 25025110201  2012-01-01      Guns 2012  2.23 #> 1364 25025110201  2013-01-01      Guns 2013  5.46 #> 1365 25025110201  2014-01-01      Guns 2014  3.23 #> 1366 25025110201  2015-01-01      Guns 2015  5.18 #> 1367 25025110201  2016-01-01      Guns 2016  2.39 #> 1368 25025110201  2017-01-01      Guns 2017  3.58 #> 1369 25025110201  2018-01-01      Guns 2018  3.18 #> 1370 25025110201  2019-01-01      Guns 2019  3.56 #> 1371 25025110301  2010-01-01      Guns 2010  0.39 #> 1372 25025110301  2011-01-01      Guns 2011  2.42 #> 1373 25025110301  2012-01-01      Guns 2012  2.76 #> 1374 25025110301  2013-01-01      Guns 2013  2.25 #> 1375 25025110301  2014-01-01      Guns 2014  1.84 #> 1376 25025110301  2015-01-01      Guns 2015  2.60 #> 1377 25025110301  2016-01-01      Guns 2016  2.23 #> 1378 25025110301  2017-01-01      Guns 2017  4.46 #> 1379 25025110301  2018-01-01      Guns 2018  2.60 #> 1380 25025110301  2019-01-01      Guns 2019  2.94 #> 1381 25025110401  2010-01-01      Guns 2010  0.54 #> 1382 25025110401  2011-01-01      Guns 2011  2.48 #> 1383 25025110401  2012-01-01      Guns 2012  2.49 #> 1384 25025110401  2013-01-01      Guns 2013  2.09 #> 1385 25025110401  2014-01-01      Guns 2014  2.07 #> 1386 25025110401  2015-01-01      Guns 2015  3.45 #> 1387 25025110401  2016-01-01      Guns 2016  1.59 #> 1388 25025110401  2017-01-01      Guns 2017  2.39 #> 1389 25025110401  2018-01-01      Guns 2018  3.18 #> 1390 25025110401  2019-01-01      Guns 2019  3.10 #> 1391 25025110403  2010-01-01      Guns 2010  0.00 #> 1392 25025110403  2011-01-01      Guns 2011  1.00 #> 1393 25025110403  2012-01-01      Guns 2012  1.01 #> 1394 25025110403  2013-01-01      Guns 2013  1.91 #> 1395 25025110403  2014-01-01      Guns 2014  1.53 #> 1396 25025110403  2015-01-01      Guns 2015  0.67 #> 1397 25025110403  2016-01-01      Guns 2016  1.33 #> 1398 25025110403  2017-01-01      Guns 2017  2.89 #> 1399 25025110403  2018-01-01      Guns 2018  0.44 #> 1400 25025110403  2019-01-01      Guns 2019  1.77 #> 1401 25025110501  2010-01-01      Guns 2010  0.00 #> 1402 25025110501  2011-01-01      Guns 2011  0.83 #> 1403 25025110501  2012-01-01      Guns 2012  0.83 #> 1404 25025110501  2013-01-01      Guns 2013  1.11 #> 1405 25025110501  2014-01-01      Guns 2014  0.28 #> 1406 25025110501  2015-01-01      Guns 2015  0.00 #> 1407 25025110501  2016-01-01      Guns 2016  1.13 #> 1408 25025110501  2017-01-01      Guns 2017  1.41 #> 1409 25025110501  2018-01-01      Guns 2018  1.13 #> 1410 25025110501  2019-01-01      Guns 2019  0.80 #> 1411 25025110502  2010-01-01      Guns 2010  0.00 #> 1412 25025110502  2011-01-01      Guns 2011  2.64 #> 1413 25025110502  2012-01-01      Guns 2012  3.08 #> 1414 25025110502  2013-01-01      Guns 2013  2.25 #> 1415 25025110502  2014-01-01      Guns 2014  1.93 #> 1416 25025110502  2015-01-01      Guns 2015  1.72 #> 1417 25025110502  2016-01-01      <NA>   NA    NA #> 1418 25025110502  2017-01-01      Guns 2017  3.01 #> 1419 25025110502  2018-01-01      <NA>   NA    NA #> 1420 25025110502  2019-01-01      Guns 2019  1.63 #> 1421 25025110601  2010-01-01      Guns 2010  0.00 #> 1422 25025110601  2011-01-01      Guns 2011  0.75 #> 1423 25025110601  2012-01-01      Guns 2012  0.00 #> 1424 25025110601  2013-01-01      Guns 2013  2.04 #> 1425 25025110601  2014-01-01      Guns 2014  1.06 #> 1426 25025110601  2015-01-01      Guns 2015  0.00 #> 1427 25025110601  2016-01-01      <NA>   NA    NA #> 1428 25025110601  2017-01-01      Guns 2017  0.00 #> 1429 25025110601  2018-01-01      Guns 2018  0.33 #> 1430 25025110601  2019-01-01      <NA>   NA    NA #> 1431 25025110607  2010-01-01      Guns 2010  0.00 #> 1432 25025110607  2011-01-01      Guns 2011  1.32 #> 1433 25025110607  2012-01-01      Guns 2012  1.89 #> 1434 25025110607  2013-01-01      Guns 2013  1.37 #> 1435 25025110607  2014-01-01      Guns 2014  2.08 #> 1436 25025110607  2015-01-01      Guns 2015  0.37 #> 1437 25025110607  2016-01-01      Guns 2016  1.31 #> 1438 25025110607  2017-01-01      Guns 2017  0.75 #> 1439 25025110607  2018-01-01      Guns 2018  0.93 #> 1440 25025110607  2019-01-01      Guns 2019  0.55 #> 1441 25025120103  2010-01-01      Guns 2010  0.00 #> 1442 25025120103  2011-01-01      Guns 2011  0.63 #> 1443 25025120103  2012-01-01      Guns 2012  0.00 #> 1444 25025120103  2013-01-01      Guns 2013  0.62 #> 1445 25025120103  2014-01-01      Guns 2014  1.81 #> 1446 25025120103  2015-01-01      Guns 2015  5.29 #> 1447 25025120103  2016-01-01      Guns 2016  0.59 #> 1448 25025120103  2017-01-01      Guns 2017  0.00 #> 1449 25025120103  2018-01-01      Guns 2018  5.29 #> 1450 25025120103  2019-01-01      Guns 2019  1.80 #> 1451 25025120104  2010-01-01      Guns 2010  0.00 #> 1452 25025120104  2011-01-01      Guns 2011  4.65 #> 1453 25025120104  2012-01-01      Guns 2012  3.22 #> 1454 25025120104  2013-01-01      Guns 2013  4.40 #> 1455 25025120104  2014-01-01      Guns 2014  3.92 #> 1456 25025120104  2015-01-01      Guns 2015  1.74 #> 1457 25025120104  2016-01-01      Guns 2016  1.74 #> 1458 25025120104  2017-01-01      Guns 2017  1.30 #> 1459 25025120104  2018-01-01      Guns 2018  2.61 #> 1460 25025120104  2019-01-01      Guns 2019  0.45 #> 1461 25025120105  2010-01-01      Guns 2010  0.87 #> 1462 25025120105  2011-01-01      Guns 2011  0.85 #> 1463 25025120105  2012-01-01      Guns 2012  0.41 #> 1464 25025120105  2013-01-01      Guns 2013  0.38 #> 1465 25025120105  2014-01-01      Guns 2014  1.10 #> 1466 25025120105  2015-01-01      Guns 2015  1.81 #> 1467 25025120105  2016-01-01      Guns 2016  0.73 #> 1468 25025120105  2017-01-01      Guns 2017  2.18 #> 1469 25025120105  2018-01-01      Guns 2018  0.73 #> 1470 25025120105  2019-01-01      Guns 2019  1.83 #> 1471 25025120201  2010-01-01      Guns 2010  0.52 #> 1472 25025120201  2011-01-01      Guns 2011  2.10 #> 1473 25025120201  2012-01-01      Guns 2012  3.19 #> 1474 25025120201  2013-01-01      Guns 2013  4.35 #> 1475 25025120201  2014-01-01      Guns 2014  2.20 #> 1476 25025120201  2015-01-01      Guns 2015  3.97 #> 1477 25025120201  2016-01-01      Guns 2016  2.38 #> 1478 25025120201  2017-01-01      Guns 2017  0.79 #> 1479 25025120201  2018-01-01      Guns 2018  1.59 #> 1480 25025120201  2019-01-01      Guns 2019  2.30 #> 1481 25025120301  2010-01-01      Guns 2010  0.80 #> 1482 25025120301  2011-01-01      Guns 2011  6.53 #> 1483 25025120301  2012-01-01      Guns 2012  2.95 #> 1484 25025120301  2013-01-01      Guns 2013  4.61 #> 1485 25025120301  2014-01-01      Guns 2014  7.69 #> 1486 25025120301  2015-01-01      Guns 2015  4.94 #> 1487 25025120301  2016-01-01      Guns 2016  4.75 #> 1488 25025120301  2017-01-01      <NA>   NA    NA #> 1489 25025120301  2018-01-01      <NA>   NA    NA #> 1490 25025120301  2019-01-01      Guns 2019  2.33 #> 1491 25025120400  2010-01-01      Guns 2010  1.51 #> 1492 25025120400  2011-01-01      Guns 2011  0.93 #> 1493 25025120400  2012-01-01      Guns 2012  1.25 #> 1494 25025120400  2013-01-01      Guns 2013  2.12 #> 1495 25025120400  2014-01-01      <NA>   NA    NA #> 1496 25025120400  2015-01-01      Guns 2015  1.42 #> 1497 25025120400  2016-01-01      Guns 2016  2.06 #> 1498 25025120400  2017-01-01      Guns 2017  3.00 #> 1499 25025120400  2018-01-01      Guns 2018  2.06 #> 1500 25025120400  2019-01-01      Guns 2019  0.46 #> 1501 25025120500  2010-01-01      Guns 2010  0.00 #> 1502 25025120500  2011-01-01      Guns 2011  2.50 #> 1503 25025120500  2012-01-01      Guns 2012  2.11 #> 1504 25025120500  2013-01-01      Guns 2013  4.03 #> 1505 25025120500  2014-01-01      Guns 2014  4.88 #> 1506 25025120500  2015-01-01      Guns 2015  2.98 #> 1507 25025120500  2016-01-01      Guns 2016  5.21 #> 1508 25025120500  2017-01-01      Guns 2017  2.23 #> 1509 25025120500  2018-01-01      Guns 2018  4.10 #> 1510 25025120500  2019-01-01      Guns 2019  4.61 #> 1511 25025120600  2010-01-01      Guns 2010  0.00 #> 1512 25025120600  2011-01-01      Guns 2011  3.05 #> 1513 25025120600  2012-01-01      Guns 2012  0.00 #> 1514 25025120600  2013-01-01      Guns 2013  3.10 #> 1515 25025120600  2014-01-01      Guns 2014  2.91 #> 1516 25025120600  2015-01-01      Guns 2015  2.16 #> 1517 25025120600  2016-01-01      Guns 2016  1.73 #> 1518 25025120600  2017-01-01      Guns 2017  0.43 #> 1519 25025120600  2018-01-01      <NA>   NA    NA #> 1520 25025120600  2019-01-01      Guns 2019  2.04 #> 1521 25025120700  2010-01-01      Guns 2010  0.47 #> 1522 25025120700  2011-01-01      Guns 2011  1.56 #> 1523 25025120700  2012-01-01      Guns 2012  3.43 #> 1524 25025120700  2013-01-01      Guns 2013  2.32 #> 1525 25025120700  2014-01-01      Guns 2014  2.27 #> 1526 25025120700  2015-01-01      Guns 2015  3.49 #> 1527 25025120700  2016-01-01      Guns 2016  1.31 #> 1528 25025120700  2017-01-01      Guns 2017  2.18 #> 1529 25025120700  2018-01-01      Guns 2018  2.62 #> 1530 25025120700  2019-01-01      Guns 2019  1.29 #> 1531 25025130100  2010-01-01      Guns 2010  0.17 #> 1532 25025130100  2011-01-01      Guns 2011  0.50 #> 1533 25025130100  2012-01-01      Guns 2012  1.32 #> 1534 25025130100  2013-01-01      Guns 2013  0.46 #> 1535 25025130100  2014-01-01      Guns 2014  0.00 #> 1536 25025130100  2015-01-01      Guns 2015  0.90 #> 1537 25025130100  2016-01-01      <NA>   NA    NA #> 1538 25025130100  2017-01-01      Guns 2017  0.30 #> 1539 25025130100  2018-01-01      <NA>   NA    NA #> 1540 25025130100  2019-01-01      Guns 2019  0.30 #> 1541 25025130200  2010-01-01      Guns 2010  0.00 #> 1542 25025130200  2011-01-01      Guns 2011  0.60 #> 1543 25025130200  2012-01-01      Guns 2012  0.40 #> 1544 25025130200  2013-01-01      Guns 2013  0.60 #> 1545 25025130200  2014-01-01      Guns 2014  0.80 #> 1546 25025130200  2015-01-01      Guns 2015  0.57 #> 1547 25025130200  2016-01-01      Guns 2016  0.38 #> 1548 25025130200  2017-01-01      Guns 2017  0.38 #> 1549 25025130200  2018-01-01      Guns 2018  1.14 #> 1550 25025130200  2019-01-01      Guns 2019  0.57 #> 1551 25025130300  2010-01-01      Guns 2010  0.23 #> 1552 25025130300  2011-01-01      Guns 2011  0.43 #> 1553 25025130300  2012-01-01      Guns 2012  0.00 #> 1554 25025130300  2013-01-01      Guns 2013  0.43 #> 1555 25025130300  2014-01-01      Guns 2014  0.44 #> 1556 25025130300  2015-01-01      Guns 2015  1.07 #> 1557 25025130300  2016-01-01      Guns 2016  0.00 #> 1558 25025130300  2017-01-01      Guns 2017  0.64 #> 1559 25025130300  2018-01-01      Guns 2018  0.43 #> 1560 25025130300  2019-01-01      Guns 2019  0.44 #> 1561 25025130402  2010-01-01      <NA>   NA    NA #> 1562 25025130402  2011-01-01      Guns 2011  0.00 #> 1563 25025130402  2012-01-01      Guns 2012  0.39 #> 1564 25025130402  2013-01-01      Guns 2013  0.61 #> 1565 25025130402  2014-01-01      Guns 2014  1.39 #> 1566 25025130402  2015-01-01      Guns 2015  1.38 #> 1567 25025130402  2016-01-01      Guns 2016  1.18 #> 1568 25025130402  2017-01-01      Guns 2017  0.79 #> 1569 25025130402  2018-01-01      Guns 2018  0.98 #> 1570 25025130402  2019-01-01      Guns 2019  0.61 #> 1571 25025130404  2010-01-01      Guns 2010  0.34 #> 1572 25025130404  2011-01-01      Guns 2011  0.98 #> 1573 25025130404  2012-01-01      Guns 2012  0.30 #> 1574 25025130404  2013-01-01      Guns 2013  3.60 #> 1575 25025130404  2014-01-01      Guns 2014  1.87 #> 1576 25025130404  2015-01-01      Guns 2015  1.53 #> 1577 25025130404  2016-01-01      Guns 2016  1.53 #> 1578 25025130404  2017-01-01      Guns 2017  1.53 #> 1579 25025130404  2018-01-01      Guns 2018  0.00 #> 1580 25025130404  2019-01-01      Guns 2019  0.87 #> 1581 25025130406  2010-01-01      Guns 2010  0.00 #> 1582 25025130406  2011-01-01      Guns 2011  2.61 #> 1583 25025130406  2012-01-01      Guns 2012  1.13 #> 1584 25025130406  2013-01-01      Guns 2013  1.85 #> 1585 25025130406  2014-01-01      Guns 2014  1.77 #> 1586 25025130406  2015-01-01      <NA>   NA    NA #> 1587 25025130406  2016-01-01      Guns 2016  1.66 #> 1588 25025130406  2017-01-01      Guns 2017  1.16 #> 1589 25025130406  2018-01-01      Guns 2018  0.50 #> 1590 25025130406  2019-01-01      Guns 2019  0.79 #> 1591 25025140102  2010-01-01      Guns 2010  0.45 #> 1592 25025140102  2011-01-01      Guns 2011  1.34 #> 1593 25025140102  2012-01-01      Guns 2012  0.63 #> 1594 25025140102  2013-01-01      Guns 2013  1.49 #> 1595 25025140102  2014-01-01      Guns 2014  0.99 #> 1596 25025140102  2015-01-01      Guns 2015  2.09 #> 1597 25025140102  2016-01-01      Guns 2016  2.28 #> 1598 25025140102  2017-01-01      Guns 2017  2.28 #> 1599 25025140102  2018-01-01      Guns 2018  3.23 #> 1600 25025140102  2019-01-01      Guns 2019  1.98 #> 1601 25025140105  2010-01-01      Guns 2010  0.00 #> 1602 25025140105  2011-01-01      Guns 2011  2.36 #> 1603 25025140105  2012-01-01      Guns 2012  1.22 #> 1604 25025140105  2013-01-01      Guns 2013  0.50 #> 1605 25025140105  2014-01-01      Guns 2014  1.78 #> 1606 25025140105  2015-01-01      Guns 2015  2.89 #> 1607 25025140105  2016-01-01      Guns 2016  1.45 #> 1608 25025140105  2017-01-01      Guns 2017  0.96 #> 1609 25025140105  2018-01-01      Guns 2018  1.21 #> 1610 25025140105  2019-01-01      Guns 2019  2.46 #> 1611 25025140106  2010-01-01      Guns 2010  0.00 #> 1612 25025140106  2011-01-01      Guns 2011  0.00 #> 1613 25025140106  2012-01-01      <NA>   NA    NA #> 1614 25025140106  2013-01-01      Guns 2013  1.60 #> 1615 25025140106  2014-01-01      Guns 2014  1.05 #> 1616 25025140106  2015-01-01      Guns 2015  3.21 #> 1617 25025140106  2016-01-01      Guns 2016  2.75 #> 1618 25025140106  2017-01-01      Guns 2017  2.29 #> 1619 25025140106  2018-01-01      Guns 2018  0.92 #> 1620 25025140106  2019-01-01      Guns 2019  1.37 #> 1621 25025140107  2010-01-01      Guns 2010  0.00 #> 1622 25025140107  2011-01-01      Guns 2011  3.08 #> 1623 25025140107  2012-01-01      Guns 2012  1.04 #> 1624 25025140107  2013-01-01      Guns 2013  1.72 #> 1625 25025140107  2014-01-01      Guns 2014  1.97 #> 1626 25025140107  2015-01-01      Guns 2015  0.74 #> 1627 25025140107  2016-01-01      Guns 2016  1.12 #> 1628 25025140107  2017-01-01      Guns 2017  3.72 #> 1629 25025140107  2018-01-01      Guns 2018  1.49 #> 1630 25025140107  2019-01-01      Guns 2019  4.36 #> 1631 25025140201  2010-01-01      Guns 2010  0.00 #> 1632 25025140201  2011-01-01      Guns 2011  1.67 #> 1633 25025140201  2012-01-01      Guns 2012  0.83 #> 1634 25025140201  2013-01-01      Guns 2013  0.00 #> 1635 25025140201  2014-01-01      <NA>   NA    NA #> 1636 25025140201  2015-01-01      Guns 2015  2.56 #> 1637 25025140201  2016-01-01      Guns 2016  1.28 #> 1638 25025140201  2017-01-01      Guns 2017  2.13 #> 1639 25025140201  2018-01-01      Guns 2018  2.13 #> 1640 25025140201  2019-01-01      <NA>   NA    NA #> 1641 25025140202  2010-01-01      Guns 2010  0.33 #> 1642 25025140202  2011-01-01      Guns 2011  1.15 #> 1643 25025140202  2012-01-01      Guns 2012  2.13 #> 1644 25025140202  2013-01-01      Guns 2013  4.53 #> 1645 25025140202  2014-01-01      Guns 2014  2.55 #> 1646 25025140202  2015-01-01      Guns 2015  3.37 #> 1647 25025140202  2016-01-01      Guns 2016  3.22 #> 1648 25025140202  2017-01-01      Guns 2017  2.91 #> 1649 25025140202  2018-01-01      Guns 2018  2.76 #> 1650 25025140202  2019-01-01      Guns 2019  2.06 #> 1651 25025140300  2010-01-01      Guns 2010  0.32 #> 1652 25025140300  2011-01-01      Guns 2011  3.18 #> 1653 25025140300  2012-01-01      Guns 2012  4.26 #> 1654 25025140300  2013-01-01      Guns 2013  4.25 #> 1655 25025140300  2014-01-01      Guns 2014  1.58 #> 1656 25025140300  2015-01-01      Guns 2015  3.67 #> 1657 25025140300  2016-01-01      Guns 2016  2.58 #> 1658 25025140300  2017-01-01      <NA>   NA    NA #> 1659 25025140300  2018-01-01      <NA>   NA    NA #> 1660 25025140300  2019-01-01      Guns 2019  5.32 #> 1661 25025140400  2010-01-01      Guns 2010  0.24 #> 1662 25025140400  2011-01-01      Guns 2011  3.20 #> 1663 25025140400  2012-01-01      Guns 2012  2.40 #> 1664 25025140400  2013-01-01      Guns 2013  3.23 #> 1665 25025140400  2014-01-01      Guns 2014  3.12 #> 1666 25025140400  2015-01-01      Guns 2015  4.23 #> 1667 25025140400  2016-01-01      Guns 2016  2.29 #> 1668 25025140400  2017-01-01      Guns 2017  2.29 #> 1669 25025140400  2018-01-01      Guns 2018  2.29 #> 1670 25025140400  2019-01-01      Guns 2019  3.91 #> 1671 25025981100  2010-01-01      Guns 2010  0.00 #> 1672 25025981100  2011-01-01      Guns 2011  0.00 #> 1673 25025981100  2012-01-01      Guns 2012  0.00 #> 1674 25025981100  2013-01-01      Guns 2013  3.36 #> 1675 25025981100  2014-01-01      Guns 2014  0.00 #> 1676 25025981100  2015-01-01      Guns 2015  0.00 #> 1677 25025981100  2016-01-01      Guns 2016  0.00 #> 1678 25025981100  2017-01-01      Guns 2017  0.00 #> 1679 25025981100  2018-01-01      Guns 2018  0.00 #> 1680 25025981100  2019-01-01      Guns 2019  0.00"},{"path":"/reference/cond_permute.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional Permutation — cond_permute","title":"Conditional Permutation — cond_permute","text":"Conditional Permutation","code":""},{"path":"/reference/cond_permute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional Permutation — cond_permute","text":"","code":"cond_permute(lens, n, cards)"},{"path":"/reference/cond_permute_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional permutation of neighbors — cond_permute_nb","title":"Conditional permutation of neighbors — cond_permute_nb","text":"Creates conditional permutation neighbors list holding fixed shuffling neighbors.","code":""},{"path":"/reference/cond_permute_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional permutation of neighbors — cond_permute_nb","text":"","code":"cond_permute_nb(nb, seed = NULL)"},{"path":"/reference/cond_permute_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional permutation of neighbors — cond_permute_nb","text":"nb neighbor list. seed default null. value pass set.seed() reproducibility.","code":""},{"path":"/reference/cond_permute_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional permutation of neighbors — cond_permute_nb","text":"list class nb element contains random sample neighbors excluding observed region.","code":""},{"path":"/reference/cond_permute_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conditional permutation of neighbors — cond_permute_nb","text":"","code":"nb <- st_contiguity(guerry) nb[1:5] #> [[1]] #> [1] 36 37 67 69 #>  #> [[2]] #> [1]  7 49 57 58 73 76 #>  #> [[3]] #> [1] 17 21 40 56 61 69 #>  #> [[4]] #> [1]  5 24 79 80 #>  #> [[5]] #> [1]  4 24 36 #>  # conditionally permute neighbors perm_nb <- cond_permute_nb(nb) perm_nb[1:5] #> [[1]] #> [1] 33 79 76 77 #>  #> [[2]] #> [1] 81 42 79 12 58 80 #>  #> [[3]] #> [1] 29  2 17 52 55 77 #>  #> [[4]] #> [1] 57  6  1 45 #>  #> [[5]] #> [1] 77  3 16 #>"},{"path":"/reference/critical_threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify critical threshold — critical_threshold","title":"Identify critical threshold — critical_threshold","text":"Identifies minimum distance observation least one neighbor.","code":""},{"path":"/reference/critical_threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify critical threshold — critical_threshold","text":"","code":"critical_threshold(geometry, k = 1)"},{"path":"/reference/critical_threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify critical threshold — critical_threshold","text":"geometry sf geometry column k minimum number neighbors check ","code":""},{"path":"/reference/critical_threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify critical threshold — critical_threshold","text":"numeric scalar value.","code":""},{"path":"/reference/critical_threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify critical threshold — critical_threshold","text":"","code":"critical_threshold(sf::st_geometry(guerry)) #> [1] 94141.96"},{"path":"/reference/ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Ellipse — ellipse","title":"Create an Ellipse — ellipse","text":"Generate ellipse center coordinates, major minor axis radii, angle rotation.","code":""},{"path":"/reference/ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Ellipse — ellipse","text":"","code":"ellipse(x = 0, y = 0, sx = 2, sy = 1, rotation = 0, n = 100)  st_ellipse(geometry, sx, sy, rotation = 0, n = 100)"},{"path":"/reference/ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Ellipse — ellipse","text":"x longitude center point y latitude center point sx radius major axis sy radius minor axis rotation degree rotation ellipse n number coordinates generate ellipse geometry sf ST_POINT geometry. Can sfg, sfc, sf object","code":""},{"path":"/reference/ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Ellipse — ellipse","text":"sf object","code":""},{"path":"/reference/ellipse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Ellipse — ellipse","text":"ellipse() returns matrix point locations defining ellipse. st_ellipse() returns sf object LINE geography ellipse. Increasing n increases number points generated define ellipse shape. ellipse() function adapted ggVennDiagram.","code":""},{"path":"/reference/ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Ellipse — ellipse","text":"","code":"ellipse(n = 10) #>               x             y #>  [1,]  2.000000  0.000000e+00 #>  [2,]  1.618034  5.877853e-01 #>  [3,]  0.618034  9.510565e-01 #>  [4,] -0.618034  9.510565e-01 #>  [5,] -1.618034  5.877853e-01 #>  [6,] -2.000000  1.224647e-16 #>  [7,] -1.618034 -5.877853e-01 #>  [8,] -0.618034 -9.510565e-01 #>  [9,]  0.618034 -9.510565e-01 #> [10,]  1.618034 -5.877853e-01 #> [11,]  2.000000  0.000000e+00 st_ellipse(sf::st_point(c(0, 0)), sx = 10, sy = 10) #> Geometry set for 1 feature  #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -10 ymin: -10 xmax: 10 ymax: 10 #> CRS:           NA #> LINESTRING (10 0, 9.980267 0.6279052, 9.921147 ..."},{"path":"/reference/emerging_hotspot_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"Emerging Hot Spot Analysis identifies trends spatial clustering period time. Emerging hot spot analysis combines Getis-Ord Gi* statistic Mann-Kendall trend test determine temporal trend associated local clustering hot cold spots.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"","code":"emerging_hotspot_analysis(   x,   .var,   k = 1,   include_gi = FALSE,   nb_col = NULL,   wt_col = NULL,   nsim = 199,   threshold = 0.01,   ... )"},{"path":"/reference/emerging_hotspot_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"x spacetime object must spacetime cube see details . .var numeric vector spacetime cube missing values. k default 1. number time lags include neighborhood calculating local Gi*. See details . include_gi default FALSE. TRUE, includes local Gi* calculations attribute gi_star. nb_col Optional. Default NULL. name column geometry context x containing spatial neighbors. NULL, Queen's contiguity neighbors identified. wt_col Optional. Default NULL. name column geometry context x containing spatial weights. NULL, row standardized weights used. nsim default 199. number simulations run calculating simulated p-value local Gi*. threshold default 0.01. significance threshold use. ... unused.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"Returns data.frame.","code":""},{"path":[]},{"path":"/reference/emerging_hotspot_analysis.html","id":"how-emerging-hot-spot-analysis-works","dir":"Reference","previous_headings":"","what":"How Emerging Hot Spot Analysis Works","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"Emerging Hot Spot Analysis somewhat simple process. works first calculating Gi* statistic location time period (time-slice). Next, location across time-periods, Mann-Kendall trend test done identify temporal trend Gi* values time periods. Additionally, location classified one seventeen categories based ESRI's emerging hot spot classification criteria. Mann-Kendall trend test done using Kendall::MannKendall(). Kendall installed sfdep installed prior use.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"using-your-own-neighbors-and-weights","dir":"Reference","previous_headings":"","what":"Using your own neighbors and weights","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"like use neighbors weights, must created geometry context spacetime object. arguments nb_col wt_col must populated order use neighbor weights definitions.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"time-lagged-neighbors","dir":"Reference","previous_headings":"","what":"Time lagged neighbors","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"addition identifying neighbors space, emerging hotspot analysis also incorporates observations k periods ago-called time lag. time lag k 1 unit time month, neighbors calculation Gi* include spatial neighbors' values time t spatial neighbors' values time t-1. k = 2, include t, t-1, t-2.","code":""},{"path":"/reference/emerging_hotspot_analysis.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing values","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"Presently, method missing value handling. missing values, emerging hot spot analysis fail. sure fill omit time-slices missing values prior using emerging hot spot analysis.","code":""},{"path":[]},{"path":"/reference/emerging_hotspot_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Emerging Hot Spot Analysis — emerging_hotspot_analysis","text":"","code":"if (requireNamespace(\"Kendall\")) { df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data df <- read.csv(df_fp, colClasses = c(\"character\", \"character\", \"integer\", \"double\", \"Date\")) geo <- sf::st_read(geo_fp)  # Create spacetime object called `bos` bos <- spacetime(df, geo,                  .loc_col = \".region_id\",                  .time_col = \"time_period\")   # conduct EHSA ehsa <- emerging_hotspot_analysis(   x = bos,   .var = \"value\",   k = 1,   nsim = 9 )  ehsa } #> Loading required namespace: Kendall #> Reading layer `bos-ecometric' from data source  #>   `/private/var/folders/zc/tg2xwck53dg9sls8x4ndzdc00000gn/T/Rtmp2RGXTr/temp_libpath2b6f5ea0db20/sfdep/extdata/bos-ecometric.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83 #>        location         tau     p_value      classification #> 1   25025010405  0.11111111 0.720514774 no pattern detected #> 2   25025010404 -0.33333334 0.210497662 no pattern detected #> 3   25025010801 -0.20000000 0.474274337 no pattern detected #> 4   25025010702 -0.60000002 0.020044670 no pattern detected #> 5   25025010204 -0.46666667 0.073638275 no pattern detected #> 6   25025010802 -0.33333334 0.210497662 no pattern detected #> 7   25025010104 -0.33333334 0.210497662 no pattern detected #> 8   25025000703 -0.60000002 0.020044670 no pattern detected #> 9   25025000504 -0.33333334 0.210497662 no pattern detected #> 10  25025000704 -0.42222223 0.107404657 no pattern detected #> 11  25025010103  0.02222222 1.000000000 no pattern detected #> 12  25025000803 -0.37777779 0.152406260 no pattern detected #> 13  25025120201 -0.33333334 0.210497662 no pattern detected #> 14  25025120104  0.46666667 0.073638320 no pattern detected #> 15  25025110607  0.28888890 0.283130884 no pattern detected #> 16  25025000302  0.37777779 0.152406216 no pattern detected #> 17  25025000301  0.37777779 0.152406216 no pattern detected #> 18  25025140400  0.06666667 0.858027697 no pattern detected #> 19  25025140300  0.37777779 0.152406216 no pattern detected #> 20  25025140201  0.46666667 0.073638320 no pattern detected #> 21  25025140202  0.15555556 0.591505051 no pattern detected #> 22  25025140102 -0.24444444 0.371093363 no pattern detected #> 23  25025130402  0.46666667 0.073638320 no pattern detected #> 24  25025130300  0.33333334 0.210497618 no pattern detected #> 25  25025130200  0.33333334 0.210497618 no pattern detected #> 26  25025130100 -0.20000000 0.474274337 no pattern detected #> 27  25025120700  0.37777779 0.152406216 no pattern detected #> 28  25025120600  0.60000002 0.020044684 no pattern detected #> 29  25025120500  0.55555558 0.031823158 no pattern detected #> 30  25025120400  0.55555558 0.031823158 no pattern detected #> 31  25025110601  0.55555558 0.031823158 no pattern detected #> 32  25025110502  0.42222223 0.107404709 no pattern detected #> 33  25025110501 -0.02222222 1.000000000 no pattern detected #> 34  25025110401 -0.20000000 0.474274337 no pattern detected #> 35  25025101102  0.02222222 1.000000000 no pattern detected #> 36  25025101101  0.37777779 0.152406216 no pattern detected #> 37  25025101002  0.24444444 0.371093392 no pattern detected #> 38  25025101001  0.46666667 0.073638320 no pattern detected #> 39  25025100900  0.51111114 0.049098015 no pattern detected #> 40  25025100800  0.46666667 0.073638320 no pattern detected #> 41  25025100601  0.46666667 0.073638320 no pattern detected #> 42  25025100500  0.37777779 0.152406216 no pattern detected #> 43  25025100400 -0.24444444 0.371093363 no pattern detected #> 44  25025100300 -0.28888890 0.283130825 no pattern detected #> 45  25025100200 -0.15555556 0.591504991 no pattern detected #> 46  25025100100 -0.06666667 0.858027637 no pattern detected #> 47  25025092400 -0.15555556 0.591504991 no pattern detected #> 48  25025092300  0.15555556 0.591505051 no pattern detected #> 49  25025092200  0.06666667 0.858027697 no pattern detected #> 50  25025092000  0.06666667 0.858027697 no pattern detected #> 51  25025091900 -0.02222222 1.000000000 no pattern detected #> 52  25025091800 -0.02222222 1.000000000 no pattern detected #> 53  25025091700 -0.33333334 0.210497662 no pattern detected #> 54  25025091600 -0.15555556 0.591504991 no pattern detected #> 55  25025981100 -0.15555556 0.591504991 no pattern detected #> 56  25025140105  0.02222222 1.000000000 no pattern detected #> 57  25025120105  0.02222222 1.000000000 no pattern detected #> 58  25025120301 -0.11111111 0.720514774 no pattern detected #> 59  25025071201  0.02222222 1.000000000 no pattern detected #> 60  25025091001 -0.06666667 0.858027637 no pattern detected #> 61  25025091500 -0.24444444 0.371093363 no pattern detected #> 62  25025091400  0.15555556 0.591505051 no pattern detected #> 63  25025091300  0.46666667 0.073638320 no pattern detected #> 64  25025091200  0.33333334 0.210497618 no pattern detected #> 65  25025091100  0.77777779 0.002357483 no pattern detected #> 66  25025090700  0.64444447 0.012266040 no pattern detected #> 67  25025090600  0.60000002 0.020044684 no pattern detected #> 68  25025090400  0.60000002 0.020044684 no pattern detected #> 69  25025090300  0.73333335 0.004207492 no pattern detected #> 70  25025090200  0.73333335 0.004207492 no pattern detected #> 71  25025040801  0.46666667 0.073638320 no pattern detected #> 72  25025010203  0.60000002 0.020044684 no pattern detected #> 73  25025110403  0.60000002 0.020044684 no pattern detected #> 74  25025110201  0.60000002 0.020044684 no pattern detected #> 75  25025090100  0.51111114 0.049098015 no pattern detected #> 76  25025082100  0.06666667 0.858027697 no pattern detected #> 77  25025082000  0.37777779 0.152406216 no pattern detected #> 78  25025081900  0.24444444 0.371093392 no pattern detected #> 79  25025081800  0.42222223 0.107404709 no pattern detected #> 80  25025081700  0.64444447 0.012266040 no pattern detected #> 81  25025081500  0.68888891 0.007290363 no pattern detected #> 82  25025081400  0.64444447 0.012266040 no pattern detected #> 83  25025081300  0.64444447 0.012266040 no pattern detected #> 84  25025110103  0.51111114 0.049098015 no pattern detected #> 85  25025110301  0.60000002 0.020044684 no pattern detected #> 86  25025140106  0.24444444 0.371093392 no pattern detected #> 87  25025010701  0.42222223 0.107404709 no pattern detected #> 88  25025010408  0.33333334 0.210497618 no pattern detected #> 89  25025000503  0.64444447 0.012266040 no pattern detected #> 90  25025081200  0.82222223 0.001282215 no pattern detected #> 91  25025081100  0.82222223 0.001282215 no pattern detected #> 92  25025080900  0.73333335 0.004207492 no pattern detected #> 93  25025080801  0.82222223 0.001282215 no pattern detected #> 94  25025080601  0.46666667 0.073638320 no pattern detected #> 95  25025080500  0.51111114 0.049098015 no pattern detected #> 96  25025080401  0.20000000 0.474274397 no pattern detected #> 97  25025080300  0.20000000 0.474274397 no pattern detected #> 98  25025071101 -0.20000000 0.474274337 no pattern detected #> 99  25025070900 -0.06666667 0.858027637 no pattern detected #> 100 25025140107  0.46666667 0.073638320 no pattern detected #> 101 25025130404  0.15555556 0.591505051 no pattern detected #> 102 25025130406  0.20000000 0.474274397 no pattern detected #> 103 25025120103  0.11111111 0.720514774 no pattern detected #> 104 25025100700  0.64444447 0.012266040 no pattern detected #> 105 25025100603  0.82222223 0.001282215 no pattern detected #> 106 25025092101  0.11111111 0.720514774 no pattern detected #> 107 25025061101  0.64444447 0.012266040 no pattern detected #> 108 25025070800  0.60000002 0.020044684 no pattern detected #> 109 25025070700  0.55555558 0.031823158 no pattern detected #> 110 25025070600  0.60000002 0.020044684 no pattern detected #> 111 25025070500  0.37777779 0.152406216 no pattern detected #> 112 25025070300  0.55555558 0.031823158 no pattern detected #> 113 25025070200  0.46666667 0.073638320 no pattern detected #> 114 25025070101  0.51111114 0.049098015 no pattern detected #> 115 25025061200  0.37777779 0.152406216 no pattern detected #> 116 25025061000  0.33333334 0.210497618 no pattern detected #> 117 25025060800  0.64444447 0.012266040 no pattern detected #> 118 25025060700  0.37777779 0.152406216 no pattern detected #> 119 25025080100  0.55555558 0.031823158 no pattern detected #> 120 25025060301  0.55555558 0.031823158 no pattern detected #> 121 25025090901  0.37777779 0.152406216 no pattern detected #> 122 25025060101  0.20000000 0.474274397 no pattern detected #> 123 25025060600  0.15555556 0.591505051 no pattern detected #> 124 25025060400  0.20000000 0.474274397 no pattern detected #> 125 25025060200  0.20000000 0.474274397 no pattern detected #> 126 25025050700  0.37777779 0.152406216 no pattern detected #> 127 25025050600 -0.51111114 0.049097981 no pattern detected #> 128 25025050500 -0.42222223 0.107404657 no pattern detected #> 129 25025050400 -0.51111114 0.049097981 no pattern detected #> 130 25025050300 -0.37777779 0.152406260 no pattern detected #> 131 25025050200  0.24444444 0.371093392 no pattern detected #> 132 25025040300  0.02222222 1.000000000 no pattern detected #> 133 25025040200  0.24444444 0.371093392 no pattern detected #> 134 25025030500  0.06666667 0.858027697 no pattern detected #> 135 25025051101  0.20000000 0.474274397 no pattern detected #> 136 25025051000 -0.37777779 0.152406260 no pattern detected #> 137 25025030400  0.11111111 0.720514774 no pattern detected #> 138 25025030300 -0.02222222 1.000000000 no pattern detected #> 139 25025030200  0.06666667 0.858027697 no pattern detected #> 140 25025030100  0.33333334 0.210497618 no pattern detected #> 141 25025020200 -0.02222222 1.000000000 no pattern detected #> 142 25025010600  0.11111111 0.720514774 no pattern detected #> 143 25025010500 -0.33333334 0.210497662 no pattern detected #> 144 25025010300 -0.06666667 0.858027637 no pattern detected #> 145 25025000802  0.20000000 0.474274397 no pattern detected #> 146 25025000701 -0.20000000 0.474274337 no pattern detected #> 147 25025050101 -0.02222222 1.000000000 no pattern detected #> 148 25025050901 -0.51111114 0.049097981 no pattern detected #> 149 25025060501 -0.02222222 1.000000000 no pattern detected #> 150 25025040100 -0.11111111 0.720514774 no pattern detected #> 151 25025040600  0.60000002 0.020044684 no pattern detected #> 152 25025000602  0.73333335 0.004207492 no pattern detected #> 153 25025000601  0.77777779 0.002357483 no pattern detected #> 154 25025000502 -0.24444444 0.371093363 no pattern detected #> 155 25025000402 -0.33333334 0.210497662 no pattern detected #> 156 25025000401 -0.28888890 0.283130825 no pattern detected #> 157 25025000202 -0.20000000 0.474274337 no pattern detected #> 158 25025000201 -0.28888890 0.283130825 no pattern detected #> 159 25025040401 -0.02222222 1.000000000 no pattern detected #> 160 25025020303  0.42222223 0.107404709 no pattern detected #> 161 25025070402  0.46666667 0.073638320 no pattern detected #> 162 25025020302  0.15555556 0.591505051 no pattern detected #> 163 25025020301  0.37777779 0.152406216 no pattern detected #> 164 25025020101  0.42222223 0.107404709 no pattern detected #> 165 25025081001  0.42222223 0.107404709 no pattern detected #> 166 25025010403  0.33333334 0.210497618 no pattern detected #> 167 25025000100  0.33333334 0.210497618 no pattern detected #> 168 25025051200  0.28888890 0.283130884 no pattern detected"},{"path":"/reference/euclidean_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Euclidean Median Center — euclidean_median","title":"Calculate Euclidean Median Center — euclidean_median","text":"Given sfc geometry, calculate Euclidean Median Center.","code":""},{"path":"/reference/euclidean_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Euclidean Median Center — euclidean_median","text":"","code":"euclidean_median(geometry, tolerance = 1e-09)"},{"path":"/reference/euclidean_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Euclidean Median Center — euclidean_median","text":"geometry sfc object. polygon, uses sf::st_point_on_surface(). tolerance tolerance level terminate process. passed pracma::geo_median().","code":""},{"path":"/reference/euclidean_median.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Euclidean Median Center — euclidean_median","text":"Calculation Euclidean median done using pracma package. Rfast available, function error.","code":""},{"path":"/reference/find_xj.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify xj values — find_xj","title":"Identify xj values — find_xj","text":"Find xj values given numeric vector, x, neighbors list, nb.","code":""},{"path":"/reference/find_xj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify xj values — find_xj","text":"","code":"find_xj(x, nb)"},{"path":"/reference/find_xj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify xj values — find_xj","text":"x vector class nb nb object e.g. created st_contiguity() st_knn()","code":""},{"path":"/reference/find_xj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify xj values — find_xj","text":"list length x element numeric vector length corresponding element nb.","code":""},{"path":"/reference/find_xj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify xj values — find_xj","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) xj <- find_xj(guerry$crime_prop, nb) xj[1:3] #> [[1]] #> [1]  8326  8059  4504 10708 #>  #> [[2]] #> [1] 8847 4950 6175 6659 5786 7144 #>  #> [[3]] #> [1] 10503 20235 12665  8236 12141 10708 #>"},{"path":"/reference/folded_p_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Folded Simulated P-value — folded_p_sim","title":"Folded Simulated P-value — folded_p_sim","text":"Given observed statistics replicates, calculated simulated folded p value.","code":""},{"path":"/reference/folded_p_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Folded Simulated P-value — folded_p_sim","text":"","code":"folded_p_sim(obs, reps)"},{"path":"/reference/folded_p_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Folded Simulated P-value — folded_p_sim","text":"obs observed values reps matrix","code":""},{"path":"/reference/global_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Geary's C — global_c","title":"Compute Geary's C — global_c","text":"Compute Geary's C","code":""},{"path":"/reference/global_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Geary's C — global_c","text":"","code":"global_c(x, nb, wt, allow_zero = NULL)"},{"path":"/reference/global_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Geary's C — global_c","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). allow_zero TRUE, assigns zero lagged value zone without neighbors.","code":""},{"path":"/reference/global_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Geary's C — global_c","text":"list two names elements C K returning value Geary's C sample kurtosis respectively.","code":""},{"path":[]},{"path":"/reference/global_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Geary's C — global_c","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers global_c(x, nb, wt) #> $C #> [1] 0.5645907 #>  #> $K #> [1] 2.400641 #>"},{"path":"/reference/global_c_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Global C Permutation Test — global_c_perm","title":"Global C Permutation Test — global_c_perm","text":"Global C Permutation Test","code":""},{"path":"/reference/global_c_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global C Permutation Test — global_c_perm","text":"","code":"global_c_perm(   x,   nb,   wt,   nsim = 499,   alternative = \"greater\",   allow_zero = NULL,   ... )"},{"path":"/reference/global_c_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global C Permutation Test — global_c_perm","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run. alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional arguments passed spdep::geary.mc().","code":""},{"path":"/reference/global_c_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global C Permutation Test — global_c_perm","text":"object classes htest mc.sim","code":""},{"path":[]},{"path":"/reference/global_c_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global C Permutation Test — global_c_perm","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb) x <- guerry$crime_pers global_c_perm(x, nb, wt) #>  #> \tMonte-Carlo simulation of Geary C #>  #> data:  x  #> weights: listw  #> number of simulations + 1: 500  #>  #> statistic = 0.56459, observed rank = 1, p-value = 0.002 #> alternative hypothesis: greater #>"},{"path":"/reference/global_c_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Global C Test — global_c_test","title":"Global C Test — global_c_test","text":"Global C Test","code":""},{"path":"/reference/global_c_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global C Test — global_c_test","text":"","code":"global_c_test(x, nb, wt, randomization = TRUE, allow_zero = NULL, ...)"},{"path":"/reference/global_c_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global C Test — global_c_test","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). randomization default TRUE. Calculate variance based randomization. FALSE, assumption normality. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional arguments passed spdep::moran.mc()","code":""},{"path":"/reference/global_c_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global C Test — global_c_test","text":"htest object","code":""},{"path":[]},{"path":"/reference/global_c_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global C Test — global_c_test","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb) x <- guerry$crime_pers global_c_test(x, nb, wt) #>  #> \tGeary C test under randomisation #>  #> data:  x  #> weights: listw  #>  #> Geary C statistic standard deviate = 6.0556, p-value = 6.994e-10 #> alternative hypothesis: Expectation greater than statistic #> sample estimates: #> Geary C statistic       Expectation          Variance  #>       0.564590693       1.000000000       0.005169871  #>"},{"path":"/reference/global_colocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Colocation Quotient — global_colocation","title":"Global Colocation Quotient — global_colocation","text":"Calculate Global Colocation Quotient (CLQ) categorical variable using simulation based significance testing.","code":""},{"path":"/reference/global_colocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Colocation Quotient — global_colocation","text":"","code":"global_colocation(A, nb, nsim = 99)"},{"path":"/reference/global_colocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Colocation Quotient — global_colocation","text":"character factor vector. nb neighbors list e.g. created st_knn() st_contiguity() nsim default 99. integer representing many simulations run calculating simulated p-values.","code":""},{"path":"/reference/global_colocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Colocation Quotient — global_colocation","text":"list two elements CLQ p_sim containing observed colocation quotient simulated p-value respectively.","code":""},{"path":[]},{"path":"/reference/global_colocation.html","id":"definition","dir":"Reference","previous_headings":"","what":"Definition","title":"Global Colocation Quotient — global_colocation","text":"CLQ defined \\(CLQ_{Global} = \\frac{\\sum_{\\X} C_{\\}}{\\sum_{\\X} N_A ({\\frac{N_A - 1}{N-1})}}\\). numerator identifies observed proportion -category neighbors denominator contains expected proportion -category neighbors assumption spatial association. Thus CLQ just ratio observed expected.","code":""},{"path":"/reference/global_colocation.html","id":"inference","dir":"Reference","previous_headings":"","what":"Inference","title":"Global Colocation Quotient — global_colocation","text":"Inference done using conditional permutation suggested Anselin 1995 number replicates created. observed values compared replicates simulated p-value proportion cases observed extreme compared replicate. simulated p-value returns lower p-value either tail.","code":""},{"path":"/reference/global_colocation.html","id":"interpretation","dir":"Reference","previous_headings":"","what":"Interpretation","title":"Global Colocation Quotient — global_colocation","text":"Given CLQ ratio observed expected, interpret values larger one mean colocation expected null hypothesis spatial association. value smaller 0, interpret mean less colocation expected null.","code":""},{"path":"/reference/global_colocation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Global Colocation Quotient — global_colocation","text":"Leslie, T.F. Kronenfeld, B.J. (2011), Colocation Quotient: New Measure Spatial Association Categorical Subsets Points. Geographical Analysis, 43: 306-326. doi:10.1111/j.1538-4632.2011.00821.x","code":""},{"path":"/reference/global_colocation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Colocation Quotient — global_colocation","text":"","code":"A <- guerry$main_city nb <- st_contiguity(sf::st_geometry(guerry)) global_colocation(A, nb, 49) #> $CLQ #> [1] 1.02841 #>  #> $p_sim #> [1] 0.14 #>"},{"path":"/reference/global_colocation_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Global Colocation Quotient — global_colocation_calc","title":"Calculate the Global Colocation Quotient — global_colocation_calc","text":"Given categorical variable , calculate global colocation quotient (CLQ).","code":""},{"path":"/reference/global_colocation_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Global Colocation Quotient — global_colocation_calc","text":"","code":"global_colocation_calc(A, nb)"},{"path":"/reference/global_colocation_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Colocation Quotient Conditional Permutation Implementation — global_colocation_perm_impl","title":"Global Colocation Quotient Conditional Permutation Implementation — global_colocation_perm_impl","text":"function repeat calculation global colocation quotient (CLQ) specified number times return simulated p-value.","code":""},{"path":"/reference/global_colocation_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Colocation Quotient Conditional Permutation Implementation — global_colocation_perm_impl","text":"","code":"global_colocation_perm_impl(A, nb, nsim = 99)"},{"path":"/reference/global_g_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Getis-Ord Global G — global_g_test","title":"Getis-Ord Global G — global_g_test","text":"Getis-Ord Global G","code":""},{"path":"/reference/global_g_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Getis-Ord Global G — global_g_test","text":"","code":"global_g_test(x, nb, wt, alternative = \"greater\", allow_zero = NULL, ...)"},{"path":"/reference/global_g_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Getis-Ord Global G — global_g_test","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional methods passed spdep::globalG.test().","code":""},{"path":"/reference/global_g_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Getis-Ord Global G — global_g_test","text":"htest object","code":""},{"path":"/reference/global_g_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Getis-Ord Global G — global_g_test","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb, style = \"B\") x <- guerry$crime_pers global_g_test(x, nb, wt) #>  #> \tGetis-Ord global G statistic #>  #> data:  x  #> weights: listw  #>  #> standard deviate = 3.8277, p-value = 6.467e-05 #> alternative hypothesis: greater #> sample estimates: #> Global G statistic        Expectation           Variance  #>       6.464853e-02       5.882353e-02       2.315853e-06  #>"},{"path":"/reference/global_jc_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Join Counts — global_jc_perm","title":"Global Join Counts — global_jc_perm","text":"Calculate global join count measure categorical variable.","code":""},{"path":"/reference/global_jc_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Join Counts — global_jc_perm","text":"","code":"global_jc_perm(   fx,   nb,   wt,   alternative = \"greater\",   nsim = 499,   allow_zero = FALSE,   ... )  global_jc_test(fx, nb, wt, alternative = \"greater\", allow_zero = NULL, ...)  tally_jc(fx, nb, wt, allow_zero = TRUE, ...)"},{"path":"/reference/global_jc_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Join Counts — global_jc_perm","text":"fx factor character vector length nb. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. nsim number simulations run. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional arguments passed methods","code":""},{"path":"/reference/global_jc_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Join Counts — global_jc_perm","text":"object class jclist list element class htest mc.sim.","code":""},{"path":"/reference/global_jc_perm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Global Join Counts — global_jc_perm","text":"global_jc_perm() implements monte-carlo based join count using spdep::joincount.mc() global_jc_test() implements traditional BB join count statistic using spdep::joincount.test() tally_jc() calculated join counts variable fx returns data.frame using spdep::joincount.multi()","code":""},{"path":"/reference/global_jc_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Join Counts — global_jc_perm","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb, style = \"B\") fx <- guerry$region global_jc_perm(fx, nb, wt) #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for C = 35, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               7.893788               5.781869  #>  #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for E = 29, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               7.875752               5.779712  #>  #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for N = 29, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               8.078156               6.305124  #>  #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for S = 32, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               7.831663               6.296907  #>  #>  #> \tMonte-Carlo simulation of join-count statistic #>  #> data:  fx  #> weights: listw  #> number of simulations + 1: 500  #>  #> Join-count statistic for W = 31, rank of observed statistic = 500, #> p-value = 0.002 #> alternative hypothesis: greater #> sample estimates: #>     mean of simulation variance of simulation  #>               8.098196               6.570659  #>   global_jc_test(fx, nb, wt) #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for C = 10.886, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             35.000000              8.000000              6.151883  #>  #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for E = 8.4667, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             29.000000              8.000000              6.151883  #>  #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for N = 8.4667, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             29.000000              8.000000              6.151883  #>  #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for S = 9.6763, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             32.000000              8.000000              6.151883  #>  #>  #> \tJoin count test under nonfree sampling #>  #> data:  fx  #> weights: listw  #>  #> Std. deviate for W = 9.2731, p-value < 2.2e-16 #> alternative hypothesis: greater #> sample estimates: #> Same colour statistic           Expectation              Variance  #>             31.000000              8.000000              6.151883  #>   tally_jc(fx, nb, wt) #>      joincount expected  variance    z-value joins #> C:C         35        8  6.151883  10.885785   C:C #> E:E         29        8  6.151883   8.466721   E:E #> N:N         29        8  6.151883   8.466721   N:N #> S:S         32        8  6.151883   9.676253   S:S #> W:W         31        8  6.151883   9.273076   W:W #> E:C          8       17 12.887676  -2.507005   E:C #> N:C          7       17 12.887676  -2.785561   N:C #> N:E          8       17 12.887676  -2.507005   N:E #> S:C          7       17 12.887676  -2.785561   S:C #> S:E          5       17 12.887676  -3.342673   S:E #> S:N          0       17 12.887676  -4.735454   S:N #> W:C          9       17 12.887676  -2.228449   W:C #> W:E          0       17 12.887676  -4.735454   W:E #> W:N          3       17 12.887676  -3.899786   W:N #> W:S          7       17 12.887676  -2.785561   W:S #> Jtot        54      170 30.848971 -20.885152  Jtot"},{"path":"/reference/global_moran.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Global Moran's I — global_moran","title":"Calculate Global Moran's I — global_moran","text":"Calculate Global Moran's ","code":""},{"path":"/reference/global_moran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Global Moran's I — global_moran","text":"","code":"global_moran(x, nb, wt, na_ok = FALSE, ...)"},{"path":"/reference/global_moran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Global Moran's I — global_moran","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). na_ok default FALSE. FALSE presence NA Inf results error. ... additional arguments passed spdep::moran().","code":""},{"path":"/reference/global_moran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Global Moran's I — global_moran","text":"htest object","code":""},{"path":[]},{"path":"/reference/global_moran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Global Moran's I — global_moran","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers moran <- global_moran(x, nb, wt)"},{"path":"/reference/global_moran_bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Global Bivariate Moran's I — global_moran_bv","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"Given two continuous numeric variables, calculate bivariate Moran's . See details .","code":""},{"path":"/reference/global_moran_bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"","code":"global_moran_bv(x, y, nb, wt, nsim = 99, scale = TRUE)"},{"path":"/reference/global_moran_bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"x numeric vector length y. y numeric vector length x. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run. scale default TRUE.","code":""},{"path":"/reference/global_moran_bv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"object class boot","code":""},{"path":"/reference/global_moran_bv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"Global Bivariate Moran defined \\( I_B = \\frac{\\Sigma_i(\\Sigma_j{w_{ij}y_j\\times x_i})}{\\Sigma_i{x_i^2}} \\) important note measure autocorrelation X spatial lag Y. , resultant measure may overestimate amount spatial autocorrelation may product inherent correlation X Y.","code":""},{"path":"/reference/global_moran_bv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"Global Spatial Autocorrelation (2): Bivariate, Differential EB Rate Moran Scatter Plot, Luc Anselin","code":""},{"path":[]},{"path":"/reference/global_moran_bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Global Bivariate Moran's I — global_moran_bv","text":"","code":"x <- guerry_nb$crime_pers y <- guerry_nb$wealth nb <- guerry_nb$nb wt <- guerry_nb$wt global_moran_bv(x, y, nb, wt) #>  #> DATA PERMUTATION #>  #>  #> Call: #> boot(data = xx, statistic = bvm_boot, R = nsim, sim = \"permutation\",  #>     listw = listw, parallel = parallel, ncpus = ncpus, cl = cl) #>  #>  #> Bootstrap Statistics : #>       original    bias    std. error #> t1* -0.1006674 0.1024929  0.05090268"},{"path":"/reference/global_moran_perm.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Moran Permutation Test — global_moran_perm","title":"Global Moran Permutation Test — global_moran_perm","text":"Global Moran Permutation Test","code":""},{"path":"/reference/global_moran_perm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Moran Permutation Test — global_moran_perm","text":"","code":"global_moran_perm(x, nb, wt, alternative = \"two.sided\", nsim = 499, ...)"},{"path":"/reference/global_moran_perm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Moran Permutation Test — global_moran_perm","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. nsim number simulations run. ... additional arguments passed spdep::moran.mc()","code":""},{"path":"/reference/global_moran_perm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Moran Permutation Test — global_moran_perm","text":"object classes htest, mc.sim.","code":""},{"path":[]},{"path":"/reference/global_moran_perm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Moran Permutation Test — global_moran_perm","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers moran <- global_moran_perm(x, nb, wt) moran #>  #> \tMonte-Carlo simulation of Moran I #>  #> data:  x  #> weights: listw   #> number of simulations + 1: 500  #>  #> statistic = 0.41146, observed rank = 500, p-value < 2.2e-16 #> alternative hypothesis: two.sided #>"},{"path":"/reference/global_moran_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Moran Test — global_moran_test","title":"Global Moran Test — global_moran_test","text":"Global Moran Test","code":""},{"path":"/reference/global_moran_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Moran Test — global_moran_test","text":"","code":"global_moran_test(   x,   nb,   wt,   alternative = \"greater\",   randomization = TRUE,   ... )"},{"path":"/reference/global_moran_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Moran Test — global_moran_test","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. randomization default TRUE. Calculate variance based randomization. FALSE, assumption normality. ... additional arguments passed spdep::moran.mc()","code":""},{"path":"/reference/global_moran_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global Moran Test — global_moran_test","text":"object class htest","code":""},{"path":[]},{"path":"/reference/global_moran_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global Moran Test — global_moran_test","text":"","code":"nb <- guerry_nb$nb wt <- guerry_nb$wt x <- guerry_nb$crime_pers global_moran_test(x, nb, wt) #>  #> \tMoran I test under randomisation #>  #> data:  x   #> weights: listw     #>  #> Moran I statistic standard deviate = 6.0484, p-value = 7.316e-10 #> alternative hypothesis: greater #> sample estimates: #> Moran I statistic       Expectation          Variance  #>       0.411459718      -0.011904762       0.004899501  #>"},{"path":"/reference/guerry.html","id":null,"dir":"Reference","previous_headings":"","what":"","title":"","text":"dataset widely used demonstrate geospatial methods techniques. useful inclusion R package purposes example. dataset package modified Guerry Michael Friendly.","code":""},{"path":"/reference/guerry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"","text":"","code":"guerry  guerry_nb"},{"path":"/reference/guerry.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"","text":"object class sf (inherits tbl_df, tbl, data.frame) 85 rows 27 columns. guerry sf object 85 observations 27 variables. guerry_nb 2 additional variables created sfdep.","code":""},{"path":"/reference/guerry.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"","text":"Guerry::gfrance85","code":""},{"path":"/reference/guerry.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"","text":"guerry guerry_nb objects sf class objects. polygons boundaries France (excluding Corsica) 1830.","code":""},{"path":"/reference/include_self.html","id":null,"dir":"Reference","previous_headings":"","what":"Includes self in neighbor list — include_self","title":"Includes self in neighbor list — include_self","text":"Includes observed region list neighbors. neighbor lists, important include ith observation (self) neighbors list, particularly kernel weights.","code":""},{"path":"/reference/include_self.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Includes self in neighbor list — include_self","text":"","code":"include_self(nb)  remove_self(nb)"},{"path":"/reference/include_self.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Includes self in neighbor list — include_self","text":"nb object class nb e.g. made st_contiguity()","code":""},{"path":"/reference/include_self.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Includes self in neighbor list — include_self","text":"object class nb.","code":""},{"path":"/reference/include_self.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Includes self in neighbor list — include_self","text":"","code":"nb <- st_contiguity(guerry) self_included <- include_self(nb) self_included #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 505  #> Percentage nonzero weights: 6.989619  #> Average number of links: 5.941176  remove_self(self_included) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 420  #> Percentage nonzero weights: 5.813149  #> Average number of links: 4.941176"},{"path":"/reference/inverse_dist_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate inverse distance weights — inverse_dist_calc","title":"Calculate inverse distance weights — inverse_dist_calc","text":"Calculate inverse distance weights","code":""},{"path":"/reference/inverse_dist_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate inverse distance weights — inverse_dist_calc","text":"","code":"inverse_dist_calc(.x, scale, alpha)"},{"path":"/reference/is_spacetime_cube.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"Given object class spacetime, determine spacetime cube. time-series irregular warning emitted (see validate_spacetime() restrictions time column.","code":""},{"path":"/reference/is_spacetime_cube.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"","code":"is_spacetime_cube(x, ...)"},{"path":"/reference/is_spacetime_cube.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"x spacetime object ... unused","code":""},{"path":"/reference/is_spacetime_cube.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"logical scalar.","code":""},{"path":"/reference/is_spacetime_cube.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"spacetime object spacetime cube contains regular time-series representation geometry. , one observation time period per geography present. number rows spacetime cube number geographies multiplied number time periods. example 10 locations 20 time periods, number rows must 200.","code":""},{"path":"/reference/is_spacetime_cube.html","id":"validation","dir":"Reference","previous_headings":"","what":"Validation","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"is_spacetime_cube() runs number checks ensure provided object fact spacetime cube. checks : number rows equal number locations multiplied number time periods time period equal number observations location equal number observations combination time period location one observation time-series regular","code":""},{"path":"/reference/is_spacetime_cube.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test if a spacetime object is a spacetime cube — is_spacetime_cube","text":"","code":"if (requireNamespace(\"zoo\", quietly = TRUE)) { df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data df <- read.csv(   df_fp, colClasses = c(\"character\", \"character\", \"integer\", \"double\", \"Date\") ) geo <- sf::st_read(geo_fp)  # Create spacetime object called `bos` bos <- spacetime(df, geo,                 .loc_col = \".region_id\",                 .time_col = \"time_period\")  is_spacetime_cube(bos) is_spacetime_cube(bos[round(runif(1000, 0, nrow(bos))),]) is_spacetime_cube(guerry) } #> Reading layer `bos-ecometric' from data source  #>   `/private/var/folders/zc/tg2xwck53dg9sls8x4ndzdc00000gn/T/Rtmp2RGXTr/temp_libpath2b6f5ea0db20/sfdep/extdata/bos-ecometric.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83 #> ! Number of rows does not equal `n time-periods x n locations` #> [1] FALSE"},{"path":"/reference/jc_bjc_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate BJC Bivariate Case — jc_bjc_calc","title":"Calculate BJC Bivariate Case — jc_bjc_calc","text":"Assumes colocation","code":""},{"path":"/reference/jc_bjc_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate BJC Bivariate Case — jc_bjc_calc","text":"","code":"jc_bjc_calc(x, xj, z, zj, wt)"},{"path":"/reference/jc_bjc_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate BJC BV for conditional permutations — jc_bjc_perm_impl","title":"Calculate BJC BV for conditional permutations — jc_bjc_perm_impl","text":"Calculate BJC BV conditional permutations","code":""},{"path":"/reference/jc_bjc_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate BJC BV for conditional permutations — jc_bjc_perm_impl","text":"","code":"jc_bjc_perm_impl(x, z, listw, index)"},{"path":"/reference/jc_clc_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","title":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","text":"Calculate CLC BV conditional permutations","code":""},{"path":"/reference/jc_clc_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","text":"","code":"jc_clc_perm_impl(x, z, listw, index)"},{"path":"/reference/jc_clc_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate CLC BV for conditional permutations — jc_clc_perm_impl","text":"x binary variable consisting 1 0, TRUE FALSE. z binary variable consisting 1 0, TRUE FALSE. listw listw object index integer vector identifying positions subset.","code":""},{"path":"/reference/jc_uni_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate univariate join count at row level — jc_uni_calc","title":"Calculate univariate join count at row level — jc_uni_calc","text":"Calculates local join count statistic given xi, xj, binary weights.","code":""},{"path":"/reference/jc_uni_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate univariate join count at row level — jc_uni_calc","text":"","code":"jc_uni_calc(x, xj, wt)"},{"path":"/reference/jc_uni_calc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate univariate join count at row level — jc_uni_calc","text":"Formula \\(x_i \\times \\Sigma{w_i * x_j}\\)","code":""},{"path":"/reference/jc_uni_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Implementation of the univariate join count on listw objects — jc_uni_impl","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"univariate local join count statistic used identify clusters rarely occurring binary variables.","code":""},{"path":"/reference/jc_uni_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"","code":"jc_uni_impl(x, listw, nsim, alternative)"},{"path":"/reference/jc_uni_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"x binary variable either numeric logical listw listw object attr(, \"mode\") \"binary\" nsim number conditional permutation simulations alternative default \"greater\". One \"less\" \"greater\".","code":""},{"path":"/reference/jc_uni_impl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Implementation of the univariate join count on listw objects — jc_uni_impl","text":"https://geodacenter.github.io/workbook/6d_local_discrete/lab6d.html#univariate-local-join-count-statistic","code":""},{"path":"/reference/jc_uni_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional permutation of univariate local join count — jc_uni_perm_impl","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"Creates conditional permutations index calculates local univariate join count index.","code":""},{"path":"/reference/jc_uni_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"","code":"jc_uni_perm_impl(x, listw, index)"},{"path":"/reference/jc_uni_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"x binary variable listw must binary index subset","code":""},{"path":"/reference/jc_uni_perm_impl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conditional permutation of univariate local join count — jc_uni_perm_impl","text":"TODO conditional permutation indexing can useful elsewhere subsetting required functions","code":""},{"path":"/reference/kernels.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel functions — kernels","title":"Kernel functions — kernels","text":"Kernel functions creating kernel based weights st_kernel_weights()","code":""},{"path":"/reference/kernels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kernel functions — kernels","text":"","code":"kernels"},{"path":"/reference/kernels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Kernel functions — kernels","text":"object class list length 5.","code":""},{"path":"/reference/kernels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kernel functions — kernels","text":"list length 5 element kernel function.","code":""},{"path":"/reference/kernels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kernel functions — kernels","text":"Supported kernels . Formulas come Anselin & Morrison's notes. uniform:  K(z) = 1/2 |z|<1 triangular: K(z) = (1-|z|) |z| < 1 epanechnikov: K(z) = (3/4)(1-z^2) |z| < 1 quartic: K(z) = (15/16)*(1-(z/threshold)^2^)2 |z| < 1 gaussian: K(z) = (2pi)^{1/2} * exp(-z^2/2)","code":""},{"path":"/reference/local_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Local Geary statistic — local_c","title":"Compute Local Geary statistic — local_c","text":"Local Geary local adaptation Geary's C statistic spatial autocorrelation. Local Geary uses squared differences measure dissimilarity unlike Local Moran. Low values Local Geary indicate positive spatial autocorrelation large refers negative spatial autocorrelation. Inference Local Geary based permutation approach compares observed value reference distribution spatial randomness. Local Geary creates pseudo p-value. analytical p-value based number permutations used care.","code":""},{"path":"/reference/local_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Local Geary statistic — local_c","text":"","code":"local_c(x, nb, wt, ...)  local_c_perm(x, nb, wt, nsim = 499, alternative = \"two.sided\", ...)"},{"path":"/reference/local_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Local Geary statistic — local_c","text":"x numeric vector, list numeric vectors equal length. nb neighbor list wt weights list ... arguments passed spdep::localC_perm(), e.g. zero.policy = TRUE allow zones without neighbors. nsim number simulations used generate reference distribution. alternative character defining alternative hypothesis. Must one \"two.sided\", \"less\" \"greater\".","code":""},{"path":"/reference/local_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Local Geary statistic — local_c","text":"data.frame columns ci: Local Geary statistic e_ci: expected value Local Geary based permutations z_ci: standard deviation based permutations var_ci: variance based permutations p_ci: p-value based permutation sample standard deviation means p_ci_sim: p-value based rank observed statistic p_folded_sim: p-value based implementation Pysal always assumes two-sided test taking minimum possible p-value skewness: sample skewness kurtosis: sample kurtosis","code":""},{"path":[]},{"path":"/reference/local_c.html","id":"overview","dir":"Reference","previous_headings":"","what":"Overview","title":"Compute Local Geary statistic — local_c","text":"Local Geary can extended multivariate context. x numeric vector, univariate Local Geary calculated. calculate multivariate Local Moran provide either list matrix. x list, element must numeric vector length length neighbours listw. case x matrix number rows must length neighbours listw. required univariate context, standardized Local Geary calculated. multivariate Local Geary always standardized. univariate Local Geary calculated \\(c_i = \\sum_j w_{ij}(x_i - x_j)^2\\) multivariate Local Geary calculated \\(c_{k,} = \\sum_{v=1}^{k} c_{v,}\\) described Anselin (2019).","code":""},{"path":"/reference/local_c.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Compute Local Geary statistic — local_c","text":"functions based implementations local Geary statistic development version spdep. based spdep::localC spdep::localC_perm. spdep::localC_perm thus local_c_perm utilize conditional permutation approach approximate reference distribution observation held fixed, randomly samples neighbors, calculated local C statistic tuple (ci). repeated nsim times. simulations 3 different types p-values calculated—potential flaws. extra judicious using p-values make conclusions. p_ci: utilizes sample mean standard deviation. p-value calculated using pnorm()--assuming normal distribution always true. p_ci_sim: uses rank observed statistic. p_folded_sim: follows pysal implementation p-values range [0, 0.5]. excludes 1/2 p-values used caution.","code":""},{"path":"/reference/local_c.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute Local Geary statistic — local_c","text":"Anselin, L. (1995), Local Indicators Spatial Association—LISA. Geographical Analysis, 27: 93-115. doi:10.1111/j.1538-4632.1995.tb00338.x Anselin, L. (2019), Local Indicator Multivariate Spatial Association: Extending Geary's c. Geogr Anal, 51: 133-150. doi:10.1111/gean.12164","code":""},{"path":"/reference/local_c.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute Local Geary statistic — local_c","text":"Josiah Parry, josiah.parry@gmail.com","code":""},{"path":"/reference/local_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Local Geary statistic — local_c","text":"","code":"local_c_perm(guerry_nb$crime_pers, guerry_nb$nb, guerry_nb$wt) #>             ci        cluster      e_ci    var_ci        z_ci       p_ci #> 1  0.987725319      High-High 2.5302015 1.4992710 -1.25973265 0.20776582 #> 2  0.838345145      High-High 1.7386999 0.5914383 -1.17073588 0.24170496 #> 3  0.702801925      High-High 1.8621051 0.6528794 -1.43476423 0.15135429 #> 4  0.100402310        Low-Low 1.9210607 1.5619953 -1.45676196 0.14518210 #> 5  0.244977901        Low-Low 1.1500848 0.6981356 -1.08325313 0.27869608 #> 6  1.353310326        Low-Low 3.1855816 1.7139859 -1.39954272 0.16165030 #> 7  3.623634688      High-High 5.4245539 5.7201046 -0.75299527 0.45145276 #> 8  1.536196129        Low-Low 4.5135154 5.5528101 -1.26348184 0.20641607 #> 9  0.861013426 Other Positive 1.0012085 0.2591610 -0.27538989 0.78301671 #> 10 0.725268063        Low-Low 1.3100696 0.6449975 -0.72816444 0.46651293 #> 11 0.571428163        Low-Low 3.6245484 1.7457675 -2.31073804 0.02084733 #> 12 0.001151306        Low-Low 1.7714760 1.6741020 -1.36823901 0.17123728 #> 13 1.912088100 Other Positive 1.1447576 0.7037120  0.91471332 0.36034215 #> 14 1.140906230        Low-Low 1.1218034 0.3459832  0.03247657 0.97409200 #> 15 1.007912947       Negative 1.4407788 0.4940950 -0.61581194 0.53801864 #> 16 0.303683489 Other Positive 1.0317763 0.3147637 -1.29776023 0.19436974 #> 17 1.214635190      High-High 1.0545683 0.2342039  0.33075358 0.74083063 #> 18 1.920535316        Low-Low 1.4312576 0.5977627  0.63283578 0.52684089 #> 19 1.610359805      High-High 3.9023805 1.9477387 -1.64230264 0.10052730 #> 20 0.446973853      High-High 2.3870300 2.0097301 -1.36850197 0.17115501 #> 21 5.156798989      High-High 6.5389013 3.2889894 -0.76209473 0.44600347 #> 22 0.919215466       Negative 1.0350553 0.2066213 -0.25484169 0.79884537 #> 23 3.107530093 Other Positive 2.4380062 4.1283634  0.32951649 0.74176533 #> 24 0.230533117        Low-Low 1.6975244 1.0389532 -1.43922777 0.15008600 #> 25 1.349244911 Other Positive 1.4953061 0.6777055 -0.17742478 0.85917474 #> 26 1.067920103      High-High 1.0564530 0.2362492  0.02359218 0.98117791 #> 27 0.418377023      High-High 2.9531117 4.0422928 -1.26071996 0.20740976 #> 28 0.208541175        Low-Low 1.9141620 0.9707897 -1.73109097 0.08343554 #> 29 0.788634381        Low-Low 1.0204786 0.2824414 -0.43624673 0.66265773 #> 30 0.248262048        Low-Low 1.0549304 0.2957507 -1.48331061 0.13799190 #> 31 0.364299667      High-High 1.2898347 0.5986834 -1.19617372 0.23162878 #> 32 0.136623420        Low-Low 1.8892490 1.2783310 -1.55012774 0.12111086 #> 33 0.708692856      High-High 1.0896611 0.2620231 -0.74425029 0.45672507 #> 34 3.108893756      High-High 4.0051591 1.8712519 -0.65519482 0.51234233 #> 35 1.981523756 Other Positive 0.9766742 0.2972077  1.84319391 0.06530070 #> 36 0.922565985        Low-Low 1.0544186 0.2830862 -0.24781600 0.80427677 #> 37 1.044173246      High-High 1.8300265 0.8287265 -0.86324856 0.38800082 #> 38 0.332298593 Other Positive 1.0495041 0.4374009 -1.08443555 0.27817173 #> 39 0.940330887      High-High 1.0556557 0.2135067 -0.24958421 0.80290891 #> 40 1.904654615       Negative 2.1141878 0.6952451 -0.25129496 0.80158607 #> 41 0.936064027        Low-Low 1.2483153 0.5664930 -0.41486514 0.67824063 #> 42 0.628686757 Other Positive 0.9959316 0.3536202 -0.61757145 0.53685787 #> 43 0.390598000 Other Positive 1.0738022 0.2806409 -1.28965948 0.19716891 #> 44 2.689756388        Low-Low 4.9666815 3.1791078 -1.27701534 0.20159683 #> 45 1.278289774       Negative 1.1920025 0.2896560  0.16032663 0.87262379 #> 46 0.793948353        Low-Low 3.9557159 2.6032180 -1.95963269 0.05003874 #> 47 1.683658729      High-High 2.8175537 0.8708148 -1.21509414 0.22433019 #> 48 1.301187948      High-High 3.3126397 2.3573068 -1.31009130 0.19016495 #> 49 2.342671020 Other Positive 1.3741101 0.5623938  1.29153640 0.19651774 #> 50 0.832225668      High-High 1.7702214 0.6524277 -1.16127392 0.24553052 #> 51 0.296215805      High-High 2.4036991 1.2170990 -1.91029826 0.05609482 #> 52 2.268056379       Negative 1.9133776 0.9858641  0.35721252 0.72093271 #> 53 0.876680843      High-High 1.4065244 0.5125325 -0.74009411 0.45924289 #> 54 0.414701945      High-High 1.2260675 0.4932709 -1.15524434 0.24799038 #> 55 1.979054136        Low-Low 2.2719459 3.9061689 -0.14819433 0.88218940 #> 56 0.561171709      High-High 1.4808781 0.4657015 -1.34770660 0.17775277 #> 57 0.378238452      High-High 1.8229805 1.3437253 -1.24633578 0.21264115 #> 58 1.849165484      High-High 2.2955249 1.0050703 -0.44523210 0.65615203 #> 59 1.207382342      High-High 2.2373789 0.8762710 -1.10031376 0.27119544 #> 60 1.157149740      High-High 1.1457056 0.8938569  0.01210458 0.99034218 #> 61 1.848857476 Other Positive 1.1352981 0.3566800  1.19478778 0.23216995 #> 62 0.155525055        Low-Low 1.1814654 0.8093517 -1.14039021 0.25412377 #> 63 0.642205848        Low-Low 2.1269621 2.1891453 -1.00350112 0.31561914 #> 64 0.749419937        Low-Low 4.3791252 7.3750254 -1.33656350 0.18136516 #> 65 1.283938081        Low-Low 2.1890394 1.6726563 -0.69983210 0.48403216 #> 66 1.470817990        Low-Low 4.0503016 7.5556343 -0.93842013 0.34802855 #> 67 1.263739703 Other Positive 1.0391647 0.3884136  0.36034149 0.71859178 #> 68 0.964844188      High-High 1.1122214 0.2975052 -0.27019862 0.78700745 #> 69 0.338990398      High-High 2.3442681 0.8920578 -2.12313696 0.03374238 #> 70 1.924872243      High-High 4.6855852 2.1742435 -1.87226433 0.06117004 #> 71 0.659890869        Low-Low 1.6835069 2.4823600 -0.64968777 0.51589392 #> 72 2.135743520 Other Positive 1.0592632 0.6162752  1.37125668 0.17029496 #> 73 0.710008255       Negative 1.0754975 0.1966501 -0.82419029 0.40983144 #> 74 1.424041460        Low-Low 2.0722928 0.9946043 -0.65000737 0.51568746 #> 75 0.706001903 Other Positive 1.0876162 0.3633600 -0.63307633 0.52668380 #> 76 1.774528303      High-High 4.5140731 2.5103004 -1.72908188 0.08379444 #> 77 0.242422537        Low-Low 1.8883149 1.1128984 -1.56017630 0.11871823 #> 78 0.694451670        Low-Low 1.5172115 0.6462868 -1.02343536 0.30610205 #> 79 0.001874143        Low-Low 1.9442535 1.9214462 -1.40126388 0.16113518 #> 80 0.055356016        Low-Low 1.7597653 0.8905756 -1.80608633 0.07090486 #> 81 0.428128655      High-High 0.9913836 0.3489998 -0.95343790 0.34036825 #> 82 2.024633135 Other Positive 1.5417557 0.7493661  0.55781460 0.57697099 #> 83 2.497611820 Other Positive 1.2637478 0.5126094  1.72335218 0.08482486 #> 84 1.048741881        Low-Low 1.0220117 0.2484388  0.05362805 0.95723151 #> 85 1.026405574 Other Positive 1.0738224 0.3646807 -0.07851924 0.93741503 #>    p_ci_sim p_folded_sim  skewness    kurtosis #> 1     0.176        0.088 0.5547185 -0.06279701 #> 2     0.188        0.094 0.5697743  0.03835036 #> 3     0.100        0.050 0.6337871  0.12030182 #> 4     0.008        0.004 0.8616578  0.30289555 #> 5     0.260        0.130 0.9581043  0.62918986 #> 6     0.116        0.058 0.5466322  0.20462670 #> 7     0.480        0.240 0.6296362  0.30378009 #> 8     0.136        0.068 0.8460502  0.66053909 #> 9     0.848        0.424 0.6365611  0.32384195 #> 10    0.496        0.248 0.9797378  1.38660001 #> 11    0.004        0.002 0.5788117  0.36588430 #> 12    0.004        0.002 0.7452809 -0.12068707 #> 13    0.368        0.184 0.9226400  0.43294904 #> 14    0.852        0.426 0.8140157  0.64142620 #> 15    0.592        0.296 0.7932099  0.58557136 #> 16    0.104        0.052 0.8545307  0.62920291 #> 17    0.700        0.350 0.5160029 -0.09860068 #> 18    0.524        0.262 0.6378879 -0.05971532 #> 19    0.052        0.026 0.4700876 -0.12102364 #> 20    0.140        0.070 0.7323359  0.46913854 #> 21    0.468        0.234 0.1104821 -0.22012809 #> 22    0.896        0.448 0.6131696  0.14063447 #> 23    0.628        0.314 0.9267789  0.20482444 #> 24    0.056        0.028 0.7988173  0.49499575 #> 25    0.968        0.484 0.8479828  0.72304437 #> 26    0.916        0.458 0.5901119  0.17261793 #> 27    0.144        0.072 0.7101465  0.05155841 #> 28    0.016        0.008 0.5881690 -0.21887991 #> 29    0.712        0.356 0.9897033  1.92269644 #> 30    0.052        0.026 0.7349385  0.13319099 #> 31    0.160        0.080 0.9134813  0.37217986 #> 32    0.008        0.004 0.6904486 -0.00560892 #> 33    0.524        0.262 0.6366330  0.31613341 #> 34    0.516        0.258 0.3993656 -0.06970491 #> 35    0.108        0.054 0.7745696  0.73151659 #> 36    0.908        0.454 0.8831444  1.30637241 #> 37    0.444        0.222 0.5864434  0.02285063 #> 38    0.276        0.138 0.7474730  0.17878478 #> 39    0.880        0.440 0.4282149 -0.42555541 #> 40    0.900        0.450 0.5599459  0.36536696 #> 41    0.820        0.410 0.9630359  0.91240120 #> 42    0.648        0.324 0.7166774  0.09156859 #> 43    0.144        0.072 0.6529311  0.23912892 #> 44    0.184        0.092 0.3986520 -0.22797854 #> 45    0.764        0.382 0.6814098  0.52975140 #> 46    0.012        0.006 0.4229850 -0.10871401 #> 47    0.208        0.104 0.4047752  0.07551500 #> 48    0.184        0.092 0.4229555 -0.02720629 #> 49    0.232        0.116 0.6741496  0.20991262 #> 50    0.200        0.100 0.7983370  0.68739202 #> 51    0.012        0.006 0.5790616  0.45552295 #> 52    0.664        0.332 0.6017639  0.04004606 #> 53    0.536        0.268 0.7582262  0.16082852 #> 54    0.216        0.108 0.7021160 -0.05614549 #> 55    0.928        0.464 1.0922717  0.74880114 #> 56    0.108        0.054 0.8511583  0.76400897 #> 57    0.120        0.060 0.8576174  0.33192122 #> 58    0.728        0.364 0.4988748  0.03415802 #> 59    0.276        0.138 0.5153176  0.55570840 #> 60    0.764        0.382 1.2334326  1.40118120 #> 61    0.268        0.134 0.5571515 -0.20651072 #> 62    0.176        0.088 1.1422501  1.43899246 #> 63    0.344        0.172 0.8431191  0.42036098 #> 64    0.100        0.050 0.8697918  0.96687956 #> 65    0.548        0.274 0.7055437  0.59846921 #> 66    0.400        0.200 0.7951423  0.12010944 #> 67    0.644        0.322 0.6578707 -0.03568370 #> 68    0.892        0.446 0.5268665 -0.21384765 #> 69    0.008        0.004 0.6113943  0.03335488 #> 70    0.044        0.022 0.2990709  0.07142324 #> 71    0.664        0.332 1.3168408  1.53523412 #> 72    0.204        0.102 1.1830468  2.06570055 #> 73    0.480        0.240 0.6516212  0.13604109 #> 74    0.608        0.304 0.3311255 -0.49036773 #> 75    0.596        0.298 0.8049037  0.77875110 #> 76    0.068        0.034 0.2864614 -0.01220005 #> 77    0.036        0.018 0.7397824  0.59545091 #> 78    0.316        0.158 0.5288488 -0.39998419 #> 79    0.008        0.004 0.7591347 -0.08177678 #> 80    0.004        0.002 0.6974548  0.54730854 #> 81    0.352        0.176 0.8392758  0.47595712 #> 82    0.528        0.264 0.7824387  0.71186709 #> 83    0.136        0.068 0.7182784  0.06797578 #> 84    0.828        0.414 0.6337278  0.07381572 #> 85    0.956        0.478 0.8143583  0.60778857"},{"path":"/reference/local_colocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Local indicator of Colocation Quotient — local_colocation","title":"Local indicator of Colocation Quotient — local_colocation","text":"local indicator colocation quotient (LCLQ) Local Indicator Spatial Association (LISA) evaluates given observation's subcategory colocated subcategories B. Like CLQ, LCLQ provides insight asymmetric relationships subcategories B (B can also equal ) local level. LCLQ defined using Gaussian kernel weights adaptive bandwidth (see st_kernel_weights()). However, type weights list can used. Kernel weights used introduce decay calculation CLQ. ensures points nearer focal point influence distant.","code":""},{"path":"/reference/local_colocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local indicator of Colocation Quotient — local_colocation","text":"","code":"local_colocation(A, B, nb, wt, nsim)"},{"path":"/reference/local_colocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local indicator of Colocation Quotient — local_colocation","text":"character factor vector. B character factor vector. nb neighbors list e.g. created st_knn() st_contiguity() wt weights list. Recommended Gaussian kernel weights list using adaptive bandwidth e.g. created st_kernel_weights(nb, geometry, \"gaussian\", addaptive = TRUE) include self. nsim default 99. integer representing many simulations run calculating simulated p-values.","code":""},{"path":"/reference/local_colocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local indicator of Colocation Quotient — local_colocation","text":"data frame many rows observations two times many columns unique values B. Columns contain unique value B well simulated p-value value B.","code":""},{"path":"/reference/local_colocation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Local indicator of Colocation Quotient — local_colocation","text":"LCLQ defined \\(LCLQ_{A_i \\B} = \\frac{N_{A_i \\B}}{N_B / (N - 1)}\\) \\(N_{A_i \\B} = \\sum_{j = 1(j \\ne )}^{N}(\\frac{w_{ij}f_{ij}}{\\sum_{j = 1(j \\ne )}^{N}w_{ij}})\\). weights matrix, wij, uses adaptive bandwidth Gaussian kernel weights. LCLQ calculated subcategories present neighbor list. subcategory present, resultant LCLQ simulated p-value NA.","code":""},{"path":"/reference/local_colocation.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Local indicator of Colocation Quotient — local_colocation","text":"Fahui Wang, Yujie Hu, Shuai Wang & Xiaojuan Li (2017) Local Indicator Colocation Quotient Statistical Significance Test: Examining Spatial Association Crime Facilities, Professional Geographer, 69:1, 22-31, doi:10.1080/00330124.2016.1157498","code":""},{"path":"/reference/local_colocation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local indicator of Colocation Quotient — local_colocation","text":"","code":"A <- guerry$main_city B <- guerry$region geo <- sf::st_centroid(sf::st_geometry(guerry)) nb <- include_self(st_knn(geo, 5)) wt <- st_kernel_weights(nb, geo, \"gaussian\", adaptive = TRUE) res <- local_colocation(A, B, nb, wt, 9) tail(res) #>           C        E         N        S        W p_sim_C p_sim_E p_sim_N #> 80       NA 1.770957        NA 3.170219       NA      NA     0.3      NA #> 81       NA       NA        NA       NA 4.941176      NA      NA      NA #> 82 2.564959       NA        NA       NA 2.376218     0.2      NA      NA #> 83 2.478538       NA        NA       NA 2.462639     0.2      NA      NA #> 84       NA 4.186106 0.7550705       NA       NA      NA     0.1     0.1 #> 85 2.321401 1.816223 0.8035523       NA       NA     0.2     0.1     0.3 #>    p_sim_S p_sim_W #> 80     0.1      NA #> 81      NA     0.1 #> 82      NA     0.1 #> 83      NA     0.2 #> 84      NA      NA #> 85      NA      NA"},{"path":"/reference/local_colocation_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the local colocation quotient — local_colocation_calc","title":"Calculate the local colocation quotient — local_colocation_calc","text":"Calculate local colocation quotient","code":""},{"path":"/reference/local_colocation_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the local colocation quotient — local_colocation_calc","text":"","code":"local_colocation_calc(A, B, listw)"},{"path":"/reference/local_colocation_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the local colocation quotient — local_colocation_calc","text":"matrix","code":""},{"path":"/reference/local_colocation_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"spdep implementation of local colocation quotient — local_colocation_impl","title":"spdep implementation of local colocation quotient — local_colocation_impl","text":"Internal implementation local CLQ compatible spdep.","code":""},{"path":"/reference/local_colocation_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spdep implementation of local colocation quotient — local_colocation_impl","text":"","code":"local_colocation_impl(A, B, listw, nsim = 99)"},{"path":"/reference/local_colocation_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"spdep implementation of local colocation quotient — local_colocation_impl","text":"data frame number rows length number columns unique values B.","code":""},{"path":"/reference/local_g.html","id":null,"dir":"Reference","previous_headings":"","what":"Local G — local_g","title":"Local G — local_g","text":"Calculate local Geary statistic given variable.","code":""},{"path":"/reference/local_g.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local G — local_g","text":"","code":"local_g(x, nb, wt, alternative = \"two.sided\", ...)  local_g_perm(x, nb, wt, nsim = 499, alternative = \"two.sided\", ...)"},{"path":"/reference/local_g.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local G — local_g","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. ... methods passed spdep::localG() spdep::localG_perm() nsim number simulations run.","code":""},{"path":"/reference/local_g.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local G — local_g","text":"data.frame columns: gi: observed statistic cluster: factor variable two levels classification high low e_gi: permutation sample mean var_gi: permutation sample variance std_dev: standard deviation Gi statistic p_value: p-value using sample mean standard deviation p_folded_sim: p-value based implementation Pysal always assumes two-sided test taking minimum possible p-value skewness: sample skewness kurtosis: sample kurtosis","code":""},{"path":"/reference/local_g.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local G — local_g","text":"","code":"x <- guerry$crime_pers nb <- st_contiguity(guerry) wt <- st_weights(nb)  res <- local_g_perm(x, nb, wt)  head(res) #>           gi cluster       e_gi       var_gi    std_dev    p_value p_sim #> 1  0.8991367    High 0.01181669 5.294820e-06  0.8701837 0.38420001 0.424 #> 2  2.4455980    High 0.01191097 2.889082e-06  2.4734589 0.01338122 0.008 #> 3  2.1976551    High 0.01190228 2.679746e-06  2.3117279 0.02079268 0.036 #> 4 -1.5838690     Low 0.01188818 4.847045e-06 -1.5148402 0.12981289 0.116 #> 5 -1.1902425     Low 0.01187490 6.603139e-06 -1.1359518 0.25597672 0.252 #> 6 -1.6527255     Low 0.01185289 2.372027e-06 -1.6352541 0.10199579 0.104 #>   p_folded_sim    skewness    kurtosis #> 1        0.212  0.06130549 -0.23895408 #> 2        0.004 -0.13947731 -0.09884521 #> 3        0.018  0.21507002  0.01754043 #> 4        0.058  0.09450422 -0.30518697 #> 5        0.126  0.22713868  0.04683920 #> 6        0.052  0.16068469  0.07086942"},{"path":"/reference/local_g_spt.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Local Gi* for a spacetime cube — local_g_spt","title":"Calculate the Local Gi* for a spacetime cube — local_g_spt","text":"alternative implementation spdep::localG intended use spacetime cube.","code":""},{"path":"/reference/local_g_spt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Local Gi* for a spacetime cube — local_g_spt","text":"","code":"local_g_spt(x, times, nb, wt, n_locs, nsim)"},{"path":"/reference/local_g_spt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Local Gi* for a spacetime cube — local_g_spt","text":"x numeric vector times vector determining time order nb spacetime neighbors list wt weights list associated nb n_locs number unique locations nsim number simulations run calculating p_sim","code":""},{"path":"/reference/local_gstar.html","id":null,"dir":"Reference","previous_headings":"","what":"Local G* — local_gstar","title":"Local G* — local_gstar","text":"Calculate local Gi* statistic.","code":""},{"path":"/reference/local_gstar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local G* — local_gstar","text":"","code":"local_gstar(x, nb, wt, alternative = \"two.sided\", ...)  local_gstar_perm(x, nb, wt, nsim = 499, alternative = \"two.sided\", ...)"},{"path":"/reference/local_gstar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local G* — local_gstar","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. ... methods passed spdep::localG() spdep::localG_perm() nsim number simulations run.","code":""},{"path":"/reference/local_gstar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local G* — local_gstar","text":"data.frame columns: gi: observed statistic e_gi: permutation sample mean var_gi: permutation sample variance p_value: p-value using sample mean standard deviation p_folded_sim: p-value based implementation Pysal always assumes two-sided test taking minimum possible p-value skewness: sample skewness kurtosis: sample kurtosis","code":""},{"path":"/reference/local_gstar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local G* — local_gstar","text":"","code":"nb <- st_contiguity(guerry) wt <- st_weights(nb) x <- guerry$crime_pers  res <- local_gstar_perm(x, nb, wt) head(res) #>     gi_star cluster       e_gi       var_gi    std_dev    p_value p_sim #> 1  1.342359    High 0.01281212 2.828987e-06  0.8669055 0.38599380 0.408 #> 2  2.595578    High 0.01231754 2.534491e-06  2.1922882 0.02835870 0.036 #> 3  2.388872    High 0.01226355 2.355173e-06  2.0995950 0.03576448 0.044 #> 4 -1.848187     Low 0.01098208 2.788616e-06 -1.5970973 0.11024403 0.120 #> 5 -1.209736     Low 0.01146742 3.231416e-06 -1.2477284 0.21213055 0.212 #> 6 -2.034142     Low 0.01097455 1.880792e-06 -1.5710781 0.11616450 0.120 #>   p_folded_sim    skewness    kurtosis #> 1        0.204  0.11601646 -0.37505144 #> 2        0.018  0.13538275 -0.07345225 #> 3        0.022  0.07291573 -0.24293931 #> 4        0.060 -0.05713113 -0.15455315 #> 5        0.106  0.13602702 -0.40875762 #> 6        0.060  0.05456544 -0.27237752  res <- local_gstar(x, nb, wt) head(res) #> [1]  1.342359  2.595578  2.388872 -1.848187 -1.209736 -2.034142"},{"path":"/reference/local_jc_bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate local join count — local_jc_bv","title":"Bivariate local join count — local_jc_bv","text":"Bivariate local join count","code":""},{"path":"/reference/local_jc_bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate local join count — local_jc_bv","text":"","code":"local_jc_bv(x, z, nb, wt, nsim = 499)"},{"path":"/reference/local_jc_bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate local join count — local_jc_bv","text":"x binary variable either numeric logical z binary variable either numeric logical nb neighbors list object. wt default st_weights(nb, style = \"B\"). binary weights list created st_weights(nb, style = \"B\"). nsim number conditional permutation simulations","code":""},{"path":"/reference/local_jc_bv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate local join count — local_jc_bv","text":"data.frame two columns join_count p_sim number rows equal length arguments x, z, nb, wt.","code":""},{"path":"/reference/local_jc_bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bivariate local join count — local_jc_bv","text":"","code":"x <- as.integer(guerry$infants > 23574) z <- as.integer(guerry$donations > 10973) nb <- st_contiguity(guerry) wt <- st_weights(nb, style = \"B\") local_jc_bv(x, z, nb, wt) #>    join_count p_sim #> 1           0    NA #> 2           0    NA #> 3           0    NA #> 4           0    NA #> 5           0    NA #> 6           0    NA #> 7           0    NA #> 8           0    NA #> 9           0    NA #> 10          0    NA #> 11          0    NA #> 12          0    NA #> 13          0    NA #> 14          0    NA #> 15          0    NA #> 16          2 0.010 #> 17          0    NA #> 18          0    NA #> 19          0    NA #> 20          0    NA #> 21          0    NA #> 22          0    NA #> 23          0    NA #> 24          0    NA #> 25          0    NA #> 26          0    NA #> 27          1 0.122 #> 28          0    NA #> 29          0    NA #> 30          0    NA #> 31          0    NA #> 32          0    NA #> 33          0    NA #> 34          0    NA #> 35          0    NA #> 36          0    NA #> 37          0    NA #> 38          0    NA #> 39          0    NA #> 40          0    NA #> 41          0    NA #> 42          0    NA #> 43          0    NA #> 44          0    NA #> 45          0    NA #> 46          0    NA #> 47          0    NA #> 48          0    NA #> 49          0    NA #> 50          0    NA #> 51          0    NA #> 52          0    NA #> 53          0    NA #> 54          1 0.180 #> 55          0    NA #> 56          0    NA #> 57          0    NA #> 58          0    NA #> 59          0    NA #> 60          0    NA #> 61          0    NA #> 62          0    NA #> 63          0    NA #> 64          0    NA #> 65          0    NA #> 66          0    NA #> 67          0    NA #> 68          0    NA #> 69          0    NA #> 70          0    NA #> 71          0    NA #> 72          0    NA #> 73          0    NA #> 74          0    NA #> 75          2 0.018 #> 76          0    NA #> 77          0    NA #> 78          0    NA #> 79          0    NA #> 80          0    NA #> 81          2 0.004 #> 82          0    NA #> 83          0    NA #> 84          0    NA #> 85          0    NA"},{"path":"/reference/local_jc_uni.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute local univariate join count — local_jc_uni","title":"Compute local univariate join count — local_jc_uni","text":"univariate local join count statistic used identify clusters rarely occurring binary variables. binary variable interest occur less half time.","code":""},{"path":"/reference/local_jc_uni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute local univariate join count — local_jc_uni","text":"","code":"local_jc_uni(   fx,   chosen,   nb,   wt = st_weights(nb, style = \"B\"),   nsim = 499,   alternative = \"two.sided\",   iseed = NULL )"},{"path":"/reference/local_jc_uni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute local univariate join count — local_jc_uni","text":"fx binary variable either numeric logical chosen scalar character containing level fx considered observed value (1). nb neighbors list object. wt default st_weights(nb, style = \"B\"). binary weights list created st_weights(nb, style = \"B\"). nsim number conditional permutation simulations alternative default \"greater\". One \"less\" \"greater\". iseed default NULL, used set seed possible parallel RNGs","code":""},{"path":"/reference/local_jc_uni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute local univariate join count — local_jc_uni","text":"data.frame two columns join_count p_sim number rows equal length arguments x, nb, wt.","code":""},{"path":"/reference/local_jc_uni.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute local univariate join count — local_jc_uni","text":"local join count statistic requires binary weights list can generated st_weights(nb, style = \"B\"). Additionally, ensure binary variable interest rarely occurring half observations. P-values estimated using conditional permutation approach. creates reference distribution observed statistic compared. see Geoda Glossary. Calls spdep::local_joincount_uni().","code":""},{"path":"/reference/local_jc_uni.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute local univariate join count — local_jc_uni","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE)) {  res <- dplyr::transmute(   guerry,   top_crime = as.factor(crime_prop > 9000),   nb = st_contiguity(geometry),   wt = st_weights(nb, style = \"B\"),   jc = local_jc_uni(top_crime, \"TRUE\", nb, wt)) tidyr::unnest(res, jc)  } #> Simple feature collection with 85 features and 5 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 6 #>    top_crime nb        wt        BB `Pr(z != E(BBi))`                   geometry #>    <fct>     <nb>      <list> <dbl>             <dbl>             <MULTIPOLYGON> #>  1 TRUE      <int [4]> <dbl>      1             0.924 (((801150 2092615, 800669… #>  2 FALSE     <int [6]> <dbl>      0            NA     (((729326 2521619, 729320… #>  3 FALSE     <int [6]> <dbl>      0            NA     (((710830 2137350, 711746… #>  4 FALSE     <int [4]> <dbl>      0            NA     (((882701 1920024, 882408… #>  5 FALSE     <int [3]> <dbl>      0            NA     (((886504 1922890, 885733… #>  6 TRUE      <int [7]> <dbl>      2             0.944 (((747008 1925789, 746630… #>  7 FALSE     <int [3]> <dbl>      0            NA     (((818893 2514767, 818614… #>  8 TRUE      <int [3]> <dbl>      1             0.876 (((509103 1747787, 508820… #>  9 FALSE     <int [5]> <dbl>      0            NA     (((775400 2345600, 775068… #> 10 TRUE      <int [5]> <dbl>      2             0.608 (((626230 1810121, 626269… #> # ℹ 75 more rows"},{"path":"/reference/local_moran.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Local Moran's I Statistic — local_moran","title":"Calculate the Local Moran's I Statistic — local_moran","text":"Moran's calculated polygon based neighbor weight lists.","code":""},{"path":"/reference/local_moran.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Local Moran's I Statistic — local_moran","text":"","code":"local_moran(x, nb, wt, alternative = \"two.sided\", nsim = 499, ...)"},{"path":"/reference/local_moran.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Local Moran's I Statistic — local_moran","text":"x numeric vector. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). alternative default \"two.sided\". one \"greater\", \"less\", \"two.sided\" specify alternative hypothesis. nsim number simulations run. ... See ?spdep::localmoran_perm() options.","code":""},{"path":"/reference/local_moran.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Local Moran's I Statistic — local_moran","text":"data.frame containing columns ii, eii, var_ii, z_ii, p_ii, p_ii_sim, p_folded_sim. details please see spdep::localmoran_perm().","code":""},{"path":"/reference/local_moran.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Local Moran's I Statistic — local_moran","text":"local_moran() calls spdep::localmoran_perm() calculates Moran polygon. well provide simulated p-values.","code":""},{"path":[]},{"path":"/reference/local_moran.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Local Moran's I Statistic — local_moran","text":"","code":"local_moran(guerry_nb$crime_pers, guerry_nb$nb, guerry_nb$wt) #>              ii           eii       var_ii        z_ii        p_ii p_ii_sim #> 1   0.522264520 -2.408047e-02 0.3258940389  0.95703705 0.338548553    0.360 #> 2   0.828016509  3.105957e-02 0.1272122969  2.23444829 0.025453591    0.028 #> 3   0.803539971 -3.987460e-03 0.1450022324  2.12065460 0.033950879    0.044 #> 4   0.741889657  3.976254e-03 0.2225556195  1.56417779 0.117775821    0.076 #> 5   0.231187184  1.730079e-03 0.0377776702  1.18054874 0.237782036    0.276 #> 6   0.838909799 -6.666156e-02 0.2865830301  1.69159909 0.090722441    0.108 #> 7   0.622605215 -9.351619e-02 1.2442898879  0.64198646 0.520881972    0.516 #> 8   1.646789439 -7.708404e-02 1.1107090107  1.63570598 0.101901138    0.104 #> 9  -0.019758073  7.642344e-04 0.0005011734 -0.91671043 0.359294397    0.404 #> 10  0.695261432  3.043380e-03 0.0635252403  2.74643777 0.006024632    0.012 #> 11  1.728228681 -4.462139e-02 0.3615186387  2.94853754 0.003192814    0.008 #> 12  0.831530992 -1.924987e-02 0.2574007981  1.67692164 0.093557806    0.068 #> 13 -0.216110795 -3.485924e-03 0.0341808624 -1.15006545 0.250116917    0.280 #> 14  0.294784885 -1.651847e-03 0.0110543556  2.81945587 0.004810514    0.008 #> 15 -0.187033812 -2.897899e-02 0.0922659616 -0.52033975 0.602826796    0.576 #> 16 -0.047760501  6.591588e-03 0.0055675095 -0.72842654 0.466352522    0.520 #> 17  0.252948279  5.635657e-03 0.0126876085  2.19561605 0.028119436    0.044 #> 18  0.055058947 -1.521321e-02 0.0633659047  0.27916148 0.780120902    0.780 #> 19  0.872358990 -4.721759e-02 0.3992400429  1.45536142 0.145569232    0.168 #> 20  0.845313303  6.452693e-02 0.4502980837  1.16354229 0.244609549    0.272 #> 21  0.544842074 -5.256889e-02 0.8790161461  0.63719852 0.523995538    0.504 #> 22 -0.051046792 -1.544307e-03 0.0062971672 -0.62381295 0.532750433    0.556 #> 23 -0.689130071 -1.580395e-02 0.6676122694 -0.82406849 0.409900645    0.404 #> 24  0.686933419 -1.257361e-02 0.1860041742  1.62192488 0.104819434    0.080 #> 25 -0.106623626  2.821987e-03 0.0912399294 -0.36233133 0.717104449    0.700 #> 26  0.039027064 -4.002331e-03 0.0063800086  0.53870947 0.590087340    0.604 #> 27  1.129525109  3.120290e-02 0.9436273603  1.13065342 0.258200993    0.276 #> 28  1.182045274 -4.575685e-02 0.1419146924  3.25922769 0.001117160    0.004 #> 29  0.163959819 -7.611761e-04 0.0048145826  2.37393943 0.017599437    0.020 #> 30  0.069859097 -3.666453e-03 0.0058109235  0.96452991 0.334780321    0.400 #> 31  0.021778578 -2.519572e-03 0.0809302554  0.08541177 0.931934033    0.916 #> 32  1.012163106 -5.855668e-02 0.2522501986  2.13186681 0.033017797    0.048 #> 33  0.279597476  7.134779e-03 0.0158028218  2.16740329 0.030204116    0.044 #> 34  0.428197017  2.489584e-02 0.4861576344  0.57841684 0.562982726    0.608 #> 35 -0.102477591 -1.514061e-03 0.0026260367 -1.97021732 0.048813469    0.060 #> 36  0.015833610 -6.073850e-03 0.0045715247  0.32401229 0.745928732    0.796 #> 37  0.561451620 -1.492566e-02 0.1478899084  1.49877894 0.133930990    0.148 #> 38 -0.027912803 -3.038966e-03 0.0239512297 -0.16072331 0.872311328    0.828 #> 39  0.112523886 -2.614343e-03 0.0054243212  1.56331627 0.117978224    0.112 #> 40 -0.083982431 -3.359011e-02 0.1621159520 -0.12515594 0.900400095    0.992 #> 41  0.285172503 -1.741375e-02 0.0615599074  1.21955171 0.222634862    0.244 #> 42 -0.049545329 -9.886557e-05 0.0019303732 -1.12541992 0.260411135    0.284 #> 43 -0.016027706 -3.539312e-03 0.0135392326 -0.10732714 0.914529451    0.916 #> 44  0.840170458 -4.246787e-02 0.6658084959  1.08170320 0.279384429    0.292 #> 45 -0.162657608  4.260103e-03 0.0316424446 -0.93835550 0.348061745    0.372 #> 46  1.616626620 -1.153486e-01 0.5160278502  2.41104380 0.015906938    0.016 #> 47  0.401435540 -2.206250e-03 0.2106435273  0.87947209 0.379145357    0.404 #> 48  0.872608337 -7.550110e-02 0.5033705248  1.33633265 0.181440569    0.220 #> 49 -0.471949223  1.721254e-03 0.0591416866 -1.94773319 0.051446897    0.068 #> 50  0.265466518 -1.132465e-02 0.1286539554  0.77168606 0.440300386    0.440 #> 51  1.441699896 -2.363008e-02 0.2651858469  2.84551097 0.004434023    0.008 #> 52 -0.383762557 -3.629025e-02 0.1817484500 -0.81505111 0.415043055    0.456 #> 53  0.392685859  8.569075e-03 0.0756353677  1.39669257 0.162506039    0.168 #> 54  0.319995929  2.483578e-03 0.0549454822  1.35454872 0.175561382    0.172 #> 55  0.069614844  1.858600e-02 0.6311830176  0.06423002 0.948787074    0.936 #> 56  0.410365993 -1.556149e-03 0.0854420288  1.40922183 0.158769585    0.160 #> 57  0.988650255  5.737763e-03 0.2606203940  1.92535429 0.054185050    0.084 #> 58  0.205022085  3.157640e-03 0.2053067850  0.44551074 0.655950699    0.696 #> 59  0.723039856 -1.080587e-02 0.2258413719  1.54419812 0.122540344    0.140 #> 60  0.608607689  2.916701e-02 0.1003802451  1.82887850 0.067417812    0.080 #> 61 -0.179708687 -9.149333e-04 0.0234758637 -1.16692126 0.243242169    0.284 #> 62  0.232341838 -6.865494e-03 0.0668863931  0.92492304 0.355005940    0.408 #> 63  0.287892902 -3.106831e-02 0.3521648027  0.53748321 0.590933881    0.624 #> 64  2.274753084 -3.391835e-02 1.5298598129  1.86653574 0.061966448    0.060 #> 65  0.539130024 -2.803069e-02 0.2604061834  1.11142586 0.266385086    0.284 #> 66  1.051798136  5.767215e-03 1.5783977497  0.83259979 0.405070479    0.444 #> 67 -0.131392170  2.350544e-03 0.0060086121 -1.72537320 0.084460238    0.088 #> 68  0.138190992 -8.946973e-04 0.0207867405  0.96469327 0.334698466    0.356 #> 69  1.046159211 -1.649873e-02 0.2014216127  2.36777515 0.017895408    0.036 #> 70  1.253265453 -4.535060e-02 0.5616496253  1.73279837 0.083131513    0.088 #> 71  0.299578515 -7.598486e-03 0.3112323719  0.55061281 0.581899122    0.632 #> 72 -0.169627902  4.206607e-03 0.0157624405 -1.38459981 0.166174871    0.144 #> 73 -0.042159110  8.469980e-03 0.0121083371 -0.46010597 0.645440157    0.704 #> 74  0.036829436 -1.518011e-03 0.1951306590  0.08681079 0.930821913    0.968 #> 75 -0.055736811 -4.437046e-03 0.0092728157 -0.53273295 0.594218454    0.528 #> 76  1.180394095 -3.011292e-02 0.6189671425  1.53862758 0.123895241    0.144 #> 77  0.782521216 -6.870006e-03 0.1737712568  1.89366574 0.058269392    0.064 #> 78  0.529916604 -9.555951e-03 0.0855055212  1.84489764 0.065052430    0.080 #> 79  0.861411539  1.698268e-03 0.2547629153  1.70327796 0.088516064    0.096 #> 80  0.895182573 -2.239064e-04 0.1314355344  2.46981165 0.013518421    0.020 #> 81  0.025800751  2.035884e-03 0.0040921060  0.37150267 0.710263167    0.708 #> 82 -0.330384096 -2.009793e-02 0.0793669109 -1.10139393 0.270725248    0.252 #> 83 -0.310472511  2.922122e-02 0.0426785634 -1.64430596 0.100113019    0.108 #> 84  0.001292507 -1.330070e-03 0.0038581747  0.04222185 0.966321841    0.972 #> 85 -0.126709946 -1.214443e-02 0.0154350808 -0.92214550 0.356452687    0.344 #>    p_folded_sim      skewness    kurtosis      mean    median     pysal #> 1         0.180  0.0447839034  0.07467761 High-High High-High High-High #> 2         0.014  0.0547195380  0.07060433 High-High High-High High-High #> 3         0.022  0.1276143117 -0.14231488 High-High High-High High-High #> 4         0.038 -0.1997153231 -0.23780937   Low-Low   Low-Low   Low-Low #> 5         0.138 -0.2215406092 -0.28799341   Low-Low   Low-Low   Low-Low #> 6         0.054  0.0003814484  0.51344578   Low-Low   Low-Low   Low-Low #> 7         0.258  0.1975144354 -0.01339371 High-High High-High High-High #> 8         0.052 -0.0936284407 -0.34746868   Low-Low   Low-Low   Low-Low #> 9         0.202 -0.0882729254 -0.43594465  Low-High High-High  Low-High #> 10        0.006 -0.1412852042  0.25813077   Low-Low   Low-Low   Low-Low #> 11        0.004  0.0200481496 -0.30630176   Low-Low   Low-Low   Low-Low #> 12        0.034 -0.1029220634 -0.26614907   Low-Low   Low-Low   Low-Low #> 13        0.140 -0.0077300217 -0.29342101  Low-High  Low-High  Low-High #> 14        0.004 -0.0609937674 -0.09585427   Low-Low   Low-Low   Low-Low #> 15        0.288  0.0395798003  0.07762154  High-Low  High-Low  High-Low #> 16        0.260  0.0390862060 -0.22764713  Low-High  Low-High  Low-High #> 17        0.022  0.1263540354  0.02898633 High-High High-High High-High #> 18        0.390  0.0844305385 -0.01082536   Low-Low   Low-Low   Low-Low #> 19        0.084  0.1690310302 -0.18906547 High-High High-High High-High #> 20        0.136  0.1279130074 -0.16833910 High-High High-High High-High #> 21        0.252  0.1782153314 -0.06360293 High-High High-High High-High #> 22        0.278  0.1256259076 -0.12225661  High-Low  High-Low  High-Low #> 23        0.202 -0.0873245788 -0.18752595  Low-High  Low-High  Low-High #> 24        0.040 -0.2407711578 -0.23937529   Low-Low   Low-Low   Low-Low #> 25        0.350 -0.0713941348 -0.13466187  Low-High   Low-Low  Low-High #> 26        0.302  0.1112572584 -0.25517140 High-High  High-Low High-High #> 27        0.138  0.2417770828 -0.21910692 High-High High-High High-High #> 28        0.002  0.0035827413 -0.21672509   Low-Low   Low-Low   Low-Low #> 29        0.010 -0.1017911295  0.06941740   Low-Low   Low-Low   Low-Low #> 30        0.200 -0.0591336906 -0.43403759   Low-Low   Low-Low   Low-Low #> 31        0.458  0.1371605569 -0.19645816  High-Low  High-Low High-High #> 32        0.024 -0.0496895491 -0.07597735   Low-Low   Low-Low   Low-Low #> 33        0.022  0.1282138369 -0.20779758 High-High High-High High-High #> 34        0.304 -0.0694930106 -0.37313303 High-High High-High High-High #> 35        0.030 -0.1555370564  0.07442723  Low-High High-High  Low-High #> 36        0.398 -0.1904590349 -0.27008184   Low-Low   Low-Low   Low-Low #> 37        0.074  0.0533621755 -0.19010140 High-High High-High High-High #> 38        0.414 -0.1359369486  0.17404428  Low-High   Low-Low  Low-High #> 39        0.056  0.0282570519  0.37422615 High-High High-High High-High #> 40        0.496  0.4441672088 -0.09366914  High-Low  High-Low  High-Low #> 41        0.122 -0.1091864843 -0.38185845   Low-Low   Low-Low   Low-Low #> 42        0.142 -0.1696748859 -0.10390946  Low-High High-High  Low-High #> 43        0.458 -0.1015365790 -0.19500889   Low-Low   Low-Low  Low-High #> 44        0.146 -0.1196930287 -0.20045504   Low-Low   Low-Low   Low-Low #> 45        0.186  0.0469779705 -0.11097950  High-Low  High-Low  High-Low #> 46        0.008 -0.1553046007  0.03528647   Low-Low   Low-Low   Low-Low #> 47        0.202  0.2354218717 -0.25199426 High-High High-High High-High #> 48        0.110  0.2714359288 -0.23872512 High-High High-High High-High #> 49        0.034 -0.2994939928 -0.19289409  Low-High  Low-High  Low-High #> 50        0.220  0.1921660142 -0.14487982 High-High High-High High-High #> 51        0.004 -0.0681885595 -0.28326386 High-High High-High High-High #> 52        0.228  0.1497041606 -0.43204095  High-Low  High-Low  High-Low #> 53        0.084  0.1468295086  0.13984449 High-High High-High High-High #> 54        0.086  0.2366817369 -0.05272854 High-High High-High High-High #> 55        0.468 -0.1118999749 -0.19193833   Low-Low   Low-Low   Low-Low #> 56        0.080  0.0646290251 -0.15386973 High-High High-High High-High #> 57        0.042  0.2577646870 -0.36802220 High-High High-High High-High #> 58        0.348  0.0841438856 -0.12179510 High-High  High-Low High-High #> 59        0.070  0.0939878059 -0.30306676 High-High High-High High-High #> 60        0.040  0.1242595109 -0.39989796 High-High High-High High-High #> 61        0.142 -0.0145574956 -0.45461698  Low-High  Low-High  Low-High #> 62        0.204  0.0054830270 -0.37601615   Low-Low   Low-Low   Low-Low #> 63        0.312 -0.1414843747 -0.05093919   Low-Low   Low-Low   Low-Low #> 64        0.030 -0.1729164733 -0.49003993   Low-Low   Low-Low   Low-Low #> 65        0.142 -0.0519364125 -0.22207611   Low-Low   Low-Low   Low-Low #> 66        0.222 -0.2501288374 -0.39333472   Low-Low   Low-Low   Low-Low #> 67        0.044 -0.0657404983  0.02498504  Low-High High-High  Low-High #> 68        0.178  0.2131337340 -0.24135823 High-High High-High High-High #> 69        0.018  0.1411788429 -0.25037070 High-High High-High High-High #> 70        0.044  0.1486030751 -0.20502785 High-High High-High High-High #> 71        0.316 -0.0108257724 -0.61585230   Low-Low   Low-Low   Low-Low #> 72        0.072 -0.1845987380  0.28888211  Low-High  Low-High  Low-High #> 73        0.352  0.1095690674 -0.23483343  High-Low  High-Low  High-Low #> 74        0.484  0.0445389239  0.05565743   Low-Low   Low-Low   Low-Low #> 75        0.264 -0.0866064406 -0.13375645  Low-High  Low-High  Low-High #> 76        0.072  0.0551602822 -0.14377869 High-High High-High High-High #> 77        0.032 -0.0388671622  0.01361079   Low-Low   Low-Low   Low-Low #> 78        0.040  0.0676668124 -0.24386037   Low-Low   Low-Low   Low-Low #> 79        0.048  0.0021329633  0.10381406   Low-Low   Low-Low   Low-Low #> 80        0.010  0.0586875582 -0.23181054   Low-Low   Low-Low   Low-Low #> 81        0.354  0.0320591332 -0.25122083 High-High High-High High-High #> 82        0.126  0.0079970199  0.06241232  Low-High  Low-High  Low-High #> 83        0.054 -0.1306714360  0.08098407  Low-High  Low-High  Low-High #> 84        0.486 -0.1981019244  0.20310852   Low-Low  High-Low   Low-Low #> 85        0.172 -0.0545684047 -0.33928109  Low-High  Low-High  Low-High"},{"path":"/reference/local_moran_bv.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"Given two continuous numeric variables, calculate bivariate Local Moran's .","code":""},{"path":"/reference/local_moran_bv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"","code":"local_moran_bv(x, y, nb, wt, nsim = 499)"},{"path":"/reference/local_moran_bv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"x numeric vector length y. y numeric vector length x. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). nsim number simulations run.","code":""},{"path":"/reference/local_moran_bv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"data.frame containing two columns Ib p_sim containing local bivariate Moran's simulated p-values respectively.","code":""},{"path":"/reference/local_moran_bv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"Bivariate Local Moran, like global counterpart, evaluates value x observation spatial neighbors' value y. value $$I_i^B$$ just xi * Wyi. , simpler words local bivariate Moran result multiplying x spatial lag y. Formally defined \\( I_i^B= cx_i\\Sigma_j{w_{ij}y_j} \\)","code":""},{"path":"/reference/local_moran_bv.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"Local Spatial Autocorrelation (3): Multivariate Local Spatial Autocorrelation, Luc Anselin","code":""},{"path":[]},{"path":"/reference/local_moran_bv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Local Bivariate Moran's I Statistic — local_moran_bv","text":"","code":"x <- guerry_nb$crime_pers y <- guerry_nb$wealth nb <- guerry_nb$nb wt <- guerry_nb$wt local_moran_bv(x, y, nb, wt) #>              Ib p_sim #> 1   0.093506129 0.416 #> 2  -0.840144689 0.002 #> 3   0.293390275 0.228 #> 4  -0.782969282 0.034 #> 5  -0.343051282 0.026 #> 6  -0.751763780 0.058 #> 7  -1.212286959 0.168 #> 8   0.494768137 0.346 #> 9   0.050875987 0.012 #> 10 -0.033508122 0.404 #> 11  0.119135965 0.398 #> 12 -0.027058053 0.482 #> 13  0.189608296 0.120 #> 14 -0.184931534 0.034 #> 15  0.186274796 0.260 #> 16 -0.042411941 0.302 #> 17  0.006353979 0.488 #> 18 -0.408271216 0.050 #> 19 -0.115344980 0.440 #> 20  0.130059701 0.444 #> 21  1.683274652 0.036 #> 22 -0.003842500 0.486 #> 23 -1.004957821 0.122 #> 24 -1.104136137 0.000 #> 25  0.857180921 0.002 #> 26 -0.169492824 0.004 #> 27  0.834090623 0.186 #> 28 -0.171464343 0.318 #> 29 -0.034233828 0.348 #> 30 -0.051026184 0.232 #> 31 -0.046850788 0.440 #> 32  0.334455413 0.270 #> 33  0.080264717 0.242 #> 34  0.685071940 0.178 #> 35  0.001704856 0.498 #> 36 -0.079714992 0.102 #> 37  0.137434262 0.356 #> 38  0.125025064 0.192 #> 39 -0.068341930 0.192 #> 40  0.504579881 0.096 #> 41 -0.319036396 0.070 #> 42 -0.016497540 0.352 #> 43  0.225196989 0.026 #> 44 -0.224572220 0.368 #> 45 -0.003990683 0.442 #> 46 -1.017640129 0.084 #> 47  0.367618246 0.200 #> 48 -0.550574797 0.248 #> 49  0.441828404 0.032 #> 50 -0.088146734 0.398 #> 51 -0.190742450 0.336 #> 52  0.537482661 0.112 #> 53 -0.039104825 0.414 #> 54  0.305236945 0.072 #> 55 -0.337570608 0.330 #> 56 -0.155974076 0.264 #> 57 -0.526846963 0.182 #> 58 -1.393680416 0.000 #> 59 -0.832978265 0.024 #> 60 -0.326847547 0.152 #> 61 -0.269459435 0.038 #> 62 -0.443421284 0.028 #> 63 -0.158620813 0.392 #> 64 -0.066683215 0.480 #> 65 -0.790102037 0.074 #> 66 -1.406140486 0.156 #> 67 -0.058461082 0.228 #> 68 -0.004884983 0.488 #> 69 -0.125083947 0.342 #> 70 -1.236566942 0.044 #> 71  1.282709560 0.004 #> 72  0.218277696 0.040 #> 73 -0.366089264 0.000 #> 74  1.371117985 0.002 #> 75 -0.075151611 0.206 #> 76 -1.560168225 0.024 #> 77  0.658190968 0.078 #> 78  0.246687028 0.236 #> 79 -0.139720645 0.412 #> 80 -0.206370145 0.294 #> 81 -0.003905568 0.460 #> 82 -0.205045471 0.178 #> 83 -0.534172545 0.004 #> 84 -0.046631364 0.216 #> 85  0.279224938 0.008"},{"path":"/reference/local_moran_bv_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","title":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","text":"Calculate Local Bivariate Moran Statistic","code":""},{"path":"/reference/local_moran_bv_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","text":"","code":"local_moran_bv_calc(x, y, nb, wt)"},{"path":"/reference/local_moran_bv_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Local Bivariate Moran Statistic — local_moran_bv_calc","text":"x numeric vector length y. y numeric vector length x.","code":""},{"path":"/reference/local_moran_bv_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","title":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","text":"Local Bivariate Moran's spdep implementation","code":""},{"path":"/reference/local_moran_bv_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","text":"","code":"local_moran_bv_impl(x, y, listw, nsim)"},{"path":"/reference/local_moran_bv_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Bivariate Moran's I spdep implementation — local_moran_bv_impl","text":"x numeric vector length y. y numeric vector length x. listw listw object example created nb2listw(). nsim number simulations run.","code":""},{"path":"/reference/local_moran_bv_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","title":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","text":"Local Bivariate Moran's conditional permutation implementation","code":""},{"path":"/reference/local_moran_bv_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","text":"","code":"local_moran_bv_perm_impl(x, y, listw)"},{"path":"/reference/local_moran_bv_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Bivariate Moran's I conditional permutation implementation — local_moran_bv_perm_impl","text":"x numeric vector length y. y numeric vector length x. listw listw object example created nb2listw().","code":""},{"path":"/reference/losh.html","id":null,"dir":"Reference","previous_headings":"","what":"Local spatial heteroscedacity — losh","title":"Local spatial heteroscedacity — losh","text":"Local spatial heteroscedacity","code":""},{"path":"/reference/losh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local spatial heteroscedacity — losh","text":"","code":"losh(x, nb, wt, a = 2, ...)  losh_perm(x, nb, wt, a = 2, nsim = 499, ...)"},{"path":"/reference/losh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local spatial heteroscedacity — losh","text":"x numeric vector. nb neighbor list example created st_contiguity() wt weights list example created st_weights() exponent applied local residuals ... methods passed spdep::LOSH nsim number simulations run","code":""},{"path":"/reference/losh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local spatial heteroscedacity — losh","text":"data.frame columns hi: observed statistic e_hi: sample average var_hi: sample variance z_hi approximately Chi-square distributed test statistic x_bar_i: local spatially weight mean observation ei: residuals","code":""},{"path":"/reference/losh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local spatial heteroscedacity — losh","text":"","code":"nb <- st_contiguity(guerry) wt <- st_weights(nb) x <- guerry$crime_pers losh(x, nb, wt) #>            hi e_hi    var_hi       z_hi  x_bar_i           ei #> 1  0.42563150    1 0.3894939  2.1855618 23047.50 3.390151e+07 #> 2  2.07958219    1 0.2532512 16.4230798 26919.67 4.811734e+05 #> 3  1.84873198    1 0.2532512 14.5999870 26195.50 3.041522e+05 #> 4  0.06131293    1 0.3894939  0.3148338 14401.25 2.149889e+06 #> 5  0.03499988    1 0.5257366  0.1331461 15038.67 5.999234e+06 #> 6  0.43681771    1 0.2143247  4.0762239 15749.00 3.937563e+07 #> 7  1.02195445    1 0.5257366  3.8877049 22111.67 1.713830e+08 #> 8  0.62524134    1 0.5257366  2.3785344 13672.33 5.624000e+07 #> 9  1.38724561    1 0.3077483  9.0154567 22859.20 1.060935e+07 #> 10 0.61603841    1 0.3077483  4.0035215 11475.20 1.740392e+07 #> 11 0.83487574    1 0.2143247  7.7907566 12200.14 1.571443e+07 #> 12 0.06091759    1 0.5257366  0.2317418 13278.67 1.698678e+04 #> 13 1.02979145    1 0.5257366  3.9175184 24734.00 5.122265e+07 #> 14 1.09853046    1 0.2532512  8.6754221 11752.83 3.990659e+07 #> 15 1.02984407    1 0.3077483  6.6927691 17992.60 4.860042e+07 #> 16 0.52205384    1 0.3077483  3.3927328 21974.40 1.064325e+07 #> 17 1.84431404    1 0.2532512 14.5650971 26711.00 2.281973e+07 #> 18 2.56737439    1 0.2532512 20.2753201 19344.00 1.666272e+07 #> 19 0.27138661    1 0.2143247  2.5324810 23696.71 7.326137e+07 #> 20 0.39291206    1 0.5257366  1.4947106 25108.67 1.223834e+07 #> 21 1.29241253    1 0.2532512 10.2065666 21643.17 2.362625e+08 #> 22 1.33769567    1 0.2143247 12.4828892 18306.00 1.075184e+07 #> 23 0.04265707    1 0.7982221  0.1068802 24280.00 1.617984e+08 #> 24 0.29390902    1 0.3077483  1.9100612 14451.60 1.114291e+06 #> 25 1.09084664    1 0.2532512  8.6147407 21047.67 3.909584e+07 #> 26 1.04281881    1 0.2532512  8.2354506 21421.33 2.844444e+03 #> 27 0.22639201    1 0.7982221  0.5672407 25961.50 1.529201e+07 #> 28 0.42373924    1 0.2532512  3.3463949 10869.83 5.040773e+06 #> 29 0.55413216    1 0.2532512  4.3761467 13415.67 2.731456e+07 #> 30 0.52195360    1 0.2532512  4.1220230 17172.17 2.160410e+06 #> 31 0.48399476    1 0.3894939  2.4852494 20238.25 1.488224e+07 #> 32 0.29529066    1 0.3894939  1.5162787 12504.25 9.594506e+04 #> 33 0.72023929    1 0.2532512  5.6879442 26723.00 2.102222e+07 #> 34 2.31220222    1 0.2532512 18.2601494 21772.83 1.130217e+08 #> 35 2.02985746    1 0.3077483 13.1916741 26462.20 5.374649e+07 #> 36 0.98783506    1 0.2532512  7.8012276 19252.00 2.180890e+05 #> 37 1.64645940    1 0.3077483 10.7000399 24683.20 2.364829e+06 #> 38 0.38908276    1 0.3894939  1.9978888 20607.25 8.527860e+06 #> 39 1.41460149    1 0.2532512 11.1715292 24412.00 9.734400e+06 #> 40 0.56981855    1 0.2143247  5.3173393 19373.71 6.589033e+07 #> 41 1.27709481    1 0.3077483  8.2996067 16000.20 2.883204e+04 #> 42 0.61384968    1 0.3894939  3.1520374 23993.25 2.189538e+07 #> 43 0.53773204    1 0.2143247  5.0179197 20337.86 6.842709e+06 #> 44 0.58983165    1 0.2532512  4.6580762 16818.67 1.195888e+08 #> 45 0.78377645    1 0.2532512  6.1897160 17113.83 3.428298e+07 #> 46 0.60345256    1 0.3077483  3.9217283 13013.00 2.812181e+07 #> 47 1.00328782    1 0.1851298 10.8387489 22133.00 5.713848e+07 #> 48 0.65819988    1 0.3894939  3.3797698 24093.75 4.877975e+07 #> 49 1.05152963    1 0.2532512  8.3042426 25661.67 1.011969e+08 #> 50 0.93808660    1 0.2532512  7.4083492 22190.17 1.632833e+07 #> 51 1.36638049    1 0.3077483  8.8798580 29030.00 4.886010e+05 #> 52 0.53166821    1 0.3894939  2.7300463 16951.00 9.453673e+07 #> 53 2.31922282    1 0.3077483 15.0722069 24509.00 4.000000e+00 #> 54 0.53104812    1 0.3894939  2.7268623 24982.75 2.778056e+06 #> 55 1.65957271    1 0.7982221  4.1581729 19491.50 5.385358e+07 #> 56 0.68162031    1 0.2532512  5.3829585 24176.00 8.299210e+05 #> 57 1.33364496    1 0.5257366  5.0734336 27639.67 8.094001e+05 #> 58 1.18539711    1 0.2532512  9.3614340 21274.33 4.768823e+07 #> 59 1.12893629    1 0.2532512  8.9155461 24510.33 1.458222e+07 #> 60 1.25289279    1 0.7982221  3.1392085 30166.00 4.991422e+07 #> 61 1.80441074    1 0.2532512 14.2499689 23459.00 3.847721e+07 #> 62 0.44309432    1 0.5257366  1.6856133 16184.00 2.894440e+05 #> 63 0.29915866    1 0.5257366  1.1380552 18002.00 3.339684e+07 #> 64 1.11027963    1 0.7982221  2.7818815 10910.00 1.748912e+07 #> 65 1.63760586    1 0.3894939  8.4088907 16251.25 1.554134e+07 #> 66 0.25142223    1 0.7982221  0.6299556 15572.00 6.771644e+07 #> 67 0.78098937    1 0.3894939  4.0102777 25884.25 5.028583e+07 #> 68 1.53711112    1 0.3077483  9.9894054 23020.60 4.645786e+05 #> 69 0.97710928    1 0.2143247  9.1180282 26495.00 3.594816e+06 #> 70 0.68191745    1 0.2532512  5.3853051 24690.50 8.505451e+07 #> 71 0.94434450    1 0.7982221  2.3661197 17339.00 1.151924e+07 #> 72 1.69938328    1 0.5257366  6.4647703 25522.33 5.137067e+07 #> 73 0.97749972    1 0.1851298 10.5601541 18970.00 1.043936e+07 #> 74 0.58088188    1 0.2532512  4.5873972 19701.83 5.219822e+07 #> 75 1.13689616    1 0.3077483  7.3884812 21841.00 1.184048e+07 #> 76 0.90616976    1 0.3077483  5.8890323 24520.40 8.229393e+07 #> 77 0.36532589    1 0.3077483  2.3741865 14025.80 1.013646e+06 #> 78 1.00546440    1 0.2532512  7.9404517 14565.17 5.055003e+04 #> 79 0.03176969    1 0.5257366  0.1208578 13306.67 2.613611e+04 #> 80 0.23983268    1 0.2532512  1.8940301 12579.00 9.940090e+05 #> 81 0.76525616    1 0.3894939  3.9294897 21529.50 4.935062e+05 #> 82 1.76009049    1 0.2532512 13.8999587 23474.50 7.164776e+07 #> 83 2.49737804    1 0.2532512 19.7225381 24373.17 6.588839e+07 #> 84 0.97788776    1 0.2532512  7.7226708 19900.50 1.135290e+06 #> 85 0.61500983    1 0.3077483  3.9968369 23373.60 2.881113e+07 losh(x, nb, wt, var_hi = FALSE) #>            hi  x_bar_i           ei #> 1  0.42563150 23047.50 3.390151e+07 #> 2  2.07958219 26919.67 4.811734e+05 #> 3  1.84873198 26195.50 3.041522e+05 #> 4  0.06131293 14401.25 2.149889e+06 #> 5  0.03499988 15038.67 5.999234e+06 #> 6  0.43681771 15749.00 3.937563e+07 #> 7  1.02195445 22111.67 1.713830e+08 #> 8  0.62524134 13672.33 5.624000e+07 #> 9  1.38724561 22859.20 1.060935e+07 #> 10 0.61603841 11475.20 1.740392e+07 #> 11 0.83487574 12200.14 1.571443e+07 #> 12 0.06091759 13278.67 1.698678e+04 #> 13 1.02979145 24734.00 5.122265e+07 #> 14 1.09853046 11752.83 3.990659e+07 #> 15 1.02984407 17992.60 4.860042e+07 #> 16 0.52205384 21974.40 1.064325e+07 #> 17 1.84431404 26711.00 2.281973e+07 #> 18 2.56737439 19344.00 1.666272e+07 #> 19 0.27138661 23696.71 7.326137e+07 #> 20 0.39291206 25108.67 1.223834e+07 #> 21 1.29241253 21643.17 2.362625e+08 #> 22 1.33769567 18306.00 1.075184e+07 #> 23 0.04265707 24280.00 1.617984e+08 #> 24 0.29390902 14451.60 1.114291e+06 #> 25 1.09084664 21047.67 3.909584e+07 #> 26 1.04281881 21421.33 2.844444e+03 #> 27 0.22639201 25961.50 1.529201e+07 #> 28 0.42373924 10869.83 5.040773e+06 #> 29 0.55413216 13415.67 2.731456e+07 #> 30 0.52195360 17172.17 2.160410e+06 #> 31 0.48399476 20238.25 1.488224e+07 #> 32 0.29529066 12504.25 9.594506e+04 #> 33 0.72023929 26723.00 2.102222e+07 #> 34 2.31220222 21772.83 1.130217e+08 #> 35 2.02985746 26462.20 5.374649e+07 #> 36 0.98783506 19252.00 2.180890e+05 #> 37 1.64645940 24683.20 2.364829e+06 #> 38 0.38908276 20607.25 8.527860e+06 #> 39 1.41460149 24412.00 9.734400e+06 #> 40 0.56981855 19373.71 6.589033e+07 #> 41 1.27709481 16000.20 2.883204e+04 #> 42 0.61384968 23993.25 2.189538e+07 #> 43 0.53773204 20337.86 6.842709e+06 #> 44 0.58983165 16818.67 1.195888e+08 #> 45 0.78377645 17113.83 3.428298e+07 #> 46 0.60345256 13013.00 2.812181e+07 #> 47 1.00328782 22133.00 5.713848e+07 #> 48 0.65819988 24093.75 4.877975e+07 #> 49 1.05152963 25661.67 1.011969e+08 #> 50 0.93808660 22190.17 1.632833e+07 #> 51 1.36638049 29030.00 4.886010e+05 #> 52 0.53166821 16951.00 9.453673e+07 #> 53 2.31922282 24509.00 4.000000e+00 #> 54 0.53104812 24982.75 2.778056e+06 #> 55 1.65957271 19491.50 5.385358e+07 #> 56 0.68162031 24176.00 8.299210e+05 #> 57 1.33364496 27639.67 8.094001e+05 #> 58 1.18539711 21274.33 4.768823e+07 #> 59 1.12893629 24510.33 1.458222e+07 #> 60 1.25289279 30166.00 4.991422e+07 #> 61 1.80441074 23459.00 3.847721e+07 #> 62 0.44309432 16184.00 2.894440e+05 #> 63 0.29915866 18002.00 3.339684e+07 #> 64 1.11027963 10910.00 1.748912e+07 #> 65 1.63760586 16251.25 1.554134e+07 #> 66 0.25142223 15572.00 6.771644e+07 #> 67 0.78098937 25884.25 5.028583e+07 #> 68 1.53711112 23020.60 4.645786e+05 #> 69 0.97710928 26495.00 3.594816e+06 #> 70 0.68191745 24690.50 8.505451e+07 #> 71 0.94434450 17339.00 1.151924e+07 #> 72 1.69938328 25522.33 5.137067e+07 #> 73 0.97749972 18970.00 1.043936e+07 #> 74 0.58088188 19701.83 5.219822e+07 #> 75 1.13689616 21841.00 1.184048e+07 #> 76 0.90616976 24520.40 8.229393e+07 #> 77 0.36532589 14025.80 1.013646e+06 #> 78 1.00546440 14565.17 5.055003e+04 #> 79 0.03176969 13306.67 2.613611e+04 #> 80 0.23983268 12579.00 9.940090e+05 #> 81 0.76525616 21529.50 4.935062e+05 #> 82 1.76009049 23474.50 7.164776e+07 #> 83 2.49737804 24373.17 6.588839e+07 #> 84 0.97788776 19900.50 1.135290e+06 #> 85 0.61500983 23373.60 2.881113e+07 losh_perm(x, nb, wt, nsim = 49) #>            hi  x_bar_i           ei p_sim #> 1  0.42563150 23047.50 3.390151e+07  0.78 #> 2  2.07958219 26919.67 4.811734e+05  0.04 #> 3  1.84873198 26195.50 3.041522e+05  0.06 #> 4  0.06131293 14401.25 2.149889e+06  0.96 #> 5  0.03499988 15038.67 5.999234e+06  0.98 #> 6  0.43681771 15749.00 3.937563e+07  0.86 #> 7  1.02195445 22111.67 1.713830e+08  0.40 #> 8  0.62524134 13672.33 5.624000e+07  0.66 #> 9  1.38724561 22859.20 1.060935e+07  0.20 #> 10 0.61603841 11475.20 1.740392e+07  0.68 #> 11 0.83487574 12200.14 1.571443e+07  0.60 #> 12 0.06091759 13278.67 1.698678e+04  0.96 #> 13 1.02979145 24734.00 5.122265e+07  0.50 #> 14 1.09853046 11752.83 3.990659e+07  0.28 #> 15 1.02984407 17992.60 4.860042e+07  0.42 #> 16 0.52205384 21974.40 1.064325e+07  0.76 #> 17 1.84431404 26711.00 2.281973e+07  0.08 #> 18 2.56737439 19344.00 1.666272e+07  0.04 #> 19 0.27138661 23696.71 7.326137e+07  0.96 #> 20 0.39291206 25108.67 1.223834e+07  0.80 #> 21 1.29241253 21643.17 2.362625e+08  0.24 #> 22 1.33769567 18306.00 1.075184e+07  0.24 #> 23 0.04265707 24280.00 1.617984e+08  0.92 #> 24 0.29390902 14451.60 1.114291e+06  0.86 #> 25 1.09084664 21047.67 3.909584e+07  0.30 #> 26 1.04281881 21421.33 2.844444e+03  0.32 #> 27 0.22639201 25961.50 1.529201e+07  0.82 #> 28 0.42373924 10869.83 5.040773e+06  0.80 #> 29 0.55413216 13415.67 2.731456e+07  0.68 #> 30 0.52195360 17172.17 2.160410e+06  0.82 #> 31 0.48399476 20238.25 1.488224e+07  0.72 #> 32 0.29529066 12504.25 9.594506e+04  0.82 #> 33 0.72023929 26723.00 2.102222e+07  0.64 #> 34 2.31220222 21772.83 1.130217e+08  0.02 #> 35 2.02985746 26462.20 5.374649e+07  0.02 #> 36 0.98783506 19252.00 2.180890e+05  0.48 #> 37 1.64645940 24683.20 2.364829e+06  0.12 #> 38 0.38908276 20607.25 8.527860e+06  0.84 #> 39 1.41460149 24412.00 9.734400e+06  0.14 #> 40 0.56981855 19373.71 6.589033e+07  0.74 #> 41 1.27709481 16000.20 2.883204e+04  0.30 #> 42 0.61384968 23993.25 2.189538e+07  0.62 #> 43 0.53773204 20337.86 6.842709e+06  0.76 #> 44 0.58983165 16818.67 1.195888e+08  0.82 #> 45 0.78377645 17113.83 3.428298e+07  0.54 #> 46 0.60345256 13013.00 2.812181e+07  0.58 #> 47 1.00328782 22133.00 5.713848e+07  0.44 #> 48 0.65819988 24093.75 4.877975e+07  0.62 #> 49 1.05152963 25661.67 1.011969e+08  0.42 #> 50 0.93808660 22190.17 1.632833e+07  0.38 #> 51 1.36638049 29030.00 4.886010e+05  0.20 #> 52 0.53166821 16951.00 9.453673e+07  0.68 #> 53 2.31922282 24509.00 4.000000e+00  0.02 #> 54 0.53104812 24982.75 2.778056e+06  0.72 #> 55 1.65957271 19491.50 5.385358e+07  0.28 #> 56 0.68162031 24176.00 8.299210e+05  0.58 #> 57 1.33364496 27639.67 8.094001e+05  0.28 #> 58 1.18539711 21274.33 4.768823e+07  0.40 #> 59 1.12893629 24510.33 1.458222e+07  0.44 #> 60 1.25289279 30166.00 4.991422e+07  0.30 #> 61 1.80441074 23459.00 3.847721e+07  0.06 #> 62 0.44309432 16184.00 2.894440e+05  0.76 #> 63 0.29915866 18002.00 3.339684e+07  0.86 #> 64 1.11027963 10910.00 1.748912e+07  0.28 #> 65 1.63760586 16251.25 1.554134e+07  0.38 #> 66 0.25142223 15572.00 6.771644e+07  0.86 #> 67 0.78098937 25884.25 5.028583e+07  0.50 #> 68 1.53711112 23020.60 4.645786e+05  0.18 #> 69 0.97710928 26495.00 3.594816e+06  0.48 #> 70 0.68191745 24690.50 8.505451e+07  0.74 #> 71 0.94434450 17339.00 1.151924e+07  0.30 #> 72 1.69938328 25522.33 5.137067e+07  0.16 #> 73 0.97749972 18970.00 1.043936e+07  0.36 #> 74 0.58088188 19701.83 5.219822e+07  0.82 #> 75 1.13689616 21841.00 1.184048e+07  0.32 #> 76 0.90616976 24520.40 8.229393e+07  0.58 #> 77 0.36532589 14025.80 1.013646e+06  0.82 #> 78 1.00546440 14565.17 5.055003e+04  0.38 #> 79 0.03176969 13306.67 2.613611e+04  0.96 #> 80 0.23983268 12579.00 9.940090e+05  0.96 #> 81 0.76525616 21529.50 4.935062e+05  0.48 #> 82 1.76009049 23474.50 7.164776e+07  0.10 #> 83 2.49737804 24373.17 6.588839e+07  0.02 #> 84 0.97788776 19900.50 1.135290e+06  0.42 #> 85 0.61500983 23373.60 2.881113e+07  0.72"},{"path":"/reference/moran_bv_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Bivariate Moran's I calculation — moran_bv_calc","title":"Global Bivariate Moran's I calculation — moran_bv_calc","text":"Global Bivariate Moran's calculation","code":""},{"path":"/reference/moran_bv_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Bivariate Moran's I calculation — moran_bv_calc","text":"","code":"moran_bv_calc(x, yj, wt)"},{"path":"/reference/moran_bv_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Bivariate Moran's I calculation — moran_bv_calc","text":"x numeric vector length nb. yj neighbor values y, length lengths nb. wt weights list created st_weights().","code":""},{"path":"/reference/moran_bv_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","title":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","text":"Global Bivariate Moran's spdep implementation","code":""},{"path":"/reference/moran_bv_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","text":"","code":"moran_bv_impl(x, y, listw, nsim)"},{"path":"/reference/moran_bv_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Bivariate Moran's I spdep implementation — moran_bv_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw(). nsim number simulations run.","code":""},{"path":"/reference/moran_bv_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","title":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","text":"Global Bivariate Moran's conditional permutation implementation","code":""},{"path":"/reference/moran_bv_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","text":"","code":"moran_bv_perm_impl(x, y, listw)"},{"path":"/reference/moran_bv_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global Bivariate Moran's I conditional permutation implementation — moran_bv_perm_impl","text":"x numeric vector length nb. y numeric vector length nb. listw listw object e.g. created recreate_listw().","code":""},{"path":"/reference/nb_match_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Local Neighbor Match Test — nb_match_test","title":"Local Neighbor Match Test — nb_match_test","text":"Implements Local Neighbor Match Test described Tobler's Law Multivariate World (Anselin Li, 2020).","code":""},{"path":"/reference/nb_match_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Local Neighbor Match Test — nb_match_test","text":"","code":"nb_match_test(   x,   nb,   wt = st_weights(nb),   k = 10,   nsim = 499,   scale = TRUE,   .method = \"euclidian\",   .p = 2 )"},{"path":"/reference/nb_match_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Local Neighbor Match Test — nb_match_test","text":"x numeric vector list numeric vectors equal length. nb neighbor list object example created st_contiguity(). wt weights list created st_weights(). k number neighbors identify attribute space. number neighbors provided st_knn. nsim number simulations run calculating simulated p-value. scale default TRUE. Whether x scaled . Note measures standardized. .method default \"euclidian\". distance measure passed stats::dist(). .p default 2. power Minkowski distance passed p argument stats::dist().","code":""},{"path":"/reference/nb_match_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Local Neighbor Match Test — nb_match_test","text":"data.frame columns n_shared (integer): number shared neighbors geographic attribute space nb_matches (list): matched neighbor indexes. element integer vector length ith observation n_shared knn_nb (list): neighbors attribute space probability (numeric): geometric probability observing number matches p_sim (numeric): folded simulated p-value","code":""},{"path":"/reference/nb_match_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Local Neighbor Match Test — nb_match_test","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE)) { library(magrittr) guerry %>%   dplyr::transmute(nb = st_knn(geometry, k = 10),          nmt = nb_match_test(list(crime_pers, literacy, suicides),                              nb, nsim = 999)) %>%   tidyr::unnest(nmt)  } #> ! Polygon provided. Using point on surface. #> Simple feature collection with 85 features and 6 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 7 #>    nb    n_shared nb_matches knn_nb probability p_sim                   geometry #>    <nb>     <int> <list>     <list>       <dbl> <dbl>             <MULTIPOLYGON> #>  1 <int>        1 <int [1]>  <int>      0.400   0.671 (((801150 2092615, 800669… #>  2 <int>        3 <int [3]>  <int>      0.0782  0.096 (((729326 2521619, 729320… #>  3 <int>        5 <int [5]>  <int>      0.00147 0.003 (((710830 2137350, 711746… #>  4 <int>        4 <int [4]>  <int>      0.0141  0.018 (((882701 1920024, 882408… #>  5 <int>        0 <int [0]>  <int>      0.260   0.262 (((886504 1922890, 885733… #>  6 <int>        0 <int [0]>  <int>      0.260   0.244 (((747008 1925789, 746630… #>  7 <int>        5 <int [5]>  <int>      0.00147 0.003 (((818893 2514767, 818614… #>  8 <int>        5 <int [5]>  <int>      0.00147 0.002 (((509103 1747787, 508820… #>  9 <int>        3 <int [3]>  <int>      0.0782  0.101 (((775400 2345600, 775068… #> 10 <int>        4 <int [4]>  <int>      0.0141  0.016 (((626230 1810121, 626269… #> # ℹ 75 more rows"},{"path":"/reference/nb_union.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Operations — nb_union","title":"Set Operations — nb_union","text":"Perform set operations element-wise two lists equal length.","code":""},{"path":"/reference/nb_union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Operations — nb_union","text":"","code":"nb_union(x, y)  nb_intersect(x, y)  nb_setdiff(x, y)"},{"path":"/reference/nb_union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Operations — nb_union","text":"x list class nb y list class nb","code":""},{"path":"/reference/nb_union.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Operations — nb_union","text":"list class nb","code":""},{"path":"/reference/nb_union.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set Operations — nb_union","text":"nb_union() returns union elements element x y nb_intersect() returns intersection elements element x y nb_setdiff() returns difference elements element x y","code":""},{"path":"/reference/nb_union.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set Operations — nb_union","text":"","code":"nb <- st_contiguity(guerry$geometry) nb_knn <- st_knn(guerry$geometry, k = 3) #> ! Polygon provided. Using point on surface. nb_setdiff(nb, nb_knn) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 176  #> Percentage nonzero weights: 2.435986  #> Average number of links: 2.070588  #> 16 regions with no links: #> 5 7 8 13 20 23 27 55 57 60 62 63 64 66 71 79 #> 10 disjoint connected subgraphs #> Non-symmetric neighbours list nb_union(nb, nb_knn) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 431  #> Percentage nonzero weights: 5.965398  #> Average number of links: 5.070588  #> Non-symmetric neighbours list nb_intersect(nb, nb_knn) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 244  #> Percentage nonzero weights: 3.377163  #> Average number of links: 2.870588  #> Non-symmetric neighbours list"},{"path":"/reference/nmt_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify matches between two neighbor lists — nmt_calc","title":"Identify matches between two neighbor lists — nmt_calc","text":"Identify matches two neighbor lists","code":""},{"path":"/reference/nmt_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify matches between two neighbor lists — nmt_calc","text":"","code":"nmt_calc(knn_nb, nb)"},{"path":"/reference/nmt_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify matches between two neighbor lists — nmt_calc","text":"knn_nb list length number observations used dataset nb list length knn_nb.","code":""},{"path":"/reference/nmt_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify matches between two neighbor lists — nmt_calc","text":"integer vector","code":""},{"path":"/reference/nmt_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Implementation of Neighbor Match Test — nmt_impl","title":"Implementation of Neighbor Match Test — nmt_impl","text":"Implementation Neighbor Match Test","code":""},{"path":"/reference/nmt_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implementation of Neighbor Match Test — nmt_impl","text":"","code":"nmt_impl(x, k, listw, nsim = 199, scale = TRUE, .method = \"euclidian\", .p = 2)"},{"path":"/reference/nmt_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implementation of Neighbor Match Test — nmt_impl","text":"x numeric vector list numeric vectors equal length. k number neighbors identify attribute space. number neighbors provided st_knn. nsim number simulations run calculating simulated p-value. scale default TRUE. Whether x scaled . Note measures standardized. .method default \"euclidian\". distance measure passed stats::dist(). .p default 2. power Minkowski distance passed p argument stats::dist().","code":""},{"path":"/reference/nmt_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Implementation of Neighbor Match Test — nmt_impl","text":"data frame containing columns: n_shared nb_matches knn_nb probability p_sim","code":""},{"path":"/reference/nmt_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Find conditionally permuted neighbor matches\nGiven a kNN attribute neighbor list and a listw object, find the number of matches given a conditional permutation. — nmt_perm_impl","title":"Find conditionally permuted neighbor matches\nGiven a kNN attribute neighbor list and a listw object, find the number of matches given a conditional permutation. — nmt_perm_impl","text":"Find conditionally permuted neighbor matches Given kNN attribute neighbor list listw object, find number matches given conditional permutation.","code":""},{"path":"/reference/nmt_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find conditionally permuted neighbor matches\nGiven a kNN attribute neighbor list and a listw object, find the number of matches given a conditional permutation. — nmt_perm_impl","text":"","code":"nmt_perm_impl(knn_nb, listw)"},{"path":"/reference/nmt_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find conditionally permuted neighbor matches\nGiven a kNN attribute neighbor list and a listw object, find the number of matches given a conditional permutation. — nmt_perm_impl","text":"knn_nb list numeric elements. example made dbscan::adjacencylist() listw listw object likely created recreate_listw.","code":""},{"path":"/reference/nmt_perm_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find conditionally permuted neighbor matches\nGiven a kNN attribute neighbor list and a listw object, find the number of matches given a conditional permutation. — nmt_perm_impl","text":"integer vector","code":""},{"path":"/reference/node_get_nbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Create node features from edges — node_get_nbs","title":"Create node features from edges — node_get_nbs","text":"Given tidygraph object, create list column edge data node node context.","code":""},{"path":"/reference/node_get_nbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create node features from edges — node_get_nbs","text":"","code":"node_get_nbs()  node_get_edge_list()  node_get_edge_col(edges, .var)"},{"path":"/reference/node_get_nbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create node features from edges — node_get_nbs","text":"edges edge list created node_get_edge_list() .var quoted name column edge context.","code":""},{"path":"/reference/node_get_nbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create node features from edges — node_get_nbs","text":"list column","code":""},{"path":"/reference/node_get_nbs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create node features from edges — node_get_nbs","text":"node_get_nbs(): creates neighbor list nodes context based adjacency list. returns nb class object neighboring nodes. Uses igraph::get.adjlist() node_get_edge_list(): creates edge list. edge list contains row index edge relationships edge context node. Uses igraph::get.adjedgelist(). node_get_edge_col(): creates list column containing edge attributes list column node context (much like find_xj()). Uses igraph::get.edge.attribute()","code":""},{"path":"/reference/node_get_nbs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create node features from edges — node_get_nbs","text":"","code":"if (interactive()) {   net <- sfnetworks::as_sfnetwork(     sfnetworks::roxel   )    dplyr::mutate(     net,     nb = node_get_nbs(),     edges = node_get_edge_list(),     types = node_get_edge_col(edges, \"type\")   ) }"},{"path":"/reference/pairwise_colocation.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Colocation Quotient — pairwise_colocation","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"Calculate pairwise colocation quotient (CLQ) two categorical variables using conditional permutation.","code":""},{"path":"/reference/pairwise_colocation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"","code":"pairwise_colocation(A, B, nb, nsim = 99)"},{"path":"/reference/pairwise_colocation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"character factor vector. B character factor vector. nb neighbors list e.g. created st_knn() st_contiguity() nsim default 99. integer representing many simulations run calculating simulated p-values.","code":""},{"path":"/reference/pairwise_colocation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"matrix rownames unique values column names unique values B simulated p-values form p_sim_{B}.","code":""},{"path":[]},{"path":"/reference/pairwise_colocation.html","id":"intuition","dir":"Reference","previous_headings":"","what":"Intuition","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"pairwise CLQ used test spatial directional association subcategories two vectors B. Compared cross-K metric join count statistic, pairwise CLQ can elucidate presence asymmetric relationship subcategories B. B can either separate categorical vectors categorical vector. \"null hypothesis CLQ-based analysis 'given clustering joint population, spatial association pairs categorical subsets.'\"","code":""},{"path":"/reference/pairwise_colocation.html","id":"definition","dir":"Reference","previous_headings":"","what":"Definition","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"pairwise colocation quotient defined \"ratio observed expected proportions B among 's nearest neighbors. Formally given \\(CLQ_{\\B} = \\frac{{C_{\\B} / N_A}}{N^{'}_{B} / (N - 1)}\\)\" \\(C_{\\B} = \\sum_{= 1}^{N_A}\\sum_{j = 1}^{v}\\frac{B_{ij}(1,0)}{v}\\).","code":""},{"path":"/reference/pairwise_colocation.html","id":"inference","dir":"Reference","previous_headings":"","what":"Inference","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"Inference done using conditional permutation suggested Anselin 1995 number replicates created. observed values compared replicates simulated p-value proportion cases observed extreme compared replicate. simulated p-value returns lower p-value either tail.","code":""},{"path":"/reference/pairwise_colocation.html","id":"interpretation","dir":"Reference","previous_headings":"","what":"Interpretation","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"Given CLQ ratio observed expected, interpret values larger one mean colocation expected null hypothesis spatial association. value smaller 0, interpret mean less colocation expected null.","code":""},{"path":"/reference/pairwise_colocation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise Colocation Quotient — pairwise_colocation","text":"","code":"A <- guerry$main_city B <- guerry$region nb <- st_knn(sf::st_geometry(guerry), 5) #> ! Polygon provided. Using point on surface. pairwise_colocation(B, A, nb) #>        1:Sm     2:Med      3:Lg p_sim_1:Sm p_sim_2:Med p_sim_3:Lg #> C 0.8894118 1.1250679 0.1976471       0.43        0.00       0.00 #> E 1.8776471 0.8514027 0.9882353       0.00        0.01       0.46 #> N 0.1976471 1.0794570 1.1858824       0.00        0.04       0.21 #> S 1.5811765 0.9122172 0.8894118       0.01        0.05       0.41 #> W 0.6917647 1.0338462 0.9882353       0.20        0.24       0.49 pairwise_colocation(B, B, nb, 199) #>           C         E         N         S         W p_sim_C p_sim_E p_sim_N #> C 3.5205882 0.3705882 0.4941176 0.3088235 0.5558824   0.000   0.000    0.00 #> E 0.4323529 3.8294118 0.4941176 0.4941176 0.0000000   0.005   0.000    0.01 #> N 0.4323529 0.5558824 3.9529412 0.0000000 0.3088235   0.000   0.025    0.00 #> S 0.3705882 0.5558824 0.0000000 3.9529412 0.3705882   0.000   0.005    0.00 #> W 0.5558824 0.0000000 0.3088235 0.4941176 3.8911765   0.005   0.000    0.00 #>   p_sim_S p_sim_W #> C    0.00   0.015 #> E    0.01   0.000 #> N    0.00   0.000 #> S    0.00   0.000 #> W    0.00   0.000"},{"path":"/reference/pairwise_colocation_calc.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise CLQ calculation — pairwise_colocation_calc","title":"Pairwise CLQ calculation — pairwise_colocation_calc","text":"Internal function calculate pairwise CQL.","code":""},{"path":"/reference/pairwise_colocation_calc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise CLQ calculation — pairwise_colocation_calc","text":"","code":"pairwise_colocation_calc(A, B, nb)"},{"path":"/reference/pairwise_colocation_calc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise CLQ calculation — pairwise_colocation_calc","text":"character factor vector. B character factor vector. nb neighbors list e.g. created st_knn() st_contiguity()","code":""},{"path":"/reference/pairwise_colocation_calc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise CLQ calculation — pairwise_colocation_calc","text":"matrix rownames values colnames B values","code":""},{"path":"/reference/pairwise_colocation_perm_impl.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise CLQ conditional permutation implementation — pairwise_colocation_perm_impl","title":"Pairwise CLQ conditional permutation implementation — pairwise_colocation_perm_impl","text":"Internal implementation pairwise CQL using conditional permutation. Functionally pairwise_colocation().","code":""},{"path":"/reference/pairwise_colocation_perm_impl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise CLQ conditional permutation implementation — pairwise_colocation_perm_impl","text":"","code":"pairwise_colocation_perm_impl(A, B, nb, nsim = 199)"},{"path":"/reference/pairwise_colocation_perm_impl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise CLQ conditional permutation implementation — pairwise_colocation_perm_impl","text":"character factor vector. B character factor vector. nb neighbors list e.g. created st_knn() st_contiguity() nsim default 99. integer representing many simulations run calculating simulated p-values.","code":""},{"path":"/reference/pairwise_colocation_perm_impl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise CLQ conditional permutation implementation — pairwise_colocation_perm_impl","text":"matrix used pairwise_colocation","code":""},{"path":"/reference/pct_nonzero.html","id":null,"dir":"Reference","previous_headings":"","what":"Percent Non-zero Neighbors — pct_nonzero","title":"Percent Non-zero Neighbors — pct_nonzero","text":"Calculate percentage non-zero neighbors neighbor list.","code":""},{"path":"/reference/pct_nonzero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Percent Non-zero Neighbors — pct_nonzero","text":"","code":"pct_nonzero(nb)"},{"path":"/reference/pct_nonzero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Percent Non-zero Neighbors — pct_nonzero","text":"nb neighbor list object","code":""},{"path":"/reference/pct_nonzero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Percent Non-zero Neighbors — pct_nonzero","text":"scalar double","code":""},{"path":"/reference/pct_nonzero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Percent Non-zero Neighbors — pct_nonzero","text":"","code":"nb <- st_contiguity(guerry) pct_nonzero(nb) #> [1] 5.813149"},{"path":"/reference/permute_listw.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditionally permutes a listw object — permute_listw","title":"Conditionally permutes a listw object — permute_listw","text":"Conditionally permutes listw object","code":""},{"path":"/reference/permute_listw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditionally permutes a listw object — permute_listw","text":"","code":"permute_listw(listw)"},{"path":"/reference/permute_listw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditionally permutes a listw object — permute_listw","text":"listw listw object.","code":""},{"path":"/reference/permute_listw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditionally permutes a listw object — permute_listw","text":"listw object","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/recreate_listw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a listw object from a neighbors and weight list — recreate_listw","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"Given neighbor weight list, create listw object.","code":""},{"path":"/reference/recreate_listw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"","code":"recreate_listw(nb, wt)"},{"path":"/reference/recreate_listw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"nb neighbor list object example created st_contiguity(). wt weights list created st_weights().","code":""},{"path":"/reference/recreate_listw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"listw object","code":""},{"path":"/reference/recreate_listw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a listw object from a neighbors and weight list — recreate_listw","text":"","code":"recreate_listw(guerry_nb$nb, guerry_nb$wt) #> Characteristics of weights list object: #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 420  #> Percentage nonzero weights: 5.813149  #> Average number of links: 4.941176  #>  #> Weights style: W  #> Weights constants summary: #>    n   nn S0      S1       S2 #> W 85 7225 85 37.2761 347.6683"},{"path":"/reference/set_col.html","id":null,"dir":"Reference","previous_headings":"","what":"Set columns from geometry to data — set_col","title":"Set columns from geometry to data — set_col","text":"Set column geometry context spacetime object data context.","code":""},{"path":"/reference/set_col.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set columns from geometry to data — set_col","text":"","code":"set_col(x, .from_geo, .to_data = .from_geo)  set_wts(x, .wt_col = \"wt\")  set_nbs(x, .nb_col = \"nb\")"},{"path":"/reference/set_col.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set columns from geometry to data — set_col","text":"x spacetime object .from_geo name column geometry context .to_data name new variable create data context .wt_col name weights column geometry context .nb_col name neighbor column geometry context","code":""},{"path":"/reference/set_col.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set columns from geometry to data — set_col","text":"spacetime object active data context new column geometry context.","code":""},{"path":"/reference/set_col.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set columns from geometry to data — set_col","text":"functions reorder spacetime object ensure ordered correctly based location time columns geometry context defined loc_col time_col attributes respectively. set_wts() set_nbs() create new column data context name column geometry context. different name desired use set_col()","code":""},{"path":"/reference/set_col.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set columns from geometry to data — set_col","text":"","code":"if (interactive()) { df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data df <- read.csv(   df_fp, colClasses = c(\"character\", \"character\", \"integer\", \"double\", \"Date\") ) geo <- sf::st_read(geo_fp)  # Create spacetime object called `bos` bos <- spacetime(df, geo,                 .loc_col = \".region_id\",                 .time_col = \"time_period\") bos <- activate(bos, \"geometry\") bos$nb <- st_contiguity(bos) bos$wt <- st_weights(bos$nb) bos$card <- st_cardinalties(bos$nb)  set_nbs(bos) set_wts(bos) set_col(bos, \"card\") set_col(bos, \"card\", \"cardinalities\") }"},{"path":"/reference/shuffle_nbs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to shuffle neighbors — shuffle_nbs","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"Used conditional permutation function permute_listw().","code":""},{"path":"/reference/shuffle_nbs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"","code":"shuffle_nbs(i, n, card)"},{"path":"/reference/shuffle_nbs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"index position observation ","code":""},{"path":"/reference/shuffle_nbs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to shuffle neighbors — shuffle_nbs","text":"nb class object","code":""},{"path":"/reference/sin_d.html","id":null,"dir":"Reference","previous_headings":"","what":"Trigonometric functions — sin_d","title":"Trigonometric functions — sin_d","text":"functions wrappers around base trigonometric functions. However return degree values rather radians.","code":""},{"path":"/reference/sin_d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trigonometric functions — sin_d","text":"","code":"sin_d(theta = 0)"},{"path":"/reference/sin_d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trigonometric functions — sin_d","text":"numeric","code":""},{"path":"/reference/sin_d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trigonometric functions — sin_d","text":"functions adopted now archived CRAN package {aspace}.","code":""},{"path":"/reference/spacetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a spacetime object — spacetime","title":"Construct a spacetime object — spacetime","text":"spacetime object collection linked data frame sf objects. can thought geography linked table represents geographies one time periods.","code":""},{"path":"/reference/spacetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a spacetime object — spacetime","text":"","code":"spacetime(.data, .geometry, .loc_col, .time_col, active = \"data\")  new_spacetime(.data, .geometry, .loc_col, .time_col, active = \"data\")  validate_spacetime(.data, .geometry, .loc_col, .time_col)  is_spacetime(x, ...)  is.spacetime(x, ...)"},{"path":"/reference/spacetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a spacetime object — spacetime","text":".data object base class data.frame containing location time identifiers .loc_col .time_col respectively. .geometry sf object columns .loc_col .time_col .loc_col quoted name column containing unique location identifiers. Must present .data .geometry. .time_col quoted name column containing time periods must present .data. See details active default \"data\". object make active. See activate() . x object test ... unused","code":""},{"path":"/reference/spacetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a spacetime object — spacetime","text":"spacetime() new_spacetime() construct spacetime clss objects validate_spacetime() returns nothing elicit warning error spacetime object validly constructed is_spacetime() .spacetime() return logical scalar indicating object inherits spacetime class","code":""},{"path":"/reference/spacetime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct a spacetime object — spacetime","text":"Create spacetime representation vector data data.frame sf object spacetime() .time_col must able sorted. , .time_col character vector. must base type (typeof()) either double integer—case dates factors respectively. edge case exists POSIXlt class objects can sorted appropriately base type list. spacetime() wrapper around new_spacetime(). Spacetimes validated creation validate_spacetime(). Check object spacetime object is_spacetime() .spacetime().","code":""},{"path":"/reference/spacetime.html","id":"validation","dir":"Reference","previous_headings":"","what":"Validation","title":"Construct a spacetime object — spacetime","text":"validate_spacetime() checks .data .geometry ensure constructed spacetime object meets minimum requirements.: .data inherits data.frame class .geometry sf object ensures .time_col proper class ensures missing geometries .geometry checks duplicate geometries ensures .loc_col type .data .geometry lastly informs missing values additional columns .data","code":""},{"path":"/reference/spacetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a spacetime object — spacetime","text":"","code":"df_fp <- system.file(\"extdata\", \"bos-ecometric.csv\", package = \"sfdep\") geo_fp <- system.file(\"extdata\", \"bos-ecometric.geojson\", package = \"sfdep\")  # read in data df <- read.csv(   df_fp, colClasses = c(\"character\", \"character\", \"integer\", \"double\", \"Date\") )  geo <- sf::st_read(geo_fp) #> Reading layer `bos-ecometric' from data source  #>   `/private/var/folders/zc/tg2xwck53dg9sls8x4ndzdc00000gn/T/Rtmp2RGXTr/temp_libpath2b6f5ea0db20/sfdep/extdata/bos-ecometric.geojson'  #>   using driver `GeoJSON' #> Simple feature collection with 168 features and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: -71.19115 ymin: 42.22788 xmax: -70.99445 ymax: 42.3974 #> Geodetic CRS:  NAD83  bos <- spacetime(df, geo, \".region_id\", \"year\") is_spacetime(bos) #> [1] TRUE bos #> spacetime ──── #> Context:`data` #> 168 locations `.region_id` #> 10 time periods `year` #> ── data context ──────────────────────────────────────────────────────────────── #>       .region_id ecometric year value time_period #> 1    25025010405      Guns 2010  0.35  2010-01-01 #> 2    25025010405      Guns 2011  0.89  2011-01-01 #> 3    25025010405      Guns 2012  1.20  2012-01-01 #> 4    25025010405      Guns 2013  0.84  2013-01-01 #> 5    25025010405      Guns 2014  1.50  2014-01-01 #> 6    25025010405      Guns 2015  1.15  2015-01-01 #> 7    25025010405      Guns 2016  1.48  2016-01-01 #> 8    25025010405      Guns 2017  1.64  2017-01-01 #> 9    25025010405      Guns 2018  0.49  2018-01-01 #> 10   25025010405      Guns 2019  0.17  2019-01-01 #> 11   25025010404      Guns 2010  0.00  2010-01-01 #> 12   25025010404      Guns 2011  0.86  2011-01-01 #> 13   25025010404      Guns 2012  0.17  2012-01-01 #> 14   25025010404      Guns 2013  1.35  2013-01-01 #> 15   25025010404      Guns 2014  1.58  2014-01-01 #> 16   25025010404      Guns 2015  1.17  2015-01-01 #> 17   25025010404      Guns 2016  0.78  2016-01-01 #> 18   25025010404      Guns 2017  0.39  2017-01-01 #> 19   25025010404      Guns 2018  1.17  2018-01-01 #> 20   25025010404      Guns 2019  0.19  2019-01-01 #> 21   25025010801      Guns 2010  0.00  2010-01-01 #> 22   25025010801      Guns 2011  0.00  2011-01-01 #> 23   25025010801      Guns 2012  0.00  2012-01-01 #> 24   25025010801      Guns 2013  0.32  2013-01-01 #> 25   25025010801      Guns 2014  0.61  2014-01-01 #> 26   25025010801      Guns 2015  0.31  2015-01-01 #> 27   25025010801      Guns 2016  0.62  2016-01-01 #> 28   25025010801      Guns 2017  0.31  2017-01-01 #> 29   25025010801      Guns 2018  0.62  2018-01-01 #> 30   25025010801      Guns 2019  0.00  2019-01-01 #> 31   25025010702      Guns 2010  0.46  2010-01-01 #> 32   25025010702      Guns 2011  2.12  2011-01-01 #> 33   25025010702      Guns 2012  2.88  2012-01-01 #> 34   25025010702      Guns 2013  3.68  2013-01-01 #> 35   25025010702      Guns 2014  3.22  2014-01-01 #> 36   25025010702      Guns 2015  2.71  2015-01-01 #> 37   25025010702      Guns 2016  5.80  2016-01-01 #> 38   25025010702      Guns 2017  5.41  2017-01-01 #> 39   25025010702      Guns 2018  5.41  2018-01-01 #> 40   25025010702      Guns 2019  2.68  2019-01-01 #> 41   25025010204      Guns 2010  0.00  2010-01-01 #> 42   25025010204      Guns 2011  0.30  2011-01-01 #> 43   25025010204      Guns 2012  0.31  2012-01-01 #> 44   25025010204      Guns 2013  0.60  2013-01-01 #> 45   25025010204      Guns 2014  0.92  2014-01-01 #> 46   25025010204      Guns 2015  0.00  2015-01-01 #> 47   25025010204      Guns 2016  0.89  2016-01-01 #> 48   25025010204      Guns 2017  0.00  2017-01-01 #> 49   25025010204      Guns 2018  1.49  2018-01-01 #> 50   25025010204      Guns 2019  0.28  2019-01-01 #> 51   25025010802      Guns 2010  0.00  2010-01-01 #> 52   25025010802      Guns 2011  0.33  2011-01-01 #> 53   25025010802      Guns 2012  0.00  2012-01-01 #> 54   25025010802      Guns 2013  0.70  2013-01-01 #> 55   25025010802      Guns 2014  0.00  2014-01-01 #> 56   25025010802      Guns 2015  0.63  2015-01-01 #> 57   25025010802      Guns 2016  0.00  2016-01-01 #> 58   25025010802      Guns 2017  0.63  2017-01-01 #> 59   25025010802      Guns 2018  0.32  2018-01-01 #> 60   25025010802      Guns 2019  0.00  2019-01-01 #> 61   25025010104      Guns 2010  0.00  2010-01-01 #> 62   25025010104      Guns 2011  0.42  2011-01-01 #> 63   25025010104      Guns 2012  0.64  2012-01-01 #> 64   25025010104      Guns 2013  0.84  2013-01-01 #> 65   25025010104      Guns 2014  0.21  2014-01-01 #> 66   25025010104      Guns 2015  0.82  2015-01-01 #> 67   25025010104      Guns 2016  0.00  2016-01-01 #> 68   25025010104      Guns 2017  0.61  2017-01-01 #> 69   25025010104      Guns 2018  1.02  2018-01-01 #> 70   25025010104      Guns 2019  0.00  2019-01-01 #> 71   25025000703      Guns 2010  0.00  2010-01-01 #> 72   25025000703      Guns 2011  3.34  2011-01-01 #> 73   25025000703      Guns 2012  1.34  2012-01-01 #> 74   25025000703      Guns 2013  2.80  2013-01-01 #> 75   25025000703      Guns 2014  3.06  2014-01-01 #> 76   25025000703      Guns 2015  4.67  2015-01-01 #> 77   25025000703      Guns 2016  3.63  2016-01-01 #> 78   25025000703      Guns 2017  3.63  2017-01-01 #> 79   25025000703      Guns 2018  5.71  2018-01-01 #> 80   25025000703      Guns 2019  3.06  2019-01-01 #> 81   25025000504      Guns 2010  0.22  2010-01-01 #> 82   25025000504      Guns 2011  1.35  2011-01-01 #> 83   25025000504      Guns 2012  1.66  2012-01-01 #> 84   25025000504      Guns 2013  2.89  2013-01-01 #> 85   25025000504      Guns 2014  0.66  2014-01-01 #> 86   25025000504      Guns 2015  1.35  2015-01-01 #> 87   25025000504      Guns 2016  0.90  2016-01-01 #> 88   25025000504      Guns 2017  1.12  2017-01-01 #> 89   25025000504      Guns 2018  1.57  2018-01-01 #> 90   25025000504      Guns 2019  0.61  2019-01-01 #> 91   25025000704      Guns 2010  0.00  2010-01-01 #> 92   25025000704      Guns 2011  2.66  2011-01-01 #> 93   25025000704      Guns 2012  1.63  2012-01-01 #> 94   25025000704      Guns 2013  3.05  2013-01-01 #> 95   25025000704      Guns 2014  2.21  2014-01-01 #> 96   25025000704      Guns 2015  1.96  2015-01-01 #> 97   25025000704      Guns 2016  2.62  2016-01-01 #> 98   25025000704      Guns 2017  0.65  2017-01-01 #> 99   25025000704      Guns 2018  1.09  2018-01-01 #> 100  25025000704      Guns 2019  0.41  2019-01-01 #> 101  25025010103      Guns 2010  0.00  2010-01-01 #> 102  25025010103      Guns 2011  0.51  2011-01-01 #> 103  25025010103      Guns 2012  0.00  2012-01-01 #> 104  25025010103      Guns 2013  0.28  2013-01-01 #> 105  25025010103      Guns 2014  0.27  2014-01-01 #> 106  25025010103      Guns 2015  1.35  2015-01-01 #> 107  25025010103      Guns 2016  0.00  2016-01-01 #> 108  25025010103      Guns 2017  0.00  2017-01-01 #> 109  25025010103      Guns 2018  0.81  2018-01-01 #> 110  25025010103      Guns 2019  0.00  2019-01-01 #> 111  25025000803      Guns 2010  0.00  2010-01-01 #> 112  25025000803      Guns 2011  0.87  2011-01-01 #> 113  25025000803      Guns 2012  0.49  2012-01-01 #> 114  25025000803      Guns 2013  0.00  2013-01-01 #> 115  25025000803      Guns 2014  0.00  2014-01-01 #> 116  25025000803      Guns 2015  0.00  2015-01-01 #> 117  25025000803      Guns 2016  0.32  2016-01-01 #> 118  25025000803      Guns 2017  0.16  2017-01-01 #> 119  25025000803      Guns 2018  0.48  2018-01-01 #> 120  25025000803      Guns 2019  0.33  2019-01-01 #> 121  25025120201      Guns 2010  0.52  2010-01-01 #> 122  25025120201      Guns 2011  2.10  2011-01-01 #> 123  25025120201      Guns 2012  3.19  2012-01-01 #> 124  25025120201      Guns 2013  4.35  2013-01-01 #> 125  25025120201      Guns 2014  2.20  2014-01-01 #> 126  25025120201      Guns 2015  3.97  2015-01-01 #> 127  25025120201      Guns 2016  2.38  2016-01-01 #> 128  25025120201      Guns 2017  0.79  2017-01-01 #> 129  25025120201      Guns 2018  1.59  2018-01-01 #> 130  25025120201      Guns 2019  2.30  2019-01-01 #> 131  25025120104      Guns 2010  0.00  2010-01-01 #> 132  25025120104      Guns 2011  4.65  2011-01-01 #> 133  25025120104      Guns 2012  3.22  2012-01-01 #> 134  25025120104      Guns 2013  4.40  2013-01-01 #> 135  25025120104      Guns 2014  3.92  2014-01-01 #> 136  25025120104      Guns 2015  1.74  2015-01-01 #> 137  25025120104      Guns 2016  1.74  2016-01-01 #> 138  25025120104      Guns 2017  1.30  2017-01-01 #> 139  25025120104      Guns 2018  2.61  2018-01-01 #> 140  25025120104      Guns 2019  0.45  2019-01-01 #> 141  25025110607      Guns 2010  0.00  2010-01-01 #> 142  25025110607      Guns 2011  1.32  2011-01-01 #> 143  25025110607      Guns 2012  1.89  2012-01-01 #> 144  25025110607      Guns 2013  1.37  2013-01-01 #> 145  25025110607      Guns 2014  2.08  2014-01-01 #> 146  25025110607      Guns 2015  0.37  2015-01-01 #> 147  25025110607      Guns 2016  1.31  2016-01-01 #> 148  25025110607      Guns 2017  0.75  2017-01-01 #> 149  25025110607      Guns 2018  0.93  2018-01-01 #> 150  25025110607      Guns 2019  0.55  2019-01-01 #> 151  25025000302      Guns 2010  0.33  2010-01-01 #> 152  25025000302      Guns 2011  1.10  2011-01-01 #> 153  25025000302      Guns 2012  1.50  2012-01-01 #> 154  25025000302      Guns 2013  0.69  2013-01-01 #> 155  25025000302      Guns 2014  1.93  2014-01-01 #> 156  25025000302      Guns 2015  0.89  2015-01-01 #> 157  25025000302      Guns 2016  1.18  2016-01-01 #> 158  25025000302      Guns 2017  0.59  2017-01-01 #> 159  25025000302      Guns 2018  0.00  2018-01-01 #> 160  25025000302      Guns 2019  0.58  2019-01-01 #> 161  25025000301      Guns 2010  0.00  2010-01-01 #> 162  25025000301      Guns 2011  1.65  2011-01-01 #> 163  25025000301      Guns 2012  1.64  2012-01-01 #> 164  25025000301      Guns 2013  0.74  2013-01-01 #> 165  25025000301      Guns 2014  1.16  2014-01-01 #> 166  25025000301      Guns 2015  0.69  2015-01-01 #> 167  25025000301      Guns 2016  0.69  2016-01-01 #> 168  25025000301      Guns 2017  0.34  2017-01-01 #> 169  25025000301      Guns 2018  0.34  2018-01-01 #> 170  25025000301      Guns 2019  0.00  2019-01-01 #> 171  25025140400      Guns 2010  0.24  2010-01-01 #> 172  25025140400      Guns 2011  3.20  2011-01-01 #> 173  25025140400      Guns 2012  2.40  2012-01-01 #> 174  25025140400      Guns 2013  3.23  2013-01-01 #> 175  25025140400      Guns 2014  3.12  2014-01-01 #> 176  25025140400      Guns 2015  4.23  2015-01-01 #> 177  25025140400      Guns 2016  2.29  2016-01-01 #> 178  25025140400      Guns 2017  2.29  2017-01-01 #> 179  25025140400      Guns 2018  2.29  2018-01-01 #> 180  25025140400      Guns 2019  3.91  2019-01-01 #> 181  25025140300      Guns 2010  0.32  2010-01-01 #> 182  25025140300      Guns 2011  3.18  2011-01-01 #> 183  25025140300      Guns 2012  4.26  2012-01-01 #> 184  25025140300      Guns 2013  4.25  2013-01-01 #> 185  25025140300      Guns 2014  1.58  2014-01-01 #> 186  25025140300      Guns 2015  3.67  2015-01-01 #> 187  25025140300      Guns 2016  2.58  2016-01-01 #> 188  25025140300      Guns 2017  3.94  2017-01-01 #> 189  25025140300      Guns 2018  4.48  2018-01-01 #> 190  25025140300      Guns 2019  5.32  2019-01-01 #> 191  25025140201      Guns 2010  0.00  2010-01-01 #> 192  25025140201      Guns 2011  1.67  2011-01-01 #> 193  25025140201      Guns 2012  0.83  2012-01-01 #> 194  25025140201      Guns 2013  0.00  2013-01-01 #> 195  25025140201      Guns 2014  2.09  2014-01-01 #> 196  25025140201      Guns 2015  2.56  2015-01-01 #> 197  25025140201      Guns 2016  1.28  2016-01-01 #> 198  25025140201      Guns 2017  2.13  2017-01-01 #> 199  25025140201      Guns 2018  2.13  2018-01-01 #> 200  25025140201      Guns 2019  2.42  2019-01-01 #> 201  25025140202      Guns 2010  0.33  2010-01-01 #> 202  25025140202      Guns 2011  1.15  2011-01-01 #> 203  25025140202      Guns 2012  2.13  2012-01-01 #> 204  25025140202      Guns 2013  4.53  2013-01-01 #> 205  25025140202      Guns 2014  2.55  2014-01-01 #> 206  25025140202      Guns 2015  3.37  2015-01-01 #> 207  25025140202      Guns 2016  3.22  2016-01-01 #> 208  25025140202      Guns 2017  2.91  2017-01-01 #> 209  25025140202      Guns 2018  2.76  2018-01-01 #> 210  25025140202      Guns 2019  2.06  2019-01-01 #> 211  25025140102      Guns 2010  0.45  2010-01-01 #> 212  25025140102      Guns 2011  1.34  2011-01-01 #> 213  25025140102      Guns 2012  0.63  2012-01-01 #> 214  25025140102      Guns 2013  1.49  2013-01-01 #> 215  25025140102      Guns 2014  0.99  2014-01-01 #> 216  25025140102      Guns 2015  2.09  2015-01-01 #> 217  25025140102      Guns 2016  2.28  2016-01-01 #> 218  25025140102      Guns 2017  2.28  2017-01-01 #> 219  25025140102      Guns 2018  3.23  2018-01-01 #> 220  25025140102      Guns 2019  1.98  2019-01-01 #> 221  25025130402      Guns 2010  0.22  2010-01-01 #> 222  25025130402      Guns 2011  0.00  2011-01-01 #> 223  25025130402      Guns 2012  0.39  2012-01-01 #> 224  25025130402      Guns 2013  0.61  2013-01-01 #> 225  25025130402      Guns 2014  1.39  2014-01-01 #> 226  25025130402      Guns 2015  1.38  2015-01-01 #> 227  25025130402      Guns 2016  1.18  2016-01-01 #> 228  25025130402      Guns 2017  0.79  2017-01-01 #> 229  25025130402      Guns 2018  0.98  2018-01-01 #> 230  25025130402      Guns 2019  0.61  2019-01-01 #> 231  25025130300      Guns 2010  0.23  2010-01-01 #> 232  25025130300      Guns 2011  0.43  2011-01-01 #> 233  25025130300      Guns 2012  0.00  2012-01-01 #> 234  25025130300      Guns 2013  0.43  2013-01-01 #> 235  25025130300      Guns 2014  0.44  2014-01-01 #> 236  25025130300      Guns 2015  1.07  2015-01-01 #> 237  25025130300      Guns 2016  0.00  2016-01-01 #> 238  25025130300      Guns 2017  0.64  2017-01-01 #> 239  25025130300      Guns 2018  0.43  2018-01-01 #> 240  25025130300      Guns 2019  0.44  2019-01-01 #> 241  25025130200      Guns 2010  0.00  2010-01-01 #> 242  25025130200      Guns 2011  0.60  2011-01-01 #> 243  25025130200      Guns 2012  0.40  2012-01-01 #> 244  25025130200      Guns 2013  0.60  2013-01-01 #> 245  25025130200      Guns 2014  0.80  2014-01-01 #> 246  25025130200      Guns 2015  0.57  2015-01-01 #> 247  25025130200      Guns 2016  0.38  2016-01-01 #> 248  25025130200      Guns 2017  0.38  2017-01-01 #> 249  25025130200      Guns 2018  1.14  2018-01-01 #> 250  25025130200      Guns 2019  0.57  2019-01-01 #> 251  25025130100      Guns 2010  0.17  2010-01-01 #> 252  25025130100      Guns 2011  0.50  2011-01-01 #> 253  25025130100      Guns 2012  1.32  2012-01-01 #> 254  25025130100      Guns 2013  0.46  2013-01-01 #> 255  25025130100      Guns 2014  0.00  2014-01-01 #> 256  25025130100      Guns 2015  0.90  2015-01-01 #> 257  25025130100      Guns 2016  0.60  2016-01-01 #> 258  25025130100      Guns 2017  0.30  2017-01-01 #> 259  25025130100      Guns 2018  0.30  2018-01-01 #> 260  25025130100      Guns 2019  0.30  2019-01-01 #> 261  25025120700      Guns 2010  0.47  2010-01-01 #> 262  25025120700      Guns 2011  1.56  2011-01-01 #> 263  25025120700      Guns 2012  3.43  2012-01-01 #> 264  25025120700      Guns 2013  2.32  2013-01-01 #> 265  25025120700      Guns 2014  2.27  2014-01-01 #> 266  25025120700      Guns 2015  3.49  2015-01-01 #> 267  25025120700      Guns 2016  1.31  2016-01-01 #> 268  25025120700      Guns 2017  2.18  2017-01-01 #> 269  25025120700      Guns 2018  2.62  2018-01-01 #> 270  25025120700      Guns 2019  1.29  2019-01-01 #> 271  25025120600      Guns 2010  0.00  2010-01-01 #> 272  25025120600      Guns 2011  3.05  2011-01-01 #> 273  25025120600      Guns 2012  0.00  2012-01-01 #> 274  25025120600      Guns 2013  3.10  2013-01-01 #> 275  25025120600      Guns 2014  2.91  2014-01-01 #> 276  25025120600      Guns 2015  2.16  2015-01-01 #> 277  25025120600      Guns 2016  1.73  2016-01-01 #> 278  25025120600      Guns 2017  0.43  2017-01-01 #> 279  25025120600      Guns 2018  2.59  2018-01-01 #> 280  25025120600      Guns 2019  2.04  2019-01-01 #> 281  25025120500      Guns 2010  0.00  2010-01-01 #> 282  25025120500      Guns 2011  2.50  2011-01-01 #> 283  25025120500      Guns 2012  2.11  2012-01-01 #> 284  25025120500      Guns 2013  4.03  2013-01-01 #> 285  25025120500      Guns 2014  4.88  2014-01-01 #> 286  25025120500      Guns 2015  2.98  2015-01-01 #> 287  25025120500      Guns 2016  5.21  2016-01-01 #> 288  25025120500      Guns 2017  2.23  2017-01-01 #> 289  25025120500      Guns 2018  4.10  2018-01-01 #> 290  25025120500      Guns 2019  4.61  2019-01-01 #> 291  25025120400      Guns 2010  1.51  2010-01-01 #> 292  25025120400      Guns 2011  0.93  2011-01-01 #> 293  25025120400      Guns 2012  1.25  2012-01-01 #> 294  25025120400      Guns 2013  2.12  2013-01-01 #> 295  25025120400      Guns 2014  2.52  2014-01-01 #> 296  25025120400      Guns 2015  1.42  2015-01-01 #> 297  25025120400      Guns 2016  2.06  2016-01-01 #> 298  25025120400      Guns 2017  3.00  2017-01-01 #> 299  25025120400      Guns 2018  2.06  2018-01-01 #> 300  25025120400      Guns 2019  0.46  2019-01-01 #> 301  25025110601      Guns 2010  0.00  2010-01-01 #> 302  25025110601      Guns 2011  0.75  2011-01-01 #> 303  25025110601      Guns 2012  0.00  2012-01-01 #> 304  25025110601      Guns 2013  2.04  2013-01-01 #> 305  25025110601      Guns 2014  1.06  2014-01-01 #> 306  25025110601      Guns 2015  0.00  2015-01-01 #> 307  25025110601      Guns 2016  1.00  2016-01-01 #> 308  25025110601      Guns 2017  0.00  2017-01-01 #> 309  25025110601      Guns 2018  0.33  2018-01-01 #> 310  25025110601      Guns 2019  0.00  2019-01-01 #> 311  25025110502      Guns 2010  0.00  2010-01-01 #> 312  25025110502      Guns 2011  2.64  2011-01-01 #> 313  25025110502      Guns 2012  3.08  2012-01-01 #> 314  25025110502      Guns 2013  2.25  2013-01-01 #> 315  25025110502      Guns 2014  1.93  2014-01-01 #> 316  25025110502      Guns 2015  1.72  2015-01-01 #> 317  25025110502      Guns 2016  2.79  2016-01-01 #> 318  25025110502      Guns 2017  3.01  2017-01-01 #> 319  25025110502      Guns 2018  2.79  2018-01-01 #> 320  25025110502      Guns 2019  1.63  2019-01-01 #> 321  25025110501      Guns 2010  0.00  2010-01-01 #> 322  25025110501      Guns 2011  0.83  2011-01-01 #> 323  25025110501      Guns 2012  0.83  2012-01-01 #> 324  25025110501      Guns 2013  1.11  2013-01-01 #> 325  25025110501      Guns 2014  0.28  2014-01-01 #> 326  25025110501      Guns 2015  0.00  2015-01-01 #> 327  25025110501      Guns 2016  1.13  2016-01-01 #> 328  25025110501      Guns 2017  1.41  2017-01-01 #> 329  25025110501      Guns 2018  1.13  2018-01-01 #> 330  25025110501      Guns 2019  0.80  2019-01-01 #> 331  25025110401      Guns 2010  0.54  2010-01-01 #> 332  25025110401      Guns 2011  2.48  2011-01-01 #> 333  25025110401      Guns 2012  2.49  2012-01-01 #> 334  25025110401      Guns 2013  2.09  2013-01-01 #> 335  25025110401      Guns 2014  2.07  2014-01-01 #> 336  25025110401      Guns 2015  3.45  2015-01-01 #> 337  25025110401      Guns 2016  1.59  2016-01-01 #> 338  25025110401      Guns 2017  2.39  2017-01-01 #> 339  25025110401      Guns 2018  3.18  2018-01-01 #> 340  25025110401      Guns 2019  3.10  2019-01-01 #> 341  25025101102      Guns 2010  1.66  2010-01-01 #> 342  25025101102      Guns 2011  8.40  2011-01-01 #> 343  25025101102      Guns 2012  7.78  2012-01-01 #> 344  25025101102      Guns 2013 13.99  2013-01-01 #> 345  25025101102      Guns 2014  9.02  2014-01-01 #> 346  25025101102      Guns 2015 10.06  2015-01-01 #> 347  25025101102      Guns 2016  8.29  2016-01-01 #> 348  25025101102      Guns 2017  7.89  2017-01-01 #> 349  25025101102      Guns 2018  7.70  2018-01-01 #> 350  25025101102      Guns 2019  8.57  2019-01-01 #> 351  25025101101      Guns 2010  0.59  2010-01-01 #> 352  25025101101      Guns 2011  6.31  2011-01-01 #> 353  25025101101      Guns 2012  3.49  2012-01-01 #> 354  25025101101      Guns 2013  4.46  2013-01-01 #> 355  25025101101      Guns 2014  4.84  2014-01-01 #> 356  25025101101      Guns 2015  4.49  2015-01-01 #> 357  25025101101      Guns 2016  3.96  2016-01-01 #> 358  25025101101      Guns 2017  4.75  2017-01-01 #> 359  25025101101      Guns 2018  2.64  2018-01-01 #> 360  25025101101      Guns 2019  7.27  2019-01-01 #> 361  25025101002      Guns 2010  1.05  2010-01-01 #> 362  25025101002      Guns 2011  7.50  2011-01-01 #> 363  25025101002      Guns 2012  6.46  2012-01-01 #> 364  25025101002      Guns 2013  6.70  2013-01-01 #> 365  25025101002      Guns 2014  7.73  2014-01-01 #> 366  25025101002      Guns 2015  8.48  2015-01-01 #> 367  25025101002      Guns 2016  5.88  2016-01-01 #> 368  25025101002      Guns 2017  5.88  2017-01-01 #> 369  25025101002      Guns 2018  6.92  2018-01-01 #> 370  25025101002      Guns 2019  4.53  2019-01-01 #> 371  25025101001      Guns 2010  0.84  2010-01-01 #> 372  25025101001      Guns 2011  5.43  2011-01-01 #> 373  25025101001      Guns 2012  7.15  2012-01-01 #> 374  25025101001      Guns 2013  8.08  2013-01-01 #> 375  25025101001      Guns 2014  7.00  2014-01-01 #> 376  25025101001      Guns 2015  6.15  2015-01-01 #> 377  25025101001      Guns 2016  8.98  2016-01-01 #> 378  25025101001      Guns 2017  8.83  2017-01-01 #> 379  25025101001      Guns 2018  7.25  2018-01-01 #> 380  25025101001      Guns 2019  4.85  2019-01-01 #> 381  25025100900      Guns 2010  0.00  2010-01-01 #> 382  25025100900      Guns 2011  4.63  2011-01-01 #> 383  25025100900      Guns 2012  1.68  2012-01-01 #> 384  25025100900      Guns 2013  3.77  2013-01-01 #> 385  25025100900      Guns 2014  5.64  2014-01-01 #> 386  25025100900      Guns 2015  6.20  2015-01-01 #> 387  25025100900      Guns 2016  7.15  2016-01-01 #> 388  25025100900      Guns 2017  7.39  2017-01-01 #> 389  25025100900      Guns 2018  5.72  2018-01-01 #> 390  25025100900      Guns 2019  3.07  2019-01-01 #> 391  25025100800      Guns 2010  0.76  2010-01-01 #> 392  25025100800      Guns 2011  2.51  2011-01-01 #> 393  25025100800      Guns 2012  4.86  2012-01-01 #> 394  25025100800      Guns 2013  4.17  2013-01-01 #> 395  25025100800      Guns 2014  4.52  2014-01-01 #> 396  25025100800      Guns 2015  1.97  2015-01-01 #> 397  25025100800      Guns 2016  2.73  2016-01-01 #> 398  25025100800      Guns 2017  2.89  2017-01-01 #> 399  25025100800      Guns 2018  1.82  2018-01-01 #> 400  25025100800      Guns 2019  2.89  2019-01-01 #> 401  25025100601      Guns 2010  0.20  2010-01-01 #> 402  25025100601      Guns 2011  3.09  2011-01-01 #> 403  25025100601      Guns 2012  4.44  2012-01-01 #> 404  25025100601      Guns 2013  5.01  2013-01-01 #> 405  25025100601      Guns 2014  2.67  2014-01-01 #> 406  25025100601      Guns 2015  2.20  2015-01-01 #> 407  25025100601      Guns 2016  2.37  2016-01-01 #> 408  25025100601      Guns 2017  1.36  2017-01-01 #> 409  25025100601      Guns 2018  0.85  2018-01-01 #> 410  25025100601      Guns 2019  0.67  2019-01-01 #> 411  25025100500      Guns 2010  1.23  2010-01-01 #> 412  25025100500      Guns 2011  6.43  2011-01-01 #> 413  25025100500      Guns 2012  7.90  2012-01-01 #> 414  25025100500      Guns 2013 10.24  2013-01-01 #> 415  25025100500      Guns 2014  8.30  2014-01-01 #> 416  25025100500      Guns 2015  9.54  2015-01-01 #> 417  25025100500      Guns 2016 10.63  2016-01-01 #> 418  25025100500      Guns 2017  6.00  2017-01-01 #> 419  25025100500      Guns 2018  5.18  2018-01-01 #> 420  25025100500      Guns 2019  6.37  2019-01-01 #> 421  25025100400      Guns 2010  0.65  2010-01-01 #> 422  25025100400      Guns 2011  4.95  2011-01-01 #> 423  25025100400      Guns 2012  8.12  2012-01-01 #> 424  25025100400      Guns 2013  6.91  2013-01-01 #> 425  25025100400      Guns 2014  6.25  2014-01-01 #> 426  25025100400      Guns 2015  5.65  2015-01-01 #> 427  25025100400      Guns 2016 10.76  2016-01-01 #> 428  25025100400      Guns 2017  6.00  2017-01-01 #> 429  25025100400      Guns 2018  3.71  2018-01-01 #> 430  25025100400      Guns 2019  3.51  2019-01-01 #> 431  25025100300      Guns 2010  0.55  2010-01-01 #> 432  25025100300      Guns 2011  4.69  2011-01-01 #> 433  25025100300      Guns 2012  7.91  2012-01-01 #> 434  25025100300      Guns 2013  9.34  2013-01-01 #> 435  25025100300      Guns 2014  9.11  2014-01-01 #> 436  25025100300      Guns 2015  8.86  2015-01-01 #> 437  25025100300      Guns 2016  3.20  2016-01-01 #> 438  25025100300      Guns 2017 10.83  2017-01-01 #> 439  25025100300      Guns 2018  7.14  2018-01-01 #> 440  25025100300      Guns 2019  3.65  2019-01-01 #> 441  25025100200      Guns 2010  1.49  2010-01-01 #> 442  25025100200      Guns 2011 10.07  2011-01-01 #> 443  25025100200      Guns 2012 13.21  2012-01-01 #> 444  25025100200      Guns 2013 14.98  2013-01-01 #> 445  25025100200      Guns 2014 11.99  2014-01-01 #> 446  25025100200      Guns 2015  6.93  2015-01-01 #> 447  25025100200      Guns 2016  6.62  2016-01-01 #> 448  25025100200      Guns 2017  9.14  2017-01-01 #> 449  25025100200      Guns 2018  8.51  2018-01-01 #> 450  25025100200      Guns 2019  9.59  2019-01-01 #> 451  25025100100      Guns 2010  0.16  2010-01-01 #> 452  25025100100      Guns 2011  8.90  2011-01-01 #> 453  25025100100      Guns 2012  8.79  2012-01-01 #> 454  25025100100      Guns 2013 10.90  2013-01-01 #> 455  25025100100      Guns 2014 11.03  2014-01-01 #> 456  25025100100      Guns 2015 11.12  2015-01-01 #> 457  25025100100      Guns 2016  9.64  2016-01-01 #> 458  25025100100      Guns 2017  8.90  2017-01-01 #> 459  25025100100      Guns 2018  7.42  2018-01-01 #> 460  25025100100      Guns 2019  8.12  2019-01-01 #> 461  25025092400      Guns 2010  1.19  2010-01-01 #> 462  25025092400      Guns 2011  9.42  2011-01-01 #> 463  25025092400      Guns 2012  8.22  2012-01-01 #> 464  25025092400      Guns 2013 10.47  2013-01-01 #> 465  25025092400      Guns 2014 13.41  2014-01-01 #> 466  25025092400      Guns 2015 10.19  2015-01-01 #> 467  25025092400      Guns 2016 11.20  2016-01-01 #> 468  25025092400      Guns 2017 10.70  2017-01-01 #> 469  25025092400      Guns 2018  6.68  2018-01-01 #> 470  25025092400      Guns 2019  9.31  2019-01-01 #> 471  25025092300      Guns 2010  0.32  2010-01-01 #> 472  25025092300      Guns 2011 10.53  2011-01-01 #> 473  25025092300      Guns 2012  9.48  2012-01-01 #> 474  25025092300      Guns 2013  7.24  2013-01-01 #> 475  25025092300      Guns 2014  5.91  2014-01-01 #> 476  25025092300      Guns 2015 12.79  2015-01-01 #> 477  25025092300      Guns 2016 10.80  2016-01-01 #> 478  25025092300      Guns 2017 13.07  2017-01-01 #> 479  25025092300      Guns 2018  7.10  2018-01-01 #> 480  25025092300      Guns 2019  8.25  2019-01-01 #> 481  25025092200      Guns 2010  1.38  2010-01-01 #> 482  25025092200      Guns 2011 13.37  2011-01-01 #> 483  25025092200      Guns 2012 10.47  2012-01-01 #> 484  25025092200      Guns 2013 10.42  2013-01-01 #> 485  25025092200      Guns 2014 14.61  2014-01-01 #> 486  25025092200      Guns 2015 12.86  2015-01-01 #> 487  25025092200      Guns 2016 19.30  2016-01-01 #> 488  25025092200      Guns 2017 15.01  2017-01-01 #> 489  25025092200      Guns 2018 17.46  2018-01-01 #> 490  25025092200      Guns 2019 15.13  2019-01-01 #> 491  25025092000      Guns 2010  1.32  2010-01-01 #> 492  25025092000      Guns 2011  7.85  2011-01-01 #> 493  25025092000      Guns 2012  9.27  2012-01-01 #> 494  25025092000      Guns 2013 14.19  2013-01-01 #> 495  25025092000      Guns 2014  9.26  2014-01-01 #> 496  25025092000      Guns 2015  8.48  2015-01-01 #> 497  25025092000      Guns 2016  8.48  2016-01-01 #> 498  25025092000      Guns 2017  9.40  2017-01-01 #> 499  25025092000      Guns 2018  6.08  2018-01-01 #> 500  25025092000      Guns 2019  6.92  2019-01-01 #> 501  25025091900      Guns 2010  0.98  2010-01-01 #> 502  25025091900      Guns 2011  7.49  2011-01-01 #> 503  25025091900      Guns 2012  5.65  2012-01-01 #> 504  25025091900      Guns 2013 14.19  2013-01-01 #> 505  25025091900      Guns 2014  8.96  2014-01-01 #> 506  25025091900      Guns 2015 12.47  2015-01-01 #> 507  25025091900      Guns 2016  9.48  2016-01-01 #> 508  25025091900      Guns 2017  9.73  2017-01-01 #> 509  25025091900      Guns 2018  6.73  2018-01-01 #> 510  25025091900      Guns 2019  8.11  2019-01-01 #> 511  25025091800      Guns 2010  0.87  2010-01-01 #> 512  25025091800      Guns 2011 13.29  2011-01-01 #> 513  25025091800      Guns 2012  7.60  2012-01-01 #> 514  25025091800      Guns 2013  8.92  2013-01-01 #> 515  25025091800      Guns 2014  9.15  2014-01-01 #> 516  25025091800      Guns 2015 16.80  2015-01-01 #> 517  25025091800      Guns 2016 13.22  2016-01-01 #> 518  25025091800      Guns 2017 12.67  2017-01-01 #> 519  25025091800      Guns 2018  9.09  2018-01-01 #> 520  25025091800      Guns 2019  7.37  2019-01-01 #> 521  25025091700      Guns 2010  0.60  2010-01-01 #> 522  25025091700      Guns 2011  5.26  2011-01-01 #> 523  25025091700      Guns 2012 10.53  2012-01-01 #> 524  25025091700      Guns 2013 16.95  2013-01-01 #> 525  25025091700      Guns 2014 10.86  2014-01-01 #> 526  25025091700      Guns 2015 11.40  2015-01-01 #> 527  25025091700      Guns 2016 11.71  2016-01-01 #> 528  25025091700      Guns 2017 16.02  2017-01-01 #> 529  25025091700      Guns 2018  5.55  2018-01-01 #> 530  25025091700      Guns 2019  8.71  2019-01-01 #> 531  25025091600      Guns 2010  1.58  2010-01-01 #> 532  25025091600      Guns 2011  6.25  2011-01-01 #> 533  25025091600      Guns 2012  4.18  2012-01-01 #> 534  25025091600      Guns 2013 14.78  2013-01-01 #> 535  25025091600      Guns 2014  5.59  2014-01-01 #> 536  25025091600      Guns 2015  4.39  2015-01-01 #> 537  25025091600      Guns 2016  7.44  2016-01-01 #> 538  25025091600      Guns 2017 11.49  2017-01-01 #> 539  25025091600      Guns 2018  9.80  2018-01-01 #> 540  25025091600      Guns 2019  7.08  2019-01-01 #> 541  25025981100      Guns 2010  0.00  2010-01-01 #> 542  25025981100      Guns 2011  0.00  2011-01-01 #> 543  25025981100      Guns 2012  0.00  2012-01-01 #> 544  25025981100      Guns 2013  3.36  2013-01-01 #> 545  25025981100      Guns 2014  0.00  2014-01-01 #> 546  25025981100      Guns 2015  0.00  2015-01-01 #> 547  25025981100      Guns 2016  0.00  2016-01-01 #> 548  25025981100      Guns 2017  0.00  2017-01-01 #> 549  25025981100      Guns 2018  0.00  2018-01-01 #> 550  25025981100      Guns 2019  0.00  2019-01-01 #> 551  25025140105      Guns 2010  0.00  2010-01-01 #> 552  25025140105      Guns 2011  2.36  2011-01-01 #> 553  25025140105      Guns 2012  1.22  2012-01-01 #> 554  25025140105      Guns 2013  0.50  2013-01-01 #> 555  25025140105      Guns 2014  1.78  2014-01-01 #> 556  25025140105      Guns 2015  2.89  2015-01-01 #> 557  25025140105      Guns 2016  1.45  2016-01-01 #> 558  25025140105      Guns 2017  0.96  2017-01-01 #> 559  25025140105      Guns 2018  1.21  2018-01-01 #> 560  25025140105      Guns 2019  2.46  2019-01-01 #> 561  25025120105      Guns 2010  0.87  2010-01-01 #> 562  25025120105      Guns 2011  0.85  2011-01-01 #> 563  25025120105      Guns 2012  0.41  2012-01-01 #> 564  25025120105      Guns 2013  0.38  2013-01-01 #> 565  25025120105      Guns 2014  1.10  2014-01-01 #> 566  25025120105      Guns 2015  1.81  2015-01-01 #> 567  25025120105      Guns 2016  0.73  2016-01-01 #> 568  25025120105      Guns 2017  2.18  2017-01-01 #> 569  25025120105      Guns 2018  0.73  2018-01-01 #> 570  25025120105      Guns 2019  1.83  2019-01-01 #> 571  25025120301      Guns 2010  0.80  2010-01-01 #> 572  25025120301      Guns 2011  6.53  2011-01-01 #> 573  25025120301      Guns 2012  2.95  2012-01-01 #> 574  25025120301      Guns 2013  4.61  2013-01-01 #> 575  25025120301      Guns 2014  7.69  2014-01-01 #> 576  25025120301      Guns 2015  4.94  2015-01-01 #> 577  25025120301      Guns 2016  4.75  2016-01-01 #> 578  25025120301      Guns 2017  6.27  2017-01-01 #> 579  25025120301      Guns 2018  2.47  2018-01-01 #> 580  25025120301      Guns 2019  2.33  2019-01-01 #> 581  25025071201      Guns 2010  0.34  2010-01-01 #> 582  25025071201      Guns 2011  5.11  2011-01-01 #> 583  25025071201      Guns 2012  1.79  2012-01-01 #> 584  25025071201      Guns 2013  1.77  2013-01-01 #> 585  25025071201      Guns 2014  1.72  2014-01-01 #> 586  25025071201      Guns 2015  2.79  2015-01-01 #> 587  25025071201      Guns 2016  5.59  2016-01-01 #> 588  25025071201      Guns 2017  2.51  2017-01-01 #> 589  25025071201      Guns 2018  2.79  2018-01-01 #> 590  25025071201      Guns 2019  3.75  2019-01-01 #> 591  25025091001      Guns 2010  0.36  2010-01-01 #> 592  25025091001      Guns 2011  5.39  2011-01-01 #> 593  25025091001      Guns 2012  3.19  2012-01-01 #> 594  25025091001      Guns 2013  6.53  2013-01-01 #> 595  25025091001      Guns 2014  3.40  2014-01-01 #> 596  25025091001      Guns 2015  3.94  2015-01-01 #> 597  25025091001      Guns 2016  2.95  2016-01-01 #> 598  25025091001      Guns 2017  4.60  2017-01-01 #> 599  25025091001      Guns 2018  6.24  2018-01-01 #> 600  25025091001      Guns 2019  3.03  2019-01-01 #> 601  25025091500      Guns 2010  1.20  2010-01-01 #> 602  25025091500      Guns 2011  6.91  2011-01-01 #> 603  25025091500      Guns 2012  7.15  2012-01-01 #> 604  25025091500      Guns 2013  9.16  2013-01-01 #> 605  25025091500      Guns 2014 10.47  2014-01-01 #> 606  25025091500      Guns 2015  9.22  2015-01-01 #> 607  25025091500      Guns 2016 12.10  2016-01-01 #> 608  25025091500      Guns 2017 12.49  2017-01-01 #> 609  25025091500      Guns 2018  6.34  2018-01-01 #> 610  25025091500      Guns 2019  3.96  2019-01-01 #> 611  25025091400      Guns 2010  0.46  2010-01-01 #> 612  25025091400      Guns 2011  7.21  2011-01-01 #> 613  25025091400      Guns 2012  6.13  2012-01-01 #> 614  25025091400      Guns 2013 13.23  2013-01-01 #> 615  25025091400      Guns 2014 10.50  2014-01-01 #> 616  25025091400      Guns 2015  8.42  2015-01-01 #> 617  25025091400      Guns 2016  7.77  2016-01-01 #> 618  25025091400      Guns 2017  7.45  2017-01-01 #> 619  25025091400      Guns 2018  9.71  2018-01-01 #> 620  25025091400      Guns 2019  8.85  2019-01-01 #> 621  25025091300      Guns 2010  0.00  2010-01-01 #> 622  25025091300      Guns 2011 11.09  2011-01-01 #> 623  25025091300      Guns 2012 16.65  2012-01-01 #> 624  25025091300      Guns 2013 12.33  2013-01-01 #> 625  25025091300      Guns 2014 19.66  2014-01-01 #> 626  25025091300      Guns 2015 21.10  2015-01-01 #> 627  25025091300      Guns 2016 25.79  2016-01-01 #> 628  25025091300      Guns 2017 14.46  2017-01-01 #> 629  25025091300      Guns 2018 14.07  2018-01-01 #> 630  25025091300      Guns 2019  7.81  2019-01-01 #> 631  25025091200      Guns 2010  0.68  2010-01-01 #> 632  25025091200      Guns 2011  5.18  2011-01-01 #> 633  25025091200      Guns 2012  5.05  2012-01-01 #> 634  25025091200      Guns 2013  7.41  2013-01-01 #> 635  25025091200      Guns 2014 10.80  2014-01-01 #> 636  25025091200      Guns 2015 11.58  2015-01-01 #> 637  25025091200      Guns 2016  9.60  2016-01-01 #> 638  25025091200      Guns 2017 15.88  2017-01-01 #> 639  25025091200      Guns 2018  8.27  2018-01-01 #> 640  25025091200      Guns 2019  3.98  2019-01-01 #> 641  25025091100      Guns 2010  0.00  2010-01-01 #> 642  25025091100      Guns 2011  2.34  2011-01-01 #> 643  25025091100      Guns 2012  2.64  2012-01-01 #> 644  25025091100      Guns 2013  2.92  2013-01-01 #> 645  25025091100      Guns 2014  2.44  2014-01-01 #> 646  25025091100      Guns 2015  1.78  2015-01-01 #> 647  25025091100      Guns 2016  1.19  2016-01-01 #> 648  25025091100      Guns 2017  2.78  2017-01-01 #> 649  25025091100      Guns 2018  2.78  2018-01-01 #> 650  25025091100      Guns 2019  1.89  2019-01-01 #> 651  25025090700      Guns 2010  0.24  2010-01-01 #> 652  25025090700      Guns 2011  2.76  2011-01-01 #> 653  25025090700      Guns 2012  2.20  2012-01-01 #> 654  25025090700      Guns 2013  4.34  2013-01-01 #> 655  25025090700      Guns 2014  4.62  2014-01-01 #> 656  25025090700      Guns 2015  4.55  2015-01-01 #> 657  25025090700      Guns 2016  4.79  2016-01-01 #> 658  25025090700      Guns 2017  4.79  2017-01-01 #> 659  25025090700      Guns 2018  3.59  2018-01-01 #> 660  25025090700      Guns 2019  6.44  2019-01-01 #> 661  25025090600      Guns 2010  1.39  2010-01-01 #> 662  25025090600      Guns 2011 12.66  2011-01-01 #> 663  25025090600      Guns 2012 10.00  2012-01-01 #> 664  25025090600      Guns 2013 15.83  2013-01-01 #> 665  25025090600      Guns 2014 15.11  2014-01-01 #> 666  25025090600      Guns 2015  8.19  2015-01-01 #> 667  25025090600      Guns 2016  9.83  2016-01-01 #> 668  25025090600      Guns 2017 11.06  2017-01-01 #> 669  25025090600      Guns 2018  6.96  2018-01-01 #> 670  25025090600      Guns 2019 11.16  2019-01-01 #> 671  25025090400      Guns 2010  2.46  2010-01-01 #> 672  25025090400      Guns 2011 10.09  2011-01-01 #> 673  25025090400      Guns 2012 15.82  2012-01-01 #> 674  25025090400      Guns 2013  9.84  2013-01-01 #> 675  25025090400      Guns 2014  6.19  2014-01-01 #> 676  25025090400      Guns 2015  7.42  2015-01-01 #> 677  25025090400      Guns 2016  5.34  2016-01-01 #> 678  25025090400      Guns 2017  7.42  2017-01-01 #> 679  25025090400      Guns 2018  7.66  2018-01-01 #> 680  25025090400      Guns 2019  6.72  2019-01-01 #> 681  25025090300      Guns 2010  0.31  2010-01-01 #> 682  25025090300      Guns 2011 16.33  2011-01-01 #> 683  25025090300      Guns 2012  7.95  2012-01-01 #> 684  25025090300      Guns 2013 11.29  2013-01-01 #> 685  25025090300      Guns 2014 12.36  2014-01-01 #> 686  25025090300      Guns 2015 15.34  2015-01-01 #> 687  25025090300      Guns 2016 13.28  2016-01-01 #> 688  25025090300      Guns 2017 12.98  2017-01-01 #> 689  25025090300      Guns 2018  6.49  2018-01-01 #> 690  25025090300      Guns 2019  9.22  2019-01-01 #> 691  25025090200      Guns 2010  2.04  2010-01-01 #> 692  25025090200      Guns 2011 13.87  2011-01-01 #> 693  25025090200      Guns 2012 14.25  2012-01-01 #> 694  25025090200      Guns 2013 18.88  2013-01-01 #> 695  25025090200      Guns 2014 15.72  2014-01-01 #> 696  25025090200      Guns 2015 14.26  2015-01-01 #> 697  25025090200      Guns 2016 17.52  2016-01-01 #> 698  25025090200      Guns 2017 11.00  2017-01-01 #> 699  25025090200      Guns 2018 11.41  2018-01-01 #> 700  25025090200      Guns 2019 12.76  2019-01-01 #> 701  25025040801      Guns 2010  0.58  2010-01-01 #> 702  25025040801      Guns 2011  3.69  2011-01-01 #> 703  25025040801      Guns 2012  1.68  2012-01-01 #> 704  25025040801      Guns 2013  7.08  2013-01-01 #> 705  25025040801      Guns 2014  4.11  2014-01-01 #> 706  25025040801      Guns 2015  2.90  2015-01-01 #> 707  25025040801      Guns 2016  5.13  2016-01-01 #> 708  25025040801      Guns 2017  3.12  2017-01-01 #> 709  25025040801      Guns 2018  4.68  2018-01-01 #> 710  25025040801      Guns 2019  1.83  2019-01-01 #> 711  25025010203      Guns 2010  0.42  2010-01-01 #> 712  25025010203      Guns 2011  1.47  2011-01-01 #> 713  25025010203      Guns 2012  1.05  2012-01-01 #> 714  25025010203      Guns 2013  1.21  2013-01-01 #> 715  25025010203      Guns 2014  2.17  2014-01-01 #> 716  25025010203      Guns 2015  3.29  2015-01-01 #> 717  25025010203      Guns 2016  2.71  2016-01-01 #> 718  25025010203      Guns 2017  1.35  2017-01-01 #> 719  25025010203      Guns 2018  1.93  2018-01-01 #> 720  25025010203      Guns 2019  1.49  2019-01-01 #> 721  25025110403      Guns 2010  0.00  2010-01-01 #> 722  25025110403      Guns 2011  1.00  2011-01-01 #> 723  25025110403      Guns 2012  1.01  2012-01-01 #> 724  25025110403      Guns 2013  1.91  2013-01-01 #> 725  25025110403      Guns 2014  1.53  2014-01-01 #> 726  25025110403      Guns 2015  0.67  2015-01-01 #> 727  25025110403      Guns 2016  1.33  2016-01-01 #> 728  25025110403      Guns 2017  2.89  2017-01-01 #> 729  25025110403      Guns 2018  0.44  2018-01-01 #> 730  25025110403      Guns 2019  1.77  2019-01-01 #> 731  25025110201      Guns 2010  0.00  2010-01-01 #> 732  25025110201      Guns 2011  0.90  2011-01-01 #> 733  25025110201      Guns 2012  2.23  2012-01-01 #> 734  25025110201      Guns 2013  5.46  2013-01-01 #> 735  25025110201      Guns 2014  3.23  2014-01-01 #> 736  25025110201      Guns 2015  5.18  2015-01-01 #> 737  25025110201      Guns 2016  2.39  2016-01-01 #> 738  25025110201      Guns 2017  3.58  2017-01-01 #> 739  25025110201      Guns 2018  3.18  2018-01-01 #> 740  25025110201      Guns 2019  3.56  2019-01-01 #> 741  25025090100      Guns 2010  1.82  2010-01-01 #> 742  25025090100      Guns 2011  8.39  2011-01-01 #> 743  25025090100      Guns 2012  8.38  2012-01-01 #> 744  25025090100      Guns 2013 18.91  2013-01-01 #> 745  25025090100      Guns 2014 11.29  2014-01-01 #> 746  25025090100      Guns 2015 12.73  2015-01-01 #> 747  25025090100      Guns 2016 15.36  2016-01-01 #> 748  25025090100      Guns 2017 11.72  2017-01-01 #> 749  25025090100      Guns 2018 12.33  2018-01-01 #> 750  25025090100      Guns 2019 10.10  2019-01-01 #> 751  25025082100      Guns 2010  1.00  2010-01-01 #> 752  25025082100      Guns 2011 10.76  2011-01-01 #> 753  25025082100      Guns 2012  5.59  2012-01-01 #> 754  25025082100      Guns 2013 14.69  2013-01-01 #> 755  25025082100      Guns 2014 13.54  2014-01-01 #> 756  25025082100      Guns 2015  8.71  2015-01-01 #> 757  25025082100      Guns 2016 12.79  2016-01-01 #> 758  25025082100      Guns 2017 14.08  2017-01-01 #> 759  25025082100      Guns 2018  7.04  2018-01-01 #> 760  25025082100      Guns 2019  7.30  2019-01-01 #> 761  25025082000      Guns 2010  0.00  2010-01-01 #> 762  25025082000      Guns 2011 13.75  2011-01-01 #> 763  25025082000      Guns 2012 12.50  2012-01-01 #> 764  25025082000      Guns 2013 11.01  2013-01-01 #> 765  25025082000      Guns 2014  9.91  2014-01-01 #> 766  25025082000      Guns 2015 10.32  2015-01-01 #> 767  25025082000      Guns 2016 11.70  2016-01-01 #> 768  25025082000      Guns 2017  7.91  2017-01-01 #> 769  25025082000      Guns 2018  5.85  2018-01-01 #> 770  25025082000      Guns 2019  6.16  2019-01-01 #> 771  25025081900      Guns 2010  1.04  2010-01-01 #> 772  25025081900      Guns 2011 11.21  2011-01-01 #> 773  25025081900      Guns 2012 13.37  2012-01-01 #> 774  25025081900      Guns 2013 21.91  2013-01-01 #> 775  25025081900      Guns 2014 17.31  2014-01-01 #> 776  25025081900      Guns 2015 16.07  2015-01-01 #> 777  25025081900      Guns 2016 18.33  2016-01-01 #> 778  25025081900      Guns 2017 10.71  2017-01-01 #> 779  25025081900      Guns 2018  7.61  2018-01-01 #> 780  25025081900      Guns 2019 11.73  2019-01-01 #> 781  25025081800      Guns 2010  2.22  2010-01-01 #> 782  25025081800      Guns 2011 12.99  2011-01-01 #> 783  25025081800      Guns 2012  9.06  2012-01-01 #> 784  25025081800      Guns 2013 18.11  2013-01-01 #> 785  25025081800      Guns 2014 12.84  2014-01-01 #> 786  25025081800      Guns 2015 10.18  2015-01-01 #> 787  25025081800      Guns 2016 10.18  2016-01-01 #> 788  25025081800      Guns 2017 13.01  2017-01-01 #> 789  25025081800      Guns 2018  9.90  2018-01-01 #> 790  25025081800      Guns 2019  6.59  2019-01-01 #> 791  25025081700      Guns 2010  0.87  2010-01-01 #> 792  25025081700      Guns 2011  9.46  2011-01-01 #> 793  25025081700      Guns 2012 15.42  2012-01-01 #> 794  25025081700      Guns 2013 21.58  2013-01-01 #> 795  25025081700      Guns 2014 17.33  2014-01-01 #> 796  25025081700      Guns 2015 15.46  2015-01-01 #> 797  25025081700      Guns 2016 14.43  2016-01-01 #> 798  25025081700      Guns 2017 14.43  2017-01-01 #> 799  25025081700      Guns 2018  8.24  2018-01-01 #> 800  25025081700      Guns 2019 15.90  2019-01-01 #> 801  25025081500      Guns 2010  0.00  2010-01-01 #> 802  25025081500      Guns 2011  7.06  2011-01-01 #> 803  25025081500      Guns 2012 11.39  2012-01-01 #> 804  25025081500      Guns 2013  6.41  2013-01-01 #> 805  25025081500      Guns 2014  7.58  2014-01-01 #> 806  25025081500      Guns 2015  5.30  2015-01-01 #> 807  25025081500      Guns 2016  5.30  2016-01-01 #> 808  25025081500      Guns 2017  5.30  2017-01-01 #> 809  25025081500      Guns 2018 11.01  2018-01-01 #> 810  25025081500      Guns 2019  7.65  2019-01-01 #> 811  25025081400      Guns 2010  0.74  2010-01-01 #> 812  25025081400      Guns 2011  5.10  2011-01-01 #> 813  25025081400      Guns 2012  2.74  2012-01-01 #> 814  25025081400      Guns 2013  5.94  2013-01-01 #> 815  25025081400      Guns 2014  6.17  2014-01-01 #> 816  25025081400      Guns 2015  6.51  2015-01-01 #> 817  25025081400      Guns 2016  7.88  2016-01-01 #> 818  25025081400      Guns 2017 11.30  2017-01-01 #> 819  25025081400      Guns 2018  6.51  2018-01-01 #> 820  25025081400      Guns 2019  7.14  2019-01-01 #> 821  25025081300      Guns 2010  0.58  2010-01-01 #> 822  25025081300      Guns 2011 10.41  2011-01-01 #> 823  25025081300      Guns 2012  5.21  2012-01-01 #> 824  25025081300      Guns 2013 13.63  2013-01-01 #> 825  25025081300      Guns 2014 12.26  2014-01-01 #> 826  25025081300      Guns 2015 14.89  2015-01-01 #> 827  25025081300      Guns 2016 14.35  2016-01-01 #> 828  25025081300      Guns 2017 13.46  2017-01-01 #> 829  25025081300      Guns 2018 10.95  2018-01-01 #> 830  25025081300      Guns 2019  8.26  2019-01-01 #> 831  25025110103      Guns 2010  0.68  2010-01-01 #> 832  25025110103      Guns 2011  3.59  2011-01-01 #> 833  25025110103      Guns 2012  3.69  2012-01-01 #> 834  25025110103      Guns 2013  3.20  2013-01-01 #> 835  25025110103      Guns 2014  2.14  2014-01-01 #> 836  25025110103      Guns 2015  4.76  2015-01-01 #> 837  25025110103      Guns 2016  2.54  2016-01-01 #> 838  25025110103      Guns 2017  2.54  2017-01-01 #> 839  25025110103      Guns 2018  1.59  2018-01-01 #> 840  25025110103      Guns 2019  2.10  2019-01-01 #> 841  25025110301      Guns 2010  0.39  2010-01-01 #> 842  25025110301      Guns 2011  2.42  2011-01-01 #> 843  25025110301      Guns 2012  2.76  2012-01-01 #> 844  25025110301      Guns 2013  2.25  2013-01-01 #> 845  25025110301      Guns 2014  1.84  2014-01-01 #> 846  25025110301      Guns 2015  2.60  2015-01-01 #> 847  25025110301      Guns 2016  2.23  2016-01-01 #> 848  25025110301      Guns 2017  4.46  2017-01-01 #> 849  25025110301      Guns 2018  2.60  2018-01-01 #> 850  25025110301      Guns 2019  2.94  2019-01-01 #> 851  25025140106      Guns 2010  0.00  2010-01-01 #> 852  25025140106      Guns 2011  0.00  2011-01-01 #> 853  25025140106      Guns 2012  1.10  2012-01-01 #> 854  25025140106      Guns 2013  1.60  2013-01-01 #> 855  25025140106      Guns 2014  1.05  2014-01-01 #> 856  25025140106      Guns 2015  3.21  2015-01-01 #> 857  25025140106      Guns 2016  2.75  2016-01-01 #> 858  25025140106      Guns 2017  2.29  2017-01-01 #> 859  25025140106      Guns 2018  0.92  2018-01-01 #> 860  25025140106      Guns 2019  1.37  2019-01-01 #> 861  25025010701      Guns 2010  0.00  2010-01-01 #> 862  25025010701      Guns 2011  0.68  2011-01-01 #> 863  25025010701      Guns 2012  0.68  2012-01-01 #> 864  25025010701      Guns 2013  1.06  2013-01-01 #> 865  25025010701      Guns 2014  1.43  2014-01-01 #> 866  25025010701      Guns 2015  1.48  2015-01-01 #> 867  25025010701      Guns 2016  1.11  2016-01-01 #> 868  25025010701      Guns 2017  3.33  2017-01-01 #> 869  25025010701      Guns 2018  1.85  2018-01-01 #> 870  25025010701      Guns 2019  4.67  2019-01-01 #> 871  25025010408      Guns 2010  0.00  2010-01-01 #> 872  25025010408      Guns 2011  0.68  2011-01-01 #> 873  25025010408      Guns 2012  1.33  2012-01-01 #> 874  25025010408      Guns 2013  1.35  2013-01-01 #> 875  25025010408      Guns 2014  2.13  2014-01-01 #> 876  25025010408      Guns 2015  0.72  2015-01-01 #> 877  25025010408      Guns 2016  0.72  2016-01-01 #> 878  25025010408      Guns 2017  0.72  2017-01-01 #> 879  25025010408      Guns 2018  0.00  2018-01-01 #> 880  25025010408      Guns 2019  0.00  2019-01-01 #> 881  25025000503      Guns 2010  0.00  2010-01-01 #> 882  25025000503      Guns 2011  1.03  2011-01-01 #> 883  25025000503      Guns 2012  0.53  2012-01-01 #> 884  25025000503      Guns 2013  2.39  2013-01-01 #> 885  25025000503      Guns 2014  0.00  2014-01-01 #> 886  25025000503      Guns 2015  0.94  2015-01-01 #> 887  25025000503      Guns 2016  0.94  2016-01-01 #> 888  25025000503      Guns 2017  0.94  2017-01-01 #> 889  25025000503      Guns 2018  0.00  2018-01-01 #> 890  25025000503      Guns 2019  1.00  2019-01-01 #> 891  25025081200      Guns 2010  0.57  2010-01-01 #> 892  25025081200      Guns 2011  5.55  2011-01-01 #> 893  25025081200      Guns 2012 11.90  2012-01-01 #> 894  25025081200      Guns 2013 16.06  2013-01-01 #> 895  25025081200      Guns 2014 11.42  2014-01-01 #> 896  25025081200      Guns 2015 24.60  2015-01-01 #> 897  25025081200      Guns 2016 20.69  2016-01-01 #> 898  25025081200      Guns 2017 20.69  2017-01-01 #> 899  25025081200      Guns 2018 12.30  2018-01-01 #> 900  25025081200      Guns 2019 15.01  2019-01-01 #> 901  25025081100      Guns 2010  0.00  2010-01-01 #> 902  25025081100      Guns 2011  2.19  2011-01-01 #> 903  25025081100      Guns 2012  2.85  2012-01-01 #> 904  25025081100      Guns 2013  2.34  2013-01-01 #> 905  25025081100      Guns 2014  4.33  2014-01-01 #> 906  25025081100      Guns 2015  2.90  2015-01-01 #> 907  25025081100      Guns 2016  4.35  2016-01-01 #> 908  25025081100      Guns 2017  7.01  2017-01-01 #> 909  25025081100      Guns 2018  3.14  2018-01-01 #> 910  25025081100      Guns 2019  5.14  2019-01-01 #> 911  25025080900      Guns 2010  0.58  2010-01-01 #> 912  25025080900      Guns 2011  3.21  2011-01-01 #> 913  25025080900      Guns 2012  2.67  2012-01-01 #> 914  25025080900      Guns 2013  2.87  2013-01-01 #> 915  25025080900      Guns 2014  3.22  2014-01-01 #> 916  25025080900      Guns 2015  2.11  2015-01-01 #> 917  25025080900      Guns 2016  2.38  2016-01-01 #> 918  25025080900      Guns 2017  2.64  2017-01-01 #> 919  25025080900      Guns 2018  0.53  2018-01-01 #> 920  25025080900      Guns 2019  0.27  2019-01-01 #> 921  25025080801      Guns 2010  0.58  2010-01-01 #> 922  25025080801      Guns 2011 11.00  2011-01-01 #> 923  25025080801      Guns 2012  6.50  2012-01-01 #> 924  25025080801      Guns 2013  9.68  2013-01-01 #> 925  25025080801      Guns 2014  9.77  2014-01-01 #> 926  25025080801      Guns 2015 12.24  2015-01-01 #> 927  25025080801      Guns 2016  7.79  2016-01-01 #> 928  25025080801      Guns 2017 10.68  2017-01-01 #> 929  25025080801      Guns 2018  6.90  2018-01-01 #> 930  25025080801      Guns 2019  6.20  2019-01-01 #> 931  25025080601      Guns 2010  0.59  2010-01-01 #> 932  25025080601      Guns 2011  5.32  2011-01-01 #> 933  25025080601      Guns 2012  6.04  2012-01-01 #> 934  25025080601      Guns 2013  7.71  2013-01-01 #> 935  25025080601      Guns 2014  8.62  2014-01-01 #> 936  25025080601      Guns 2015 14.31  2015-01-01 #> 937  25025080601      Guns 2016 13.61  2016-01-01 #> 938  25025080601      Guns 2017 11.54  2017-01-01 #> 939  25025080601      Guns 2018  6.46  2018-01-01 #> 940  25025080601      Guns 2019  6.30  2019-01-01 #> 941  25025080500      Guns 2010  1.52  2010-01-01 #> 942  25025080500      Guns 2011 12.63  2011-01-01 #> 943  25025080500      Guns 2012 14.64  2012-01-01 #> 944  25025080500      Guns 2013 14.30  2013-01-01 #> 945  25025080500      Guns 2014  9.39  2014-01-01 #> 946  25025080500      Guns 2015 12.17  2015-01-01 #> 947  25025080500      Guns 2016 13.77  2016-01-01 #> 948  25025080500      Guns 2017  9.93  2017-01-01 #> 949  25025080500      Guns 2018  4.16  2018-01-01 #> 950  25025080500      Guns 2019  5.29  2019-01-01 #> 951  25025080401      Guns 2010  1.99  2010-01-01 #> 952  25025080401      Guns 2011  5.11  2011-01-01 #> 953  25025080401      Guns 2012  5.64  2012-01-01 #> 954  25025080401      Guns 2013 10.35  2013-01-01 #> 955  25025080401      Guns 2014 14.06  2014-01-01 #> 956  25025080401      Guns 2015 16.82  2015-01-01 #> 957  25025080401      Guns 2016 15.53  2016-01-01 #> 958  25025080401      Guns 2017 21.03  2017-01-01 #> 959  25025080401      Guns 2018 11.32  2018-01-01 #> 960  25025080401      Guns 2019 10.11  2019-01-01 #> 961  25025080300      Guns 2010  4.15  2010-01-01 #> 962  25025080300      Guns 2011 10.81  2011-01-01 #> 963  25025080300      Guns 2012  9.76  2012-01-01 #> 964  25025080300      Guns 2013 23.18  2013-01-01 #> 965  25025080300      Guns 2014 18.80  2014-01-01 #> 966  25025080300      Guns 2015 19.64  2015-01-01 #> 967  25025080300      Guns 2016 12.38  2016-01-01 #> 968  25025080300      Guns 2017 17.51  2017-01-01 #> 969  25025080300      Guns 2018 12.38  2018-01-01 #> 970  25025080300      Guns 2019  8.62  2019-01-01 #> 971  25025071101      Guns 2010  1.79  2010-01-01 #> 972  25025071101      Guns 2011  8.60  2011-01-01 #> 973  25025071101      Guns 2012  7.70  2012-01-01 #> 974  25025071101      Guns 2013 10.82  2013-01-01 #> 975  25025071101      Guns 2014 11.08  2014-01-01 #> 976  25025071101      Guns 2015 10.03  2015-01-01 #> 977  25025071101      Guns 2016 12.90  2016-01-01 #> 978  25025071101      Guns 2017 12.90  2017-01-01 #> 979  25025071101      Guns 2018 12.66  2018-01-01 #> 980  25025071101      Guns 2019  9.79  2019-01-01 #> 981  25025070900      Guns 2010  0.67  2010-01-01 #> 982  25025070900      Guns 2011  2.70  2011-01-01 #> 983  25025070900      Guns 2012  4.99  2012-01-01 #> 984  25025070900      Guns 2013  3.17  2013-01-01 #> 985  25025070900      Guns 2014  8.24  2014-01-01 #> 986  25025070900      Guns 2015  9.78  2015-01-01 #> 987  25025070900      Guns 2016  7.75  2016-01-01 #> 988  25025070900      Guns 2017 10.11  2017-01-01 #> 989  25025070900      Guns 2018  2.36  2018-01-01 #> 990  25025070900      Guns 2019  5.70  2019-01-01 #> 991  25025140107      Guns 2010  0.00  2010-01-01 #> 992  25025140107      Guns 2011  3.08  2011-01-01 #> 993  25025140107      Guns 2012  1.04  2012-01-01 #> 994  25025140107      Guns 2013  1.72  2013-01-01 #> 995  25025140107      Guns 2014  1.97  2014-01-01 #> 996  25025140107      Guns 2015  0.74  2015-01-01 #> 997  25025140107      Guns 2016  1.12  2016-01-01 #> 998  25025140107      Guns 2017  3.72  2017-01-01 #> 999  25025140107      Guns 2018  1.49  2018-01-01 #> 1000 25025140107      Guns 2019  4.36  2019-01-01 #> 1001 25025130404      Guns 2010  0.34  2010-01-01 #> 1002 25025130404      Guns 2011  0.98  2011-01-01 #> 1003 25025130404      Guns 2012  0.30  2012-01-01 #> 1004 25025130404      Guns 2013  3.60  2013-01-01 #> 1005 25025130404      Guns 2014  1.87  2014-01-01 #> 1006 25025130404      Guns 2015  1.53  2015-01-01 #> 1007 25025130404      Guns 2016  1.53  2016-01-01 #> 1008 25025130404      Guns 2017  1.53  2017-01-01 #> 1009 25025130404      Guns 2018  0.00  2018-01-01 #> 1010 25025130404      Guns 2019  0.87  2019-01-01 #> 1011 25025130406      Guns 2010  0.00  2010-01-01 #> 1012 25025130406      Guns 2011  2.61  2011-01-01 #> 1013 25025130406      Guns 2012  1.13  2012-01-01 #> 1014 25025130406      Guns 2013  1.85  2013-01-01 #> 1015 25025130406      Guns 2014  1.77  2014-01-01 #> 1016 25025130406      Guns 2015  0.83  2015-01-01 #> 1017 25025130406      Guns 2016  1.66  2016-01-01 #> 1018 25025130406      Guns 2017  1.16  2017-01-01 #> 1019 25025130406      Guns 2018  0.50  2018-01-01 #> 1020 25025130406      Guns 2019  0.79  2019-01-01 #> 1021 25025120103      Guns 2010  0.00  2010-01-01 #> 1022 25025120103      Guns 2011  0.63  2011-01-01 #> 1023 25025120103      Guns 2012  0.00  2012-01-01 #> 1024 25025120103      Guns 2013  0.62  2013-01-01 #> 1025 25025120103      Guns 2014  1.81  2014-01-01 #> 1026 25025120103      Guns 2015  5.29  2015-01-01 #> 1027 25025120103      Guns 2016  0.59  2016-01-01 #> 1028 25025120103      Guns 2017  0.00  2017-01-01 #> 1029 25025120103      Guns 2018  5.29  2018-01-01 #> 1030 25025120103      Guns 2019  1.80  2019-01-01 #> 1031 25025100700      Guns 2010  0.69  2010-01-01 #> 1032 25025100700      Guns 2011  2.05  2011-01-01 #> 1033 25025100700      Guns 2012  0.67  2012-01-01 #> 1034 25025100700      Guns 2013  1.14  2013-01-01 #> 1035 25025100700      Guns 2014  1.34  2014-01-01 #> 1036 25025100700      Guns 2015  0.45  2015-01-01 #> 1037 25025100700      Guns 2016  0.91  2016-01-01 #> 1038 25025100700      Guns 2017  1.81  2017-01-01 #> 1039 25025100700      Guns 2018  1.13  2018-01-01 #> 1040 25025100700      Guns 2019  0.46  2019-01-01 #> 1041 25025100603      Guns 2010  0.00  2010-01-01 #> 1042 25025100603      Guns 2011  4.19  2011-01-01 #> 1043 25025100603      Guns 2012  1.96  2012-01-01 #> 1044 25025100603      Guns 2013  0.98  2013-01-01 #> 1045 25025100603      Guns 2014  1.93  2014-01-01 #> 1046 25025100603      Guns 2015  4.30  2015-01-01 #> 1047 25025100603      Guns 2016  0.48  2016-01-01 #> 1048 25025100603      Guns 2017  4.30  2017-01-01 #> 1049 25025100603      Guns 2018  1.91  2018-01-01 #> 1050 25025100603      Guns 2019  3.04  2019-01-01 #> 1051 25025092101      Guns 2010  1.33  2010-01-01 #> 1052 25025092101      Guns 2011  5.76  2011-01-01 #> 1053 25025092101      Guns 2012  3.42  2012-01-01 #> 1054 25025092101      Guns 2013  5.35  2013-01-01 #> 1055 25025092101      Guns 2014  7.70  2014-01-01 #> 1056 25025092101      Guns 2015  3.36  2015-01-01 #> 1057 25025092101      Guns 2016  4.90  2016-01-01 #> 1058 25025092101      Guns 2017  5.74  2017-01-01 #> 1059 25025092101      Guns 2018  4.06  2018-01-01 #> 1060 25025092101      Guns 2019  3.76  2019-01-01 #> 1061 25025061101      Guns 2010  0.91  2010-01-01 #> 1062 25025061101      Guns 2011  3.34  2011-01-01 #> 1063 25025061101      Guns 2012  5.29  2012-01-01 #> 1064 25025061101      Guns 2013  5.54  2013-01-01 #> 1065 25025061101      Guns 2014  6.33  2014-01-01 #> 1066 25025061101      Guns 2015 11.49  2015-01-01 #> 1067 25025061101      Guns 2016 12.37  2016-01-01 #> 1068 25025061101      Guns 2017 11.93  2017-01-01 #> 1069 25025061101      Guns 2018 10.16  2018-01-01 #> 1070 25025061101      Guns 2019  9.57  2019-01-01 #> 1071 25025070800      Guns 2010  0.27  2010-01-01 #> 1072 25025070800      Guns 2011  3.51  2011-01-01 #> 1073 25025070800      Guns 2012  3.25  2012-01-01 #> 1074 25025070800      Guns 2013  4.30  2013-01-01 #> 1075 25025070800      Guns 2014  6.44  2014-01-01 #> 1076 25025070800      Guns 2015  4.06  2015-01-01 #> 1077 25025070800      Guns 2016  1.45  2016-01-01 #> 1078 25025070800      Guns 2017  1.45  2017-01-01 #> 1079 25025070800      Guns 2018  3.19  2018-01-01 #> 1080 25025070800      Guns 2019  2.24  2019-01-01 #> 1081 25025070700      Guns 2010  0.00  2010-01-01 #> 1082 25025070700      Guns 2011  2.49  2011-01-01 #> 1083 25025070700      Guns 2012  1.34  2012-01-01 #> 1084 25025070700      Guns 2013  3.37  2013-01-01 #> 1085 25025070700      Guns 2014  2.19  2014-01-01 #> 1086 25025070700      Guns 2015  1.08  2015-01-01 #> 1087 25025070700      Guns 2016  2.52  2016-01-01 #> 1088 25025070700      Guns 2017  1.08  2017-01-01 #> 1089 25025070700      Guns 2018  2.52  2018-01-01 #> 1090 25025070700      Guns 2019  2.19  2019-01-01 #> 1091 25025070600      Guns 2010  0.00  2010-01-01 #> 1092 25025070600      Guns 2011  1.30  2011-01-01 #> 1093 25025070600      Guns 2012  1.68  2012-01-01 #> 1094 25025070600      Guns 2013  2.15  2013-01-01 #> 1095 25025070600      Guns 2014  2.41  2014-01-01 #> 1096 25025070600      Guns 2015  3.59  2015-01-01 #> 1097 25025070600      Guns 2016  2.39  2016-01-01 #> 1098 25025070600      Guns 2017  0.40  2017-01-01 #> 1099 25025070600      Guns 2018  1.20  2018-01-01 #> 1100 25025070600      Guns 2019  2.34  2019-01-01 #> 1101 25025070500      Guns 2010  0.16  2010-01-01 #> 1102 25025070500      Guns 2011  2.79  2011-01-01 #> 1103 25025070500      Guns 2012  3.86  2012-01-01 #> 1104 25025070500      Guns 2013  6.76  2013-01-01 #> 1105 25025070500      Guns 2014  7.30  2014-01-01 #> 1106 25025070500      Guns 2015  6.94  2015-01-01 #> 1107 25025070500      Guns 2016  7.79  2016-01-01 #> 1108 25025070500      Guns 2017  2.88  2017-01-01 #> 1109 25025070500      Guns 2018  2.20  2018-01-01 #> 1110 25025070500      Guns 2019  3.29  2019-01-01 #> 1111 25025070300      Guns 2010  0.45  2010-01-01 #> 1112 25025070300      Guns 2011  0.91  2011-01-01 #> 1113 25025070300      Guns 2012  0.22  2012-01-01 #> 1114 25025070300      Guns 2013  1.61  2013-01-01 #> 1115 25025070300      Guns 2014  0.44  2014-01-01 #> 1116 25025070300      Guns 2015  1.12  2015-01-01 #> 1117 25025070300      Guns 2016  1.12  2016-01-01 #> 1118 25025070300      Guns 2017  2.69  2017-01-01 #> 1119 25025070300      Guns 2018  1.35  2018-01-01 #> 1120 25025070300      Guns 2019  1.34  2019-01-01 #> 1121 25025070200      Guns 2010  0.19  2010-01-01 #> 1122 25025070200      Guns 2011  3.26  2011-01-01 #> 1123 25025070200      Guns 2012  3.30  2012-01-01 #> 1124 25025070200      Guns 2013  2.10  2013-01-01 #> 1125 25025070200      Guns 2014  2.66  2014-01-01 #> 1126 25025070200      Guns 2015  2.36  2015-01-01 #> 1127 25025070200      Guns 2016  2.54  2016-01-01 #> 1128 25025070200      Guns 2017  4.00  2017-01-01 #> 1129 25025070200      Guns 2018  3.45  2018-01-01 #> 1130 25025070200      Guns 2019  2.67  2019-01-01 #> 1131 25025070101      Guns 2010  0.36  2010-01-01 #> 1132 25025070101      Guns 2011  3.04  2011-01-01 #> 1133 25025070101      Guns 2012  2.73  2012-01-01 #> 1134 25025070101      Guns 2013  7.06  2013-01-01 #> 1135 25025070101      Guns 2014  6.76  2014-01-01 #> 1136 25025070101      Guns 2015  7.08  2015-01-01 #> 1137 25025070101      Guns 2016  8.93  2016-01-01 #> 1138 25025070101      Guns 2017 10.62  2017-01-01 #> 1139 25025070101      Guns 2018  9.08  2018-01-01 #> 1140 25025070101      Guns 2019  5.09  2019-01-01 #> 1141 25025061200      Guns 2010  0.59  2010-01-01 #> 1142 25025061200      Guns 2011  1.54  2011-01-01 #> 1143 25025061200      Guns 2012  3.18  2012-01-01 #> 1144 25025061200      Guns 2013  4.51  2013-01-01 #> 1145 25025061200      Guns 2014  2.05  2014-01-01 #> 1146 25025061200      Guns 2015  3.52  2015-01-01 #> 1147 25025061200      Guns 2016  1.64  2016-01-01 #> 1148 25025061200      Guns 2017  3.28  2017-01-01 #> 1149 25025061200      Guns 2018  6.10  2018-01-01 #> 1150 25025061200      Guns 2019  3.90  2019-01-01 #> 1151 25025061000      Guns 2010  0.30  2010-01-01 #> 1152 25025061000      Guns 2011  0.60  2011-01-01 #> 1153 25025061000      Guns 2012  2.47  2012-01-01 #> 1154 25025061000      Guns 2013  3.45  2013-01-01 #> 1155 25025061000      Guns 2014  1.91  2014-01-01 #> 1156 25025061000      Guns 2015  3.64  2015-01-01 #> 1157 25025061000      Guns 2016  3.04  2016-01-01 #> 1158 25025061000      Guns 2017 10.02  2017-01-01 #> 1159 25025061000      Guns 2018  6.68  2018-01-01 #> 1160 25025061000      Guns 2019  2.79  2019-01-01 #> 1161 25025060800      Guns 2010  0.00  2010-01-01 #> 1162 25025060800      Guns 2011  0.67  2011-01-01 #> 1163 25025060800      Guns 2012  0.66  2012-01-01 #> 1164 25025060800      Guns 2013  1.76  2013-01-01 #> 1165 25025060800      Guns 2014  0.45  2014-01-01 #> 1166 25025060800      Guns 2015  3.20  2015-01-01 #> 1167 25025060800      Guns 2016  1.83  2016-01-01 #> 1168 25025060800      Guns 2017  3.43  2017-01-01 #> 1169 25025060800      Guns 2018  4.12  2018-01-01 #> 1170 25025060800      Guns 2019  1.62  2019-01-01 #> 1171 25025060700      Guns 2010  0.00  2010-01-01 #> 1172 25025060700      Guns 2011  2.12  2011-01-01 #> 1173 25025060700      Guns 2012  6.14  2012-01-01 #> 1174 25025060700      Guns 2013  3.13  2013-01-01 #> 1175 25025060700      Guns 2014  5.07  2014-01-01 #> 1176 25025060700      Guns 2015  9.53  2015-01-01 #> 1177 25025060700      Guns 2016  3.81  2016-01-01 #> 1178 25025060700      Guns 2017 21.34  2017-01-01 #> 1179 25025060700      Guns 2018 15.62  2018-01-01 #> 1180 25025060700      Guns 2019  3.06  2019-01-01 #> 1181 25025080100      Guns 2010  1.67  2010-01-01 #> 1182 25025080100      Guns 2011  5.97  2011-01-01 #> 1183 25025080100      Guns 2012  6.63  2012-01-01 #> 1184 25025080100      Guns 2013 15.28  2013-01-01 #> 1185 25025080100      Guns 2014  8.66  2014-01-01 #> 1186 25025080100      Guns 2015 11.75  2015-01-01 #> 1187 25025080100      Guns 2016 18.72  2016-01-01 #> 1188 25025080100      Guns 2017 13.22  2017-01-01 #> 1189 25025080100      Guns 2018 23.13  2018-01-01 #> 1190 25025080100      Guns 2019 12.27  2019-01-01 #> 1191 25025060301      Guns 2010  0.33  2010-01-01 #> 1192 25025060301      Guns 2011  0.97  2011-01-01 #> 1193 25025060301      Guns 2012  0.63  2012-01-01 #> 1194 25025060301      Guns 2013  0.00  2013-01-01 #> 1195 25025060301      Guns 2014  0.29  2014-01-01 #> 1196 25025060301      Guns 2015  1.40  2015-01-01 #> 1197 25025060301      Guns 2016  0.56  2016-01-01 #> 1198 25025060301      Guns 2017  0.00  2017-01-01 #> 1199 25025060301      Guns 2018  0.84  2018-01-01 #> 1200 25025060301      Guns 2019  0.00  2019-01-01 #> 1201 25025090901      Guns 2010  0.00  2010-01-01 #> 1202 25025090901      Guns 2011  2.30  2011-01-01 #> 1203 25025090901      Guns 2012  1.89  2012-01-01 #> 1204 25025090901      Guns 2013  1.04  2013-01-01 #> 1205 25025090901      Guns 2014  2.30  2014-01-01 #> 1206 25025090901      Guns 2015  1.04  2015-01-01 #> 1207 25025090901      Guns 2016  1.82  2016-01-01 #> 1208 25025090901      Guns 2017  1.56  2017-01-01 #> 1209 25025090901      Guns 2018  1.82  2018-01-01 #> 1210 25025090901      Guns 2019  1.32  2019-01-01 #> 1211 25025060101      Guns 2010  0.00  2010-01-01 #> 1212 25025060101      Guns 2011  1.10  2011-01-01 #> 1213 25025060101      Guns 2012  0.00  2012-01-01 #> 1214 25025060101      Guns 2013  0.26  2013-01-01 #> 1215 25025060101      Guns 2014  1.11  2014-01-01 #> 1216 25025060101      Guns 2015  1.10  2015-01-01 #> 1217 25025060101      Guns 2016  0.28  2016-01-01 #> 1218 25025060101      Guns 2017  0.00  2017-01-01 #> 1219 25025060101      Guns 2018  0.28  2018-01-01 #> 1220 25025060101      Guns 2019  0.57  2019-01-01 #> 1221 25025060600      Guns 2010  0.00  2010-01-01 #> 1222 25025060600      Guns 2011  2.44  2011-01-01 #> 1223 25025060600      Guns 2012  0.39  2012-01-01 #> 1224 25025060600      Guns 2013  2.99  2013-01-01 #> 1225 25025060600      Guns 2014  0.69  2014-01-01 #> 1226 25025060600      Guns 2015  1.24  2015-01-01 #> 1227 25025060600      Guns 2016  1.86  2016-01-01 #> 1228 25025060600      Guns 2017  3.11  2017-01-01 #> 1229 25025060600      Guns 2018  2.49  2018-01-01 #> 1230 25025060600      Guns 2019  1.38  2019-01-01 #> 1231 25025060400      Guns 2010  0.00  2010-01-01 #> 1232 25025060400      Guns 2011  0.40  2011-01-01 #> 1233 25025060400      Guns 2012  0.19  2012-01-01 #> 1234 25025060400      Guns 2013  0.56  2013-01-01 #> 1235 25025060400      Guns 2014  0.90  2014-01-01 #> 1236 25025060400      Guns 2015  0.53  2015-01-01 #> 1237 25025060400      Guns 2016  0.35  2016-01-01 #> 1238 25025060400      Guns 2017  0.71  2017-01-01 #> 1239 25025060400      Guns 2018  1.06  2018-01-01 #> 1240 25025060400      Guns 2019  1.06  2019-01-01 #> 1241 25025060200      Guns 2010  0.00  2010-01-01 #> 1242 25025060200      Guns 2011  0.95  2011-01-01 #> 1243 25025060200      Guns 2012  0.89  2012-01-01 #> 1244 25025060200      Guns 2013  0.00  2013-01-01 #> 1245 25025060200      Guns 2014  0.83  2014-01-01 #> 1246 25025060200      Guns 2015  0.00  2015-01-01 #> 1247 25025060200      Guns 2016  0.00  2016-01-01 #> 1248 25025060200      Guns 2017  0.86  2017-01-01 #> 1249 25025060200      Guns 2018  1.29  2018-01-01 #> 1250 25025060200      Guns 2019  0.44  2019-01-01 #> 1251 25025050700      Guns 2010  0.00  2010-01-01 #> 1252 25025050700      Guns 2011  0.62  2011-01-01 #> 1253 25025050700      Guns 2012  1.01  2012-01-01 #> 1254 25025050700      Guns 2013  1.69  2013-01-01 #> 1255 25025050700      Guns 2014  1.83  2014-01-01 #> 1256 25025050700      Guns 2015  0.89  2015-01-01 #> 1257 25025050700      Guns 2016  0.89  2016-01-01 #> 1258 25025050700      Guns 2017  0.89  2017-01-01 #> 1259 25025050700      Guns 2018  0.72  2018-01-01 #> 1260 25025050700      Guns 2019  0.36  2019-01-01 #> 1261 25025050600      Guns 2010  0.46  2010-01-01 #> 1262 25025050600      Guns 2011  1.22  2011-01-01 #> 1263 25025050600      Guns 2012  1.26  2012-01-01 #> 1264 25025050600      Guns 2013  2.62  2013-01-01 #> 1265 25025050600      Guns 2014  2.36  2014-01-01 #> 1266 25025050600      Guns 2015  3.74  2015-01-01 #> 1267 25025050600      Guns 2016  2.08  2016-01-01 #> 1268 25025050600      Guns 2017  0.42  2017-01-01 #> 1269 25025050600      Guns 2018  0.83  2018-01-01 #> 1270 25025050600      Guns 2019  2.02  2019-01-01 #> 1271 25025050500      Guns 2010  0.00  2010-01-01 #> 1272 25025050500      Guns 2011  1.02  2011-01-01 #> 1273 25025050500      Guns 2012  0.91  2012-01-01 #> 1274 25025050500      Guns 2013  0.87  2013-01-01 #> 1275 25025050500      Guns 2014  0.81  2014-01-01 #> 1276 25025050500      Guns 2015  0.00  2015-01-01 #> 1277 25025050500      Guns 2016  0.80  2016-01-01 #> 1278 25025050500      Guns 2017  0.40  2017-01-01 #> 1279 25025050500      Guns 2018  0.80  2018-01-01 #> 1280 25025050500      Guns 2019  0.43  2019-01-01 #> 1281 25025050400      Guns 2010  0.00  2010-01-01 #> 1282 25025050400      Guns 2011  3.02  2011-01-01 #> 1283 25025050400      Guns 2012  1.60  2012-01-01 #> 1284 25025050400      Guns 2013  3.28  2013-01-01 #> 1285 25025050400      Guns 2014  1.17  2014-01-01 #> 1286 25025050400      Guns 2015  1.95  2015-01-01 #> 1287 25025050400      Guns 2016  4.30  2016-01-01 #> 1288 25025050400      Guns 2017  1.17  2017-01-01 #> 1289 25025050400      Guns 2018  2.73  2018-01-01 #> 1290 25025050400      Guns 2019  1.21  2019-01-01 #> 1291 25025050300      Guns 2010  0.00  2010-01-01 #> 1292 25025050300      Guns 2011  1.37  2011-01-01 #> 1293 25025050300      Guns 2012  2.54  2012-01-01 #> 1294 25025050300      Guns 2013  5.60  2013-01-01 #> 1295 25025050300      Guns 2014  6.07  2014-01-01 #> 1296 25025050300      Guns 2015  7.87  2015-01-01 #> 1297 25025050300      Guns 2016  6.56  2016-01-01 #> 1298 25025050300      Guns 2017  5.68  2017-01-01 #> 1299 25025050300      Guns 2018  4.37  2018-01-01 #> 1300 25025050300      Guns 2019  1.61  2019-01-01 #> 1301 25025050200      Guns 2010  0.20  2010-01-01 #> 1302 25025050200      Guns 2011  1.83  2011-01-01 #> 1303 25025050200      Guns 2012  2.01  2012-01-01 #> 1304 25025050200      Guns 2013  1.32  2013-01-01 #> 1305 25025050200      Guns 2014  2.55  2014-01-01 #> 1306 25025050200      Guns 2015  1.80  2015-01-01 #> 1307 25025050200      Guns 2016  1.80  2016-01-01 #> 1308 25025050200      Guns 2017  1.14  2017-01-01 #> 1309 25025050200      Guns 2018  1.47  2018-01-01 #> 1310 25025050200      Guns 2019  0.71  2019-01-01 #> 1311 25025040300      Guns 2010  0.48  2010-01-01 #> 1312 25025040300      Guns 2011  2.64  2011-01-01 #> 1313 25025040300      Guns 2012  2.39  2012-01-01 #> 1314 25025040300      Guns 2013  3.47  2013-01-01 #> 1315 25025040300      Guns 2014  5.75  2014-01-01 #> 1316 25025040300      Guns 2015  2.39  2015-01-01 #> 1317 25025040300      Guns 2016  0.48  2016-01-01 #> 1318 25025040300      Guns 2017  0.95  2017-01-01 #> 1319 25025040300      Guns 2018  1.67  2018-01-01 #> 1320 25025040300      Guns 2019  1.11  2019-01-01 #> 1321 25025040200      Guns 2010  1.61  2010-01-01 #> 1322 25025040200      Guns 2011  1.70  2011-01-01 #> 1323 25025040200      Guns 2012  3.66  2012-01-01 #> 1324 25025040200      Guns 2013  4.35  2013-01-01 #> 1325 25025040200      Guns 2014  4.17  2014-01-01 #> 1326 25025040200      Guns 2015  1.04  2015-01-01 #> 1327 25025040200      Guns 2016  2.60  2016-01-01 #> 1328 25025040200      Guns 2017  2.60  2017-01-01 #> 1329 25025040200      Guns 2018  3.12  2018-01-01 #> 1330 25025040200      Guns 2019  2.45  2019-01-01 #> 1331 25025030500      Guns 2010  0.00  2010-01-01 #> 1332 25025030500      Guns 2011  0.00  2011-01-01 #> 1333 25025030500      Guns 2012  0.74  2012-01-01 #> 1334 25025030500      Guns 2013  0.38  2013-01-01 #> 1335 25025030500      Guns 2014  0.00  2014-01-01 #> 1336 25025030500      Guns 2015  0.39  2015-01-01 #> 1337 25025030500      Guns 2016  0.39  2016-01-01 #> 1338 25025030500      Guns 2017  0.39  2017-01-01 #> 1339 25025030500      Guns 2018  0.39  2018-01-01 #> 1340 25025030500      Guns 2019  0.40  2019-01-01 #> 1341 25025051101      Guns 2010  0.31  2010-01-01 #> 1342 25025051101      Guns 2011  1.89  2011-01-01 #> 1343 25025051101      Guns 2012  1.41  2012-01-01 #> 1344 25025051101      Guns 2013  2.01  2013-01-01 #> 1345 25025051101      Guns 2014  1.97  2014-01-01 #> 1346 25025051101      Guns 2015  1.78  2015-01-01 #> 1347 25025051101      Guns 2016  0.96  2016-01-01 #> 1348 25025051101      Guns 2017  2.46  2017-01-01 #> 1349 25025051101      Guns 2018  0.68  2018-01-01 #> 1350 25025051101      Guns 2019  1.20  2019-01-01 #> 1351 25025051000      Guns 2010  0.23  2010-01-01 #> 1352 25025051000      Guns 2011  0.92  2011-01-01 #> 1353 25025051000      Guns 2012  0.86  2012-01-01 #> 1354 25025051000      Guns 2013  0.66  2013-01-01 #> 1355 25025051000      Guns 2014  0.90  2014-01-01 #> 1356 25025051000      Guns 2015  0.86  2015-01-01 #> 1357 25025051000      Guns 2016  0.64  2016-01-01 #> 1358 25025051000      Guns 2017  1.50  2017-01-01 #> 1359 25025051000      Guns 2018  0.64  2018-01-01 #> 1360 25025051000      Guns 2019  0.41  2019-01-01 #> 1361 25025030400      Guns 2010  0.00  2010-01-01 #> 1362 25025030400      Guns 2011  0.42  2011-01-01 #> 1363 25025030400      Guns 2012  0.39  2012-01-01 #> 1364 25025030400      Guns 2013  0.00  2013-01-01 #> 1365 25025030400      Guns 2014  1.41  2014-01-01 #> 1366 25025030400      Guns 2015  0.73  2015-01-01 #> 1367 25025030400      Guns 2016  0.73  2016-01-01 #> 1368 25025030400      Guns 2017  0.36  2017-01-01 #> 1369 25025030400      Guns 2018  0.36  2018-01-01 #> 1370 25025030400      Guns 2019  0.37  2019-01-01 #> 1371 25025030300      Guns 2010  0.19  2010-01-01 #> 1372 25025030300      Guns 2011  1.85  2011-01-01 #> 1373 25025030300      Guns 2012  0.92  2012-01-01 #> 1374 25025030300      Guns 2013  2.18  2013-01-01 #> 1375 25025030300      Guns 2014  2.70  2014-01-01 #> 1376 25025030300      Guns 2015  4.84  2015-01-01 #> 1377 25025030300      Guns 2016  3.94  2016-01-01 #> 1378 25025030300      Guns 2017  3.58  2017-01-01 #> 1379 25025030300      Guns 2018  3.40  2018-01-01 #> 1380 25025030300      Guns 2019  3.06  2019-01-01 #> 1381 25025030200      Guns 2010  0.00  2010-01-01 #> 1382 25025030200      Guns 2011  0.00  2011-01-01 #> 1383 25025030200      Guns 2012  0.00  2012-01-01 #> 1384 25025030200      Guns 2013  1.15  2013-01-01 #> 1385 25025030200      Guns 2014  0.59  2014-01-01 #> 1386 25025030200      Guns 2015  1.18  2015-01-01 #> 1387 25025030200      Guns 2016  1.18  2016-01-01 #> 1388 25025030200      Guns 2017  1.77  2017-01-01 #> 1389 25025030200      Guns 2018  1.77  2018-01-01 #> 1390 25025030200      Guns 2019  1.65  2019-01-01 #> 1391 25025030100      Guns 2010  0.00  2010-01-01 #> 1392 25025030100      Guns 2011  0.99  2011-01-01 #> 1393 25025030100      Guns 2012  0.46  2012-01-01 #> 1394 25025030100      Guns 2013  2.32  2013-01-01 #> 1395 25025030100      Guns 2014  0.91  2014-01-01 #> 1396 25025030100      Guns 2015  0.44  2015-01-01 #> 1397 25025030100      Guns 2016  0.44  2016-01-01 #> 1398 25025030100      Guns 2017  0.44  2017-01-01 #> 1399 25025030100      Guns 2018  1.33  2018-01-01 #> 1400 25025030100      Guns 2019  0.43  2019-01-01 #> 1401 25025020200      Guns 2010  0.00  2010-01-01 #> 1402 25025020200      Guns 2011  0.26  2011-01-01 #> 1403 25025020200      Guns 2012  0.77  2012-01-01 #> 1404 25025020200      Guns 2013  0.26  2013-01-01 #> 1405 25025020200      Guns 2014  0.00  2014-01-01 #> 1406 25025020200      Guns 2015  0.26  2015-01-01 #> 1407 25025020200      Guns 2016  1.06  2016-01-01 #> 1408 25025020200      Guns 2017  1.06  2017-01-01 #> 1409 25025020200      Guns 2018  0.26  2018-01-01 #> 1410 25025020200      Guns 2019  0.00  2019-01-01 #> 1411 25025010600      Guns 2010  0.35  2010-01-01 #> 1412 25025010600      Guns 2011  2.19  2011-01-01 #> 1413 25025010600      Guns 2012  1.06  2012-01-01 #> 1414 25025010600      Guns 2013  1.65  2013-01-01 #> 1415 25025010600      Guns 2014  3.50  2014-01-01 #> 1416 25025010600      Guns 2015  5.12  2015-01-01 #> 1417 25025010600      Guns 2016  4.16  2016-01-01 #> 1418 25025010600      Guns 2017  4.48  2017-01-01 #> 1419 25025010600      Guns 2018  5.76  2018-01-01 #> 1420 25025010600      Guns 2019  4.77  2019-01-01 #> 1421 25025010500      Guns 2010  0.00  2010-01-01 #> 1422 25025010500      Guns 2011  0.00  2011-01-01 #> 1423 25025010500      Guns 2012  0.60  2012-01-01 #> 1424 25025010500      Guns 2013  1.80  2013-01-01 #> 1425 25025010500      Guns 2014  0.91  2014-01-01 #> 1426 25025010500      Guns 2015  2.06  2015-01-01 #> 1427 25025010500      Guns 2016  1.47  2016-01-01 #> 1428 25025010500      Guns 2017  1.47  2017-01-01 #> 1429 25025010500      Guns 2018  3.24  2018-01-01 #> 1430 25025010500      Guns 2019  1.99  2019-01-01 #> 1431 25025010300      Guns 2010  0.00  2010-01-01 #> 1432 25025010300      Guns 2011  0.59  2011-01-01 #> 1433 25025010300      Guns 2012  0.19  2012-01-01 #> 1434 25025010300      Guns 2013  0.38  2013-01-01 #> 1435 25025010300      Guns 2014  0.00  2014-01-01 #> 1436 25025010300      Guns 2015  0.56  2015-01-01 #> 1437 25025010300      Guns 2016  0.56  2016-01-01 #> 1438 25025010300      Guns 2017  0.37  2017-01-01 #> 1439 25025010300      Guns 2018  0.56  2018-01-01 #> 1440 25025010300      Guns 2019  0.00  2019-01-01 #> 1441 25025000802      Guns 2010  0.25  2010-01-01 #> 1442 25025000802      Guns 2011  1.58  2011-01-01 #> 1443 25025000802      Guns 2012  2.35  2012-01-01 #> 1444 25025000802      Guns 2013  3.51  2013-01-01 #> 1445 25025000802      Guns 2014  2.13  2014-01-01 #> 1446 25025000802      Guns 2015  2.12  2015-01-01 #> 1447 25025000802      Guns 2016  3.49  2016-01-01 #> 1448 25025000802      Guns 2017  3.03  2017-01-01 #> 1449 25025000802      Guns 2018  3.18  2018-01-01 #> 1450 25025000802      Guns 2019  2.55  2019-01-01 #> 1451 25025000701      Guns 2010  0.00  2010-01-01 #> 1452 25025000701      Guns 2011  2.63  2011-01-01 #> 1453 25025000701      Guns 2012  2.02  2012-01-01 #> 1454 25025000701      Guns 2013  2.38  2013-01-01 #> 1455 25025000701      Guns 2014  0.51  2014-01-01 #> 1456 25025000701      Guns 2015  0.70  2015-01-01 #> 1457 25025000701      Guns 2016  1.16  2016-01-01 #> 1458 25025000701      Guns 2017  0.47  2017-01-01 #> 1459 25025000701      Guns 2018  0.00  2018-01-01 #> 1460 25025000701      Guns 2019  0.42  2019-01-01 #> 1461 25025050101      Guns 2010  0.19  2010-01-01 #> 1462 25025050101      Guns 2011  1.52  2011-01-01 #> 1463 25025050101      Guns 2012  0.90  2012-01-01 #> 1464 25025050101      Guns 2013  1.09  2013-01-01 #> 1465 25025050101      Guns 2014  2.94  2014-01-01 #> 1466 25025050101      Guns 2015  1.68  2015-01-01 #> 1467 25025050101      Guns 2016  1.31  2016-01-01 #> 1468 25025050101      Guns 2017  1.31  2017-01-01 #> 1469 25025050101      Guns 2018  3.17  2018-01-01 #> 1470 25025050101      Guns 2019  1.80  2019-01-01 #> 1471 25025050901      Guns 2010  0.44  2010-01-01 #> 1472 25025050901      Guns 2011  1.83  2011-01-01 #> 1473 25025050901      Guns 2012  2.42  2012-01-01 #> 1474 25025050901      Guns 2013  1.27  2013-01-01 #> 1475 25025050901      Guns 2014  2.34  2014-01-01 #> 1476 25025050901      Guns 2015  1.99  2015-01-01 #> 1477 25025050901      Guns 2016  3.32  2016-01-01 #> 1478 25025050901      Guns 2017  2.21  2017-01-01 #> 1479 25025050901      Guns 2018  2.43  2018-01-01 #> 1480 25025050901      Guns 2019  1.52  2019-01-01 #> 1481 25025060501      Guns 2010  0.00  2010-01-01 #> 1482 25025060501      Guns 2011  0.81  2011-01-01 #> 1483 25025060501      Guns 2012  0.79  2012-01-01 #> 1484 25025060501      Guns 2013  1.48  2013-01-01 #> 1485 25025060501      Guns 2014  0.97  2014-01-01 #> 1486 25025060501      Guns 2015  1.43  2015-01-01 #> 1487 25025060501      Guns 2016  0.71  2016-01-01 #> 1488 25025060501      Guns 2017  0.95  2017-01-01 #> 1489 25025060501      Guns 2018  1.19  2018-01-01 #> 1490 25025060501      Guns 2019  0.25  2019-01-01 #> 1491 25025040100      Guns 2010  0.00  2010-01-01 #> 1492 25025040100      Guns 2011  0.88  2011-01-01 #> 1493 25025040100      Guns 2012  0.43  2012-01-01 #> 1494 25025040100      Guns 2013  1.67  2013-01-01 #> 1495 25025040100      Guns 2014  1.20  2014-01-01 #> 1496 25025040100      Guns 2015  0.41  2015-01-01 #> 1497 25025040100      Guns 2016  0.81  2016-01-01 #> 1498 25025040100      Guns 2017  0.81  2017-01-01 #> 1499 25025040100      Guns 2018  0.41  2018-01-01 #> 1500 25025040100      Guns 2019  0.41  2019-01-01 #> 1501 25025040600      Guns 2010  0.00  2010-01-01 #> 1502 25025040600      Guns 2011  0.35  2011-01-01 #> 1503 25025040600      Guns 2012  1.05  2012-01-01 #> 1504 25025040600      Guns 2013  2.44  2013-01-01 #> 1505 25025040600      Guns 2014  0.00  2014-01-01 #> 1506 25025040600      Guns 2015  1.30  2015-01-01 #> 1507 25025040600      Guns 2016  1.95  2016-01-01 #> 1508 25025040600      Guns 2017  1.62  2017-01-01 #> 1509 25025040600      Guns 2018  2.27  2018-01-01 #> 1510 25025040600      Guns 2019  1.96  2019-01-01 #> 1511 25025000602      Guns 2010  0.00  2010-01-01 #> 1512 25025000602      Guns 2011  1.60  2011-01-01 #> 1513 25025000602      Guns 2012  2.61  2012-01-01 #> 1514 25025000602      Guns 2013  6.24  2013-01-01 #> 1515 25025000602      Guns 2014  2.24  2014-01-01 #> 1516 25025000602      Guns 2015  3.59  2015-01-01 #> 1517 25025000602      Guns 2016  3.85  2016-01-01 #> 1518 25025000602      Guns 2017  2.31  2017-01-01 #> 1519 25025000602      Guns 2018  3.34  2018-01-01 #> 1520 25025000602      Guns 2019  3.56  2019-01-01 #> 1521 25025000601      Guns 2010  0.00  2010-01-01 #> 1522 25025000601      Guns 2011  0.33  2011-01-01 #> 1523 25025000601      Guns 2012  0.31  2012-01-01 #> 1524 25025000601      Guns 2013  1.82  2013-01-01 #> 1525 25025000601      Guns 2014  1.42  2014-01-01 #> 1526 25025000601      Guns 2015  1.05  2015-01-01 #> 1527 25025000601      Guns 2016  1.05  2016-01-01 #> 1528 25025000601      Guns 2017  0.79  2017-01-01 #> 1529 25025000601      Guns 2018  1.84  2018-01-01 #> 1530 25025000601      Guns 2019  0.75  2019-01-01 #> 1531 25025000502      Guns 2010  0.20  2010-01-01 #> 1532 25025000502      Guns 2011  0.39  2011-01-01 #> 1533 25025000502      Guns 2012  0.72  2012-01-01 #> 1534 25025000502      Guns 2013  0.16  2013-01-01 #> 1535 25025000502      Guns 2014  0.34  2014-01-01 #> 1536 25025000502      Guns 2015  0.17  2015-01-01 #> 1537 25025000502      Guns 2016  0.85  2016-01-01 #> 1538 25025000502      Guns 2017  0.34  2017-01-01 #> 1539 25025000502      Guns 2018  0.00  2018-01-01 #> 1540 25025000502      Guns 2019  0.86  2019-01-01 #> 1541 25025000402      Guns 2010  0.00  2010-01-01 #> 1542 25025000402      Guns 2011  0.00  2011-01-01 #> 1543 25025000402      Guns 2012  2.92  2012-01-01 #> 1544 25025000402      Guns 2013  1.57  2013-01-01 #> 1545 25025000402      Guns 2014  0.00  2014-01-01 #> 1546 25025000402      Guns 2015  0.29  2015-01-01 #> 1547 25025000402      Guns 2016  0.87  2016-01-01 #> 1548 25025000402      Guns 2017  0.58  2017-01-01 #> 1549 25025000402      Guns 2018  0.00  2018-01-01 #> 1550 25025000402      Guns 2019  0.00  2019-01-01 #> 1551 25025000401      Guns 2010  0.19  2010-01-01 #> 1552 25025000401      Guns 2011  0.96  2011-01-01 #> 1553 25025000401      Guns 2012  1.77  2012-01-01 #> 1554 25025000401      Guns 2013  0.57  2013-01-01 #> 1555 25025000401      Guns 2014  0.78  2014-01-01 #> 1556 25025000401      Guns 2015  0.59  2015-01-01 #> 1557 25025000401      Guns 2016  1.17  2016-01-01 #> 1558 25025000401      Guns 2017  1.17  2017-01-01 #> 1559 25025000401      Guns 2018  0.39  2018-01-01 #> 1560 25025000401      Guns 2019  0.00  2019-01-01 #> 1561 25025000202      Guns 2010  0.82  2010-01-01 #> 1562 25025000202      Guns 2011  2.02  2011-01-01 #> 1563 25025000202      Guns 2012  1.72  2012-01-01 #> 1564 25025000202      Guns 2013  3.07  2013-01-01 #> 1565 25025000202      Guns 2014  2.43  2014-01-01 #> 1566 25025000202      Guns 2015  0.75  2015-01-01 #> 1567 25025000202      Guns 2016  4.02  2016-01-01 #> 1568 25025000202      Guns 2017  1.76  2017-01-01 #> 1569 25025000202      Guns 2018  3.52  2018-01-01 #> 1570 25025000202      Guns 2019  1.17  2019-01-01 #> 1571 25025000201      Guns 2010  0.00  2010-01-01 #> 1572 25025000201      Guns 2011  1.60  2011-01-01 #> 1573 25025000201      Guns 2012  0.65  2012-01-01 #> 1574 25025000201      Guns 2013  0.91  2013-01-01 #> 1575 25025000201      Guns 2014  0.28  2014-01-01 #> 1576 25025000201      Guns 2015  0.78  2015-01-01 #> 1577 25025000201      Guns 2016  0.52  2016-01-01 #> 1578 25025000201      Guns 2017  0.00  2017-01-01 #> 1579 25025000201      Guns 2018  1.81  2018-01-01 #> 1580 25025000201      Guns 2019  0.25  2019-01-01 #> 1581 25025040401      Guns 2010  0.35  2010-01-01 #> 1582 25025040401      Guns 2011  1.17  2011-01-01 #> 1583 25025040401      Guns 2012  0.80  2012-01-01 #> 1584 25025040401      Guns 2013  2.38  2013-01-01 #> 1585 25025040401      Guns 2014  2.30  2014-01-01 #> 1586 25025040401      Guns 2015  1.45  2015-01-01 #> 1587 25025040401      Guns 2016  2.18  2016-01-01 #> 1588 25025040401      Guns 2017  2.18  2017-01-01 #> 1589 25025040401      Guns 2018  0.73  2018-01-01 #> 1590 25025040401      Guns 2019  0.68  2019-01-01 #> 1591 25025020303      Guns 2010  0.00  2010-01-01 #> 1592 25025020303      Guns 2011  1.60  2011-01-01 #> 1593 25025020303      Guns 2012  0.86  2012-01-01 #> 1594 25025020303      Guns 2013  2.24  2013-01-01 #> 1595 25025020303      Guns 2014  1.35  2014-01-01 #> 1596 25025020303      Guns 2015  2.10  2015-01-01 #> 1597 25025020303      Guns 2016  1.31  2016-01-01 #> 1598 25025020303      Guns 2017  2.88  2017-01-01 #> 1599 25025020303      Guns 2018  2.36  2018-01-01 #> 1600 25025020303      Guns 2019  2.09  2019-01-01 #> 1601 25025070402      Guns 2010  0.00  2010-01-01 #> 1602 25025070402      Guns 2011  3.49  2011-01-01 #> 1603 25025070402      Guns 2012  1.81  2012-01-01 #> 1604 25025070402      Guns 2013  0.00  2013-01-01 #> 1605 25025070402      Guns 2014  2.11  2014-01-01 #> 1606 25025070402      Guns 2015  2.72  2015-01-01 #> 1607 25025070402      Guns 2016  2.27  2016-01-01 #> 1608 25025070402      Guns 2017  2.27  2017-01-01 #> 1609 25025070402      Guns 2018  2.72  2018-01-01 #> 1610 25025070402      Guns 2019  1.25  2019-01-01 #> 1611 25025020302      Guns 2010  1.66  2010-01-01 #> 1612 25025020302      Guns 2011  2.49  2011-01-01 #> 1613 25025020302      Guns 2012  0.00  2012-01-01 #> 1614 25025020302      Guns 2013  2.01  2013-01-01 #> 1615 25025020302      Guns 2014  0.99  2014-01-01 #> 1616 25025020302      Guns 2015  0.95  2015-01-01 #> 1617 25025020302      Guns 2016  0.00  2016-01-01 #> 1618 25025020302      Guns 2017  3.80  2017-01-01 #> 1619 25025020302      Guns 2018  0.00  2018-01-01 #> 1620 25025020302      Guns 2019  1.02  2019-01-01 #> 1621 25025020301      Guns 2010  0.00  2010-01-01 #> 1622 25025020301      Guns 2011  0.44  2011-01-01 #> 1623 25025020301      Guns 2012  1.53  2012-01-01 #> 1624 25025020301      Guns 2013  2.11  2013-01-01 #> 1625 25025020301      Guns 2014  3.39  2014-01-01 #> 1626 25025020301      Guns 2015  1.27  2015-01-01 #> 1627 25025020301      Guns 2016  2.12  2016-01-01 #> 1628 25025020301      Guns 2017  0.42  2017-01-01 #> 1629 25025020301      Guns 2018  0.42  2018-01-01 #> 1630 25025020301      Guns 2019  0.46  2019-01-01 #> 1631 25025020101      Guns 2010  0.00  2010-01-01 #> 1632 25025020101      Guns 2011  0.00  2011-01-01 #> 1633 25025020101      Guns 2012  0.00  2012-01-01 #> 1634 25025020101      Guns 2013  1.36  2013-01-01 #> 1635 25025020101      Guns 2014  0.91  2014-01-01 #> 1636 25025020101      Guns 2015  1.43  2015-01-01 #> 1637 25025020101      Guns 2016  1.02  2016-01-01 #> 1638 25025020101      Guns 2017  0.41  2017-01-01 #> 1639 25025020101      Guns 2018  0.00  2018-01-01 #> 1640 25025020101      Guns 2019  0.21  2019-01-01 #> 1641 25025081001      Guns 2010  0.67  2010-01-01 #> 1642 25025081001      Guns 2011  1.25  2011-01-01 #> 1643 25025081001      Guns 2012  1.49  2012-01-01 #> 1644 25025081001      Guns 2013  2.19  2013-01-01 #> 1645 25025081001      Guns 2014  2.92  2014-01-01 #> 1646 25025081001      Guns 2015  5.41  2015-01-01 #> 1647 25025081001      Guns 2016  4.21  2016-01-01 #> 1648 25025081001      Guns 2017  2.00  2017-01-01 #> 1649 25025081001      Guns 2018  2.80  2018-01-01 #> 1650 25025081001      Guns 2019  3.12  2019-01-01 #> 1651 25025010403      Guns 2010  0.00  2010-01-01 #> 1652 25025010403      Guns 2011  3.11  2011-01-01 #> 1653 25025010403      Guns 2012  0.68  2012-01-01 #> 1654 25025010403      Guns 2013  3.13  2013-01-01 #> 1655 25025010403      Guns 2014  1.03  2014-01-01 #> 1656 25025010403      Guns 2015  2.44  2015-01-01 #> 1657 25025010403      Guns 2016  0.35  2016-01-01 #> 1658 25025010403      Guns 2017  2.79  2017-01-01 #> 1659 25025010403      Guns 2018  3.83  2018-01-01 #> 1660 25025010403      Guns 2019  2.10  2019-01-01 #> 1661 25025000100      Guns 2010  0.00  2010-01-01 #> 1662 25025000100      Guns 2011  1.54  2011-01-01 #> 1663 25025000100      Guns 2012  1.84  2012-01-01 #> 1664 25025000100      Guns 2013  4.36  2013-01-01 #> 1665 25025000100      Guns 2014  1.91  2014-01-01 #> 1666 25025000100      Guns 2015  1.93  2015-01-01 #> 1667 25025000100      Guns 2016  1.50  2016-01-01 #> 1668 25025000100      Guns 2017  2.14  2017-01-01 #> 1669 25025000100      Guns 2018  2.78  2018-01-01 #> 1670 25025000100      Guns 2019  1.69  2019-01-01 #> 1671 25025051200      Guns 2010  0.47  2010-01-01 #> 1672 25025051200      Guns 2011  0.00  2011-01-01 #> 1673 25025051200      Guns 2012  1.94  2012-01-01 #> 1674 25025051200      Guns 2013  1.48  2013-01-01 #> 1675 25025051200      Guns 2014  2.70  2014-01-01 #> 1676 25025051200      Guns 2015  1.38  2015-01-01 #> 1677 25025051200      Guns 2016  1.73  2016-01-01 #> 1678 25025051200      Guns 2017  0.69  2017-01-01 #> 1679 25025051200      Guns 2018  0.00  2018-01-01 #> 1680 25025051200      Guns 2019  0.69  2019-01-01"},{"path":"/reference/spatial_gini.html","id":null,"dir":"Reference","previous_headings":"","what":"Spatial Gini Index — spatial_gini","title":"Spatial Gini Index — spatial_gini","text":"Calculates spatial Gini index given numeric vector neighbor list. Based formula provided Rey Smith (2013).","code":""},{"path":"/reference/spatial_gini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spatial Gini Index — spatial_gini","text":"","code":"spatial_gini(x, nb)"},{"path":"/reference/spatial_gini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spatial Gini Index — spatial_gini","text":"x numeric vector without missing values nb neighbor list, example created st_contiguity()","code":""},{"path":"/reference/spatial_gini.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spatial Gini Index — spatial_gini","text":"data frame columns: G: Gini index NBG: neighbor composition Gini coefficient NG: non-neighbor composition Gini coefficient SG: Spatial Gini equal \\(NG * \\frac{1}{G}\\)","code":""},{"path":"/reference/spatial_gini.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spatial Gini Index — spatial_gini","text":"Gini index global measure inequality based Lorenz curve. ranges 0 1 0 perfect equality 1 perfect inequality. spatial Gini index decomposes Gini coefficient based spatial neighbors.","code":""},{"path":"/reference/spatial_gini.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spatial Gini Index — spatial_gini","text":"doi:10.1007/s12076-012-0086-z","code":""},{"path":"/reference/spatial_gini.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spatial Gini Index — spatial_gini","text":"","code":"nb <- st_contiguity(guerry) x <- guerry$wealth spatial_gini(x, nb) #>           G        NG       NBG        SG #> 1 0.3306568 0.3164337 0.0142231 0.9569853"},{"path":"/reference/spt_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create time lagged spatial neighbors — spt_nb","title":"Create time lagged spatial neighbors — spt_nb","text":"Given spdep neighbor list (list indicating row position) neighbors spacetime object's geometry context, create neighbor list across space time data context.","code":""},{"path":"/reference/spt_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create time lagged spatial neighbors — spt_nb","text":"","code":"spt_nb(nb, n_times, n_locs, k = 1)"},{"path":"/reference/spt_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create time lagged spatial neighbors — spt_nb","text":"nb neighbors list created spacetime object's geometry context. n_times number time slices n_locs number locations","code":""},{"path":"/reference/spt_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create time lagged spatial neighbors — spt_nb","text":"nb list","code":""},{"path":"/reference/spt_nb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create time lagged spatial neighbors — spt_nb","text":"Note used spacetime cubes. function available internal development used extreme caution. number bins equal n_times * n_locs location bin time-series n_times observations. makes spacetime cube function.","code":""},{"path":"/reference/spt_nb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create time lagged spatial neighbors — spt_nb","text":"https://pro.arcgis.com/en/pro-app/2.8/tool-reference/space-time-pattern-mining/create-space-time-cube.htm","code":""},{"path":[]},{"path":"/reference/spt_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Order a spacetime cube — spt_order","title":"Order a spacetime cube — spt_order","text":"performing analysis spacetime cube, order utmost importance. function ensures spacetime cube ordered appropriately.","code":""},{"path":"/reference/spt_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order a spacetime cube — spt_order","text":"","code":"spt_order(x)"},{"path":"/reference/spt_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order a spacetime cube — spt_order","text":"x spacetime cube object.","code":""},{"path":"/reference/spt_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order a spacetime cube — spt_order","text":"spacetime object orders based time location","code":""},{"path":"/reference/spt_update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update spacetime attributes — spt_update","title":"Update spacetime attributes — spt_update","text":"Update's spacetime object's number locations time periods. spacetime object's attributes sticky change subsetted example using dplyr::filter() dplyr::slice(). Update locations times spacetime object.","code":""},{"path":"/reference/spt_update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update spacetime attributes — spt_update","text":"","code":"spt_update(x, ...)"},{"path":"/reference/spt_update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update spacetime attributes — spt_update","text":"x spacetime object ... unused","code":""},{"path":"/reference/spt_update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update spacetime attributes — spt_update","text":"object class spacetime updated attributes","code":""},{"path":"/reference/spt_wt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create time lagged spatial weights — spt_wt","title":"Create time lagged spatial weights — spt_wt","text":"Given space-time-lagged neighbor list weights lists, e.g. made st_dist_band() st_contiguity(), create corresponding weights list.","code":""},{"path":"/reference/spt_wt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create time lagged spatial weights — spt_wt","text":"","code":"spt_wt(wt, nbt, n_times, n_locs, k)"},{"path":"/reference/spt_wt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create time lagged spatial weights — spt_wt","text":"wt weights lists created spacetime object's geometry context. nbt time-lagged spatial neighbors list created spt_nb() n_times number time slices n_locs number locations","code":""},{"path":"/reference/spt_wt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create time lagged spatial weights — spt_wt","text":"weight list cardinality nbt","code":""},{"path":"/reference/spt_wt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create time lagged spatial weights — spt_wt","text":"intended spt_wt() used following use spt_nb() using input arguments. ensures time-lagged spatial weights correctly associated time-lagged spatial neighbors.","code":""},{"path":[]},{"path":"/reference/st_as_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to an edge lines object — st_as_edges","title":"Convert to an edge lines object — st_as_edges","text":"Given geometry neighbor weights lists, create edge list sf object.","code":""},{"path":"/reference/st_as_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to an edge lines object — st_as_edges","text":"","code":"st_as_edges(x, nb, wt)  # S3 method for sf st_as_edges(x, nb, wt)  # S3 method for sfc st_as_edges(x, nb, wt)"},{"path":"/reference/st_as_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to an edge lines object — st_as_edges","text":"x object class sf sfc. nb neighbor list. x class sf, unquote named column. x class sfc, object class nb created st_contiguity(). wt optional. weights list generated st_weights().  . x class sf, unquote named column. x class sfc, weights list .","code":""},{"path":"/reference/st_as_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to an edge lines object — st_as_edges","text":"Returns sf object edges represented LINESTRING. : node index. row position x. : node index. neighbor value stored nb. : node index. row position x. j: node index. neighbor value stored nb. wt: weight value j stored wt.","code":""},{"path":"/reference/st_as_edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to an edge lines object — st_as_edges","text":"Creating edge list creates column position j observation neighbors. can recreate values expanding nb wt list columns.","code":"library(magrittr) guerry_nb %>%   tibble::as_tibble() %>%   dplyr::select(nb, wt) %>%   dplyr::mutate(i = dplyr::row_number(), .before = 1) %>%   tidyr::unnest(c(nb, wt)) #> # A tibble: 420 x 3 #>        i    nb    wt #>    <int> <int> <dbl> #>  1     1    36 0.25  #>  2     1    37 0.25  #>  3     1    67 0.25  #>  4     1    69 0.25  #>  5     2     7 0.167 #>  6     2    49 0.167 #>  7     2    57 0.167 #>  8     2    58 0.167 #>  9     2    73 0.167 #> 10     2    76 0.167 #> # i 410 more rows"},{"path":"/reference/st_as_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to an edge lines object — st_as_edges","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE)) {  library(magrittr) guerry %>%   dplyr::mutate(nb = st_contiguity(geometry),          wt = st_weights(nb)) %>%   st_as_edges(nb, wt)  } #> Simple feature collection with 420 features and 5 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 143129.7 ymin: 1735692 xmax: 983300.8 ymax: 2615768 #> CRS:           NA #> First 10 features: #>    from to i  j        wt                       geometry #> 1     1 36 1 36 0.2500000 LINESTRING (827911.9 212290... #> 2     1 37 1 37 0.2500000 LINESTRING (827911.9 212290... #> 3     1 67 1 67 0.2500000 LINESTRING (827911.9 212290... #> 4     1 69 1 69 0.2500000 LINESTRING (827911.9 212290... #> 5     2  7 2  7 0.1666667 LINESTRING (691725.7 249605... #> 6     2 49 2 49 0.1666667 LINESTRING (691725.7 249605... #> 7     2 57 2 57 0.1666667 LINESTRING (691725.7 249605... #> 8     2 58 2 58 0.1666667 LINESTRING (691725.7 249605... #> 9     2 73 2 73 0.1666667 LINESTRING (691725.7 249605... #> 10    2 76 2 76 0.1666667 LINESTRING (691725.7 249605..."},{"path":"/reference/st_as_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an sfnetwork — st_as_graph","title":"Create an sfnetwork — st_as_graph","text":"Given sf sfc object neighbor weights lists, create sfnetwork object.","code":""},{"path":"/reference/st_as_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an sfnetwork — st_as_graph","text":"","code":"st_as_graph(x, nb, wt)  # S3 method for sf st_as_graph(x, nb, wt)  # S3 method for sfc st_as_graph(x, nb, wt)"},{"path":"/reference/st_as_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an sfnetwork — st_as_graph","text":"x object class sf sfc. nb neighbor list. x class sf, unquote named column. x class sfc, object class nb created st_contiguity(). wt optional. weights list generated st_weights().  . x class sf, unquote named column. x class sfc, weights list .","code":""},{"path":"/reference/st_as_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an sfnetwork — st_as_graph","text":"sfnetwork object","code":""},{"path":[]},{"path":"/reference/st_as_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an sfnetwork — st_as_graph","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE)) { library(magrittr)  guerry_nb %>%   st_as_graph(nb, wt) } #> Checking if spatial network structure is valid... #> Spatial network structure is valid #> # A sfnetwork with 85 nodes and 420 edges #> # #> # CRS:  NA  #> # #> # An undirected multigraph with 1 component with spatially explicit edges #> # #> # A tibble: 85 × 30 #>   i     code_dept count ave_id_geo  dept region department crime_pers crime_prop #>   <chr> <fct>     <dbl>      <dbl> <int> <fct>  <fct>           <int>      <int> #> 1 1     01            1         49     1 E      Ain             28870      15890 #> 2 2     02            1        812     2 N      Aisne           26226       5521 #> 3 3     03            1       1418     3 C      Allier          26747       7925 #> 4 4     04            1       1603     4 E      Basses-Al…      12935       7289 #> 5 5     05            1       1802     5 E      Hautes-Al…      17488       8174 #> 6 6     07            1       2249     7 S      Ardeche          9474      10263 #> # ℹ 79 more rows #> # ℹ 21 more variables: literacy <int>, donations <int>, infants <int>, #> #   suicides <int>, main_city <ord>, wealth <int>, commerce <int>, #> #   clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, #> #   prostitutes <int>, distance <dbl>, area <int>, pop1831 <dbl>, #> #   geometry <POINT>, nb <nb>, wt <list> #> # #> # A tibble: 420 × 6 #>    from    to i     j        wt                             geometry #>   <int> <int> <chr> <chr> <dbl>                         <LINESTRING> #> 1     1    36 1     36     0.25   (827911.9 2122906, 855919 2037343) #> 2     1    37 1     37     0.25 (827911.9 2122906, 862938.6 2202980) #> 3     1    67 1     67     0.25 (827911.9 2122906, 776985.9 2100624) #> # ℹ 417 more rows"},{"path":"/reference/st_as_nodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to a node point object — st_as_nodes","title":"Convert to a node point object — st_as_nodes","text":"Given geometry neighbor list, creates sf object used nodes sfnetworks::sfnetwork(). provided geometry polygon, sf::st_point_on_surface() used create node point.","code":""},{"path":"/reference/st_as_nodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to a node point object — st_as_nodes","text":"","code":"st_as_nodes(x, nb)  # S3 method for sf st_as_nodes(x, nb)  # S3 method for sfc st_as_nodes(x, nb)"},{"path":"/reference/st_as_nodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to a node point object — st_as_nodes","text":"x object class sf sfc. nb neighbor list. x class sf, unquote named column. x class sfc, object class nb created st_contiguity().","code":""},{"path":"/reference/st_as_nodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to a node point object — st_as_nodes","text":"object class sf POINT geometry.","code":""},{"path":"/reference/st_as_nodes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert to a node point object — st_as_nodes","text":"st_as_node() adds row based attribute \"region.id\" nb object. nb object created sfdep, values always row indexes.","code":""},{"path":"/reference/st_as_nodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert to a node point object — st_as_nodes","text":"","code":"if (requireNamespace(\"dplyr\", quitly = TRUE)) { library(magrittr) guerry %>%   dplyr::transmute(nb = st_contiguity(geometry)) %>%   st_as_nodes(nb)  } #> Simple feature collection with 85 features and 2 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 143129.7 ymin: 1735692 xmax: 983300.8 ymax: 2615768 #> CRS:           NA #> # A tibble: 85 × 3 #>    i     nb                  geometry #>  * <chr> <nb>                 <POINT> #>  1 1     <int [4]> (827911.9 2122906) #>  2 2     <int [6]> (691725.7 2496059) #>  3 3     <int [6]> (663520.4 2152678) #>  4 4     <int [4]> (908864.9 1915755) #>  5 5     <int [3]> (916568.3 1968490) #>  6 6     <int [7]> (763314.4 1981848) #>  7 7     <int [3]> (771848.4 2525094) #>  8 8     <int [3]> (524182.3 1771794) #>  9 9     <int [5]> (737124.7 2370552) #> 10 10    <int [5]> (614404.6 1783524) #> # ℹ 75 more rows"},{"path":"/reference/st_block_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Block Contiguity for Spatial Regimes — st_block_nb","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"libpysal write \"block contiguity structures relevant defining neighbor relations based membership regime. example, counties belonging state defined neighbors, analysis counties US.\" Source: libpysal","code":""},{"path":"/reference/st_block_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"","code":"st_block_nb(regime, id = 1:length(regime), diag = FALSE)"},{"path":"/reference/st_block_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"regime column identifying spatial regime element id belongs id column identifying unique observations diag default FALSE. TRUE, includes diagonal element / self.","code":""},{"path":"/reference/st_block_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"object class nb. diag = TRUE attribute self.included = TRUE.","code":""},{"path":"/reference/st_block_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Block Contiguity for Spatial Regimes — st_block_nb","text":"","code":"id <- guerry$code_dept regime <- guerry$region st_block_nb(regime, id) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 1360  #> Percentage nonzero weights: 18.82353  #> Average number of links: 16  #> 5 disjoint connected subgraphs"},{"path":"/reference/st_cardinalties.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate neighbor cardinalities — st_cardinalties","title":"Calculate neighbor cardinalities — st_cardinalties","text":"Identify cardinality neighbor object. Utilizes spdep::card() objects class nb, otherwise returns lengths(nb).","code":""},{"path":"/reference/st_cardinalties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate neighbor cardinalities — st_cardinalties","text":"","code":"st_cardinalties(nb)"},{"path":"/reference/st_cardinalties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate neighbor cardinalities — st_cardinalties","text":"nb neighbor list object created st_neighbors().","code":""},{"path":"/reference/st_cardinalties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate neighbor cardinalities — st_cardinalties","text":"integer vector length nb.","code":""},{"path":[]},{"path":"/reference/st_cardinalties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate neighbor cardinalities — st_cardinalties","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) st_cardinalties(nb) #>  [1] 4 6 6 4 3 7 3 3 5 5 7 3 3 6 5 5 6 6 7 3 6 7 2 5 6 6 2 6 6 6 4 4 6 6 5 6 5 4 #> [39] 6 7 5 4 7 6 6 5 8 4 6 6 5 4 5 4 2 6 3 6 6 2 6 3 3 2 4 2 4 5 7 6 2 3 8 6 5 5 #> [77] 5 6 3 6 4 6 6 6 5"},{"path":"/reference/st_complete_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Neighbors as Complete Graph — st_complete_nb","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"Create neighbors list every element related every element. creates complete graph.","code":""},{"path":"/reference/st_complete_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"","code":"st_complete_nb(n_elements, diag = FALSE)"},{"path":"/reference/st_complete_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"n_elements number observations create neighbors list diag default FALSE. TRUE, includes diagonal element / self.","code":""},{"path":"/reference/st_complete_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"neighbors list representing complete graph.","code":""},{"path":"/reference/st_complete_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Neighbors as Complete Graph — st_complete_nb","text":"","code":"st_complete_nb(5) #> Neighbour list object: #> Number of regions: 5  #> Number of nonzero links: 20  #> Percentage nonzero weights: 80  #> Average number of links: 4"},{"path":"/reference/st_contiguity.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify polygon neighbors — st_contiguity","title":"Identify polygon neighbors — st_contiguity","text":"Given sf geometry type POLYGON MULTIPOLYGON identify contiguity based neighbors.","code":""},{"path":"/reference/st_contiguity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify polygon neighbors — st_contiguity","text":"","code":"st_contiguity(geometry, queen = TRUE, ...)"},{"path":"/reference/st_contiguity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify polygon neighbors — st_contiguity","text":"geometry sf sfc object. queen default TRUE. see ?spdep::poly2nb ... additional arguments passed spdep::poly2nb()","code":""},{"path":"/reference/st_contiguity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify polygon neighbors — st_contiguity","text":"list class nb","code":""},{"path":"/reference/st_contiguity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Identify polygon neighbors — st_contiguity","text":"Utilizes spdep::poly2nb()","code":""},{"path":[]},{"path":"/reference/st_contiguity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify polygon neighbors — st_contiguity","text":"","code":"# on basic polygons geo <- sf::st_geometry(guerry) st_contiguity(geo) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 420  #> Percentage nonzero weights: 5.813149  #> Average number of links: 4.941176  if (requireNamespace(\"dplyr\", quietyl = TRUE)) { # in a pipe library(magrittr) guerry %>%   dplyr::mutate(nb = st_contiguity(geometry), .before = 1)  } #> Simple feature collection with 85 features and 27 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 28 #>    nb        code_dept count ave_id_geo  dept region department   crime_pers #>  * <nb>      <fct>     <dbl>      <dbl> <int> <fct>  <fct>             <int> #>  1 <int [4]> 01            1         49     1 E      Ain               28870 #>  2 <int [6]> 02            1        812     2 N      Aisne             26226 #>  3 <int [6]> 03            1       1418     3 C      Allier            26747 #>  4 <int [4]> 04            1       1603     4 E      Basses-Alpes      12935 #>  5 <int [3]> 05            1       1802     5 E      Hautes-Alpes      17488 #>  6 <int [7]> 07            1       2249     7 S      Ardeche            9474 #>  7 <int [3]> 08            1      35395     8 N      Ardennes          35203 #>  8 <int [3]> 09            1       2526     9 S      Ariege             6173 #>  9 <int [5]> 10            1      34410    10 E      Aube              19602 #> 10 <int [5]> 11            1       2807    11 S      Aude              15647 #> # ℹ 75 more rows #> # ℹ 20 more variables: crime_prop <int>, literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, #> #   prostitutes <int>, distance <dbl>, area <int>, pop1831 <dbl>, #> #   geometry <MULTIPOLYGON>"},{"path":"/reference/st_dist_band.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbors from a distance band — st_dist_band","title":"Neighbors from a distance band — st_dist_band","text":"Creates neighbors based distance band. default, creates distance band maximum distance k-nearest neighbors k = 1 (critical threshold) ensure regions missing neighbors.","code":""},{"path":"/reference/st_dist_band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbors from a distance band — st_dist_band","text":"","code":"st_dist_band(geometry, lower = 0, upper = critical_threshold(geometry), ...)"},{"path":"/reference/st_dist_band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbors from a distance band — st_dist_band","text":"geometry sf sfc object. lower lower threshold distance band. recommended keep 0. upper upper threshold distance band. default set critical threshold using critical_threshold() ensuring region minimum one neighbor. ... Passed spdep::dnearneigh().","code":""},{"path":"/reference/st_dist_band.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Neighbors from a distance band — st_dist_band","text":"list class nb","code":""},{"path":[]},{"path":"/reference/st_dist_band.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighbors from a distance band — st_dist_band","text":"","code":"geo <- sf::st_geometry(guerry) st_dist_band(geo, upper = critical_threshold(geo)) #> ! Polygon provided. Using point on surface. #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 274  #> Percentage nonzero weights: 3.792388  #> Average number of links: 3.223529"},{"path":"/reference/st_inverse_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate inverse distance weights — st_inverse_distance","title":"Calculate inverse distance weights — st_inverse_distance","text":"neighbor list sf geometry column, calculate inverse distance weight.","code":""},{"path":"/reference/st_inverse_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate inverse distance weights — st_inverse_distance","text":"","code":"st_inverse_distance(nb, geometry, scale = 100, alpha = 1)"},{"path":"/reference/st_inverse_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate inverse distance weights — st_inverse_distance","text":"nb neighbors list object e.g. created st_knn() st_contiguity() geometry sf geometry scale default 100.value scale distances exponentiating alpha alpha default 1. Set 2 gravity weights.","code":""},{"path":"/reference/st_inverse_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate inverse distance weights — st_inverse_distance","text":"list element numeric vector","code":""},{"path":"/reference/st_inverse_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate inverse distance weights — st_inverse_distance","text":"inverse distance formula \\(w_{ij} = 1 / d_{ij}^\\alpha\\)","code":""},{"path":[]},{"path":"/reference/st_inverse_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate inverse distance weights — st_inverse_distance","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wts <- st_inverse_distance(nb, geo) #> ! Polygon provided. Using point on surface. head(wts, 3) #> [[1]] #> [1] 0.001110733 0.001144174 0.001798959 0.001166951 #>  #> [[2]] #> [1] 0.0011734145 0.0013168726 0.0007953086 0.0011521100 0.0009777799 #> [6] 0.0009476921 #>  #> [[3]] #> [1] 0.0011701250 0.0010803469 0.0010350414 0.0011362283 0.0015060218 #> [6] 0.0008947445 #>  wts <- st_inverse_distance(nb, geo, scale = 10000) #> ! Polygon provided. Using point on surface. head(wts, 3) #> [[1]] #> [1] 0.1110733 0.1144174 0.1798959 0.1166951 #>  #> [[2]] #> [1] 0.11734145 0.13168726 0.07953086 0.11521100 0.09777799 0.09476921 #>  #> [[3]] #> [1] 0.11701250 0.10803469 0.10350414 0.11362283 0.15060218 0.08947445 #>"},{"path":"/reference/st_inverse_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Inverse Distance Bands — st_inverse_weights","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"Calculate Inverse Distance Bands","code":""},{"path":"/reference/st_inverse_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"","code":"st_inverse_weights(x, nb, scale = 100, threshold = NULL)"},{"path":"/reference/st_inverse_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"x Spatial points. Typically geometry column sf object. nb nb neighbor list created st_knn(x, k = 1). scale scaling factor use calculating inverse distance band. threshold critical threshold use distance band.","code":""},{"path":"/reference/st_inverse_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Inverse Distance Bands — st_inverse_weights","text":"See implementation details . distance band based weights see .","code":""},{"path":[]},{"path":"/reference/st_kernel_weight.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Kernel Weights — st_kernel_weight","title":"Calculate Kernel Weights — st_kernel_weight","text":"Calculate Kernel Weights","code":""},{"path":"/reference/st_kernel_weight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Kernel Weights — st_kernel_weight","text":"","code":"st_kernel_weight(x, nb, kernel = \"uniform\", threshold = NULL)"},{"path":"/reference/st_kernel_weight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Kernel Weights — st_kernel_weight","text":"x Spatial points. Typically geometry column sf object. nb nb neighbor list created st_knn(x, k = 1). kernel One \"uniform\", \"gaussian\",  \"triangular\", \"epanechnikov\", \"quartic\". threshold critical threshold use distance band.","code":""},{"path":"/reference/st_kernel_weight.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Kernel Weights — st_kernel_weight","text":"default st_kernel_weight() utilizes critical threshold maximum neighbor distance. desired, critical threshold can specified manually. threshold passed underlying kernel. See kernels .","code":""},{"path":[]},{"path":"/reference/st_kernel_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Kernel Weights — st_kernel_weights","title":"Calculate Kernel Weights — st_kernel_weights","text":"Create weights list using kernel function.","code":""},{"path":"/reference/st_kernel_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Kernel Weights — st_kernel_weights","text":"","code":"st_kernel_weights(   nb,   geometry,   kernel = \"uniform\",   threshold = critical_threshold(geometry),   adaptive = FALSE,   self_kernel = FALSE )"},{"path":"/reference/st_kernel_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Kernel Weights — st_kernel_weights","text":"nb object class nb e.g. created st_contiguity() st_knn(). geometry geometry sf object. kernel One \"uniform\", \"gaussian\",  \"triangular\", \"epanechnikov\", \"quartic\". See kernels . threshold scaling threshold used calculating adaptive default FALSE. TRUE uses maximum neighbor distance region threshold. Suppresses threshold argument. self_kernel default FALSE. TRUE applies kernel function observed region.","code":""},{"path":"/reference/st_kernel_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Kernel Weights — st_kernel_weights","text":"list element numeric vector.","code":""},{"path":"/reference/st_kernel_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Kernel Weights — st_kernel_weights","text":"default st_kernel_weight() utilizes critical threshold maximum neighbor distance using critical_threshold(). desired, critical threshold can specified manually. threshold passed underlying kernel.","code":""},{"path":[]},{"path":"/reference/st_kernel_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Kernel Weights — st_kernel_weights","text":"","code":"geometry <- sf::st_geometry(guerry) nb <- st_contiguity(geometry) nb <- include_self(nb) res <- st_kernel_weights(nb, geometry) #> ! Polygon provided. Using point on surface. head(res, 3) #> [[1]] #> [1] 1.0 0.5 0.5 0.5 0.5 #>  #> [[2]] #> [1] 1.0 0.5 0.5 0.5 0.5 0.5 0.5 #>  #> [[3]] #> [1] 1.0 0.5 0.5 0.5 0.5 0.5 0.5 #>"},{"path":"/reference/st_knn.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate K-Nearest Neighbors — st_knn","title":"Calculate K-Nearest Neighbors — st_knn","text":"Identifies k nearest neighbors given point geometry. polygon geometry provided, centroids polygon used warning emitted.","code":""},{"path":"/reference/st_knn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate K-Nearest Neighbors — st_knn","text":"","code":"st_knn(geometry, k = 1, symmetric = FALSE, ...)"},{"path":"/reference/st_knn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate K-Nearest Neighbors — st_knn","text":"geometry sf sfc object. k number nearest neighbours returned symmetric default FALSE. Whether force output neighbours symmetric. ... additional arguments passed knearneigh().","code":""},{"path":"/reference/st_knn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate K-Nearest Neighbors — st_knn","text":"list class nb","code":""},{"path":"/reference/st_knn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate K-Nearest Neighbors — st_knn","text":"function utilizes spdep::knearneigh() spdep::knn2nb().","code":""},{"path":[]},{"path":"/reference/st_knn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate K-Nearest Neighbors — st_knn","text":"","code":"st_knn(sf::st_geometry(guerry), k = 8) #> ! Polygon provided. Using point on surface. #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 680  #> Percentage nonzero weights: 9.411765  #> Average number of links: 8  #> Non-symmetric neighbours list"},{"path":"/reference/st_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate spatial lag — st_lag","title":"Calculate spatial lag — st_lag","text":"Calculates spatial lag numeric variable given neighbor weights list.","code":""},{"path":"/reference/st_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate spatial lag — st_lag","text":"","code":"st_lag(x, nb, wt, na_ok = FALSE, allow_zero = NULL, ...)"},{"path":"/reference/st_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate spatial lag — st_lag","text":"x numeric vector nb neighbor list object created st_neighbors(). wt weights list created st_weights(). na_ok Default FALSE. , TRUE missing values return lagged NA. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... See ?spdep::lag.listw .","code":""},{"path":"/reference/st_lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate spatial lag — st_lag","text":"numeric vector length x","code":""},{"path":[]},{"path":"/reference/st_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate spatial lag — st_lag","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) wt <- st_weights(nb)  st_lag(guerry$crime_pers, nb, wt) #>  [1] 23047.50 26919.67 26195.50 14401.25 15038.67 15749.00 22111.67 13672.33 #>  [9] 22859.20 11475.20 12200.14 13278.67 24734.00 11752.83 17992.60 21974.40 #> [17] 26711.00 19344.00 23696.71 25108.67 21643.17 18306.00 24280.00 14451.60 #> [25] 21047.67 21421.33 25961.50 10869.83 13415.67 17172.17 20238.25 12504.25 #> [33] 26723.00 21772.83 26462.20 19252.00 24683.20 20607.25 24412.00 19373.71 #> [41] 16000.20 23993.25 20337.86 16818.67 17113.83 13013.00 22133.00 24093.75 #> [49] 25661.67 22190.17 29030.00 16951.00 24509.00 24982.75 19491.50 24176.00 #> [57] 27639.67 21274.33 24510.33 30166.00 23459.00 16184.00 18002.00 10910.00 #> [65] 16251.25 15572.00 25884.25 23020.60 26495.00 24690.50 17339.00 25522.33 #> [73] 18970.00 19701.83 21841.00 24520.40 14025.80 14565.17 13306.67 12579.00 #> [81] 21529.50 23474.50 24373.17 19900.50 23373.60"},{"path":"/reference/st_nb_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to neighbors — st_nb_apply","title":"Apply a function to neighbors — st_nb_apply","text":"Sometimes one may want create custom lag variables create neighborhood level metric may defined yet. st_nb_apply() enables apply function observation's (xi) neighbors (xij).","code":""},{"path":"/reference/st_nb_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to neighbors — st_nb_apply","text":"","code":"st_nb_apply(x, nb, wt, .f, suffix = \"dbl\", ...)"},{"path":"/reference/st_nb_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to neighbors — st_nb_apply","text":"x vector used neighbor xij values. nb neighbor list object created st_neighbors(). wt weights list created st_weights(). .f function definition. three default objects can used inside function definition: .xij: neighbor values x ith observation. simply subset x based corresponding nb list values element. .nb: neighbor positions. .wt: neighbor weights value. three function arguments omitted .f, dots (...) must supplied. suffix map variant use. Options \"dbl\", \"int\", \"lgl\", \"chr\", \"list\". ... arguments pass .f","code":""},{"path":"/reference/st_nb_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to neighbors — st_nb_apply","text":"vector list length x.","code":""},{"path":"/reference/st_nb_apply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply a function to neighbors — st_nb_apply","text":"example calculates spatial lag using st_nb_apply() st_lag() illustrate can apply functions neighbors. Currently questioning use case. find_xj() now exported may negate need function.","code":""},{"path":"/reference/st_nb_apply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to neighbors — st_nb_apply","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE)) { library(magrittr) guerry %>%   dplyr::transmute(     nb = st_contiguity(geometry),     wt = st_weights(nb),     lag_apply = st_nb_apply(       crime_pers, nb, wt,       .f = function(.xij, .wt, ...) sum(.xij *.wt)     ),     lag = st_lag(crime_pers, nb, wt)   ) } #> Simple feature collection with 85 features and 4 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 5 #>    nb        wt        lag_apply    lag                                 geometry #>  * <nb>      <list>        <dbl>  <dbl>                           <MULTIPOLYGON> #>  1 <int [4]> <dbl [4]>    23048. 23048. (((801150 2092615, 800669 2093190, 8006… #>  2 <int [6]> <dbl [6]>    26920. 26920. (((729326 2521619, 729320 2521230, 7292… #>  3 <int [6]> <dbl [6]>    26195. 26195. (((710830 2137350, 711746 2136617, 7124… #>  4 <int [4]> <dbl [4]>    14401. 14401. (((882701 1920024, 882408 1920733, 8817… #>  5 <int [3]> <dbl [3]>    15039. 15039. (((886504 1922890, 885733 1922978, 8854… #>  6 <int [7]> <dbl [7]>    15749  15749  (((747008 1925789, 746630 1925762, 7457… #>  7 <int [3]> <dbl [3]>    22112. 22112. (((818893 2514767, 818614 2514515, 8179… #>  8 <int [3]> <dbl [3]>    13672. 13672. (((509103 1747787, 508820 1747513, 5081… #>  9 <int [5]> <dbl [5]>    22859. 22859. (((775400 2345600, 775068 2345397, 7735… #> 10 <int [5]> <dbl [5]>    11475. 11475. (((626230 1810121, 626269 1810496, 6274… #> # ℹ 75 more rows"},{"path":"/reference/st_nb_band.html","id":null,"dir":"Reference","previous_headings":"","what":"Neighbors from a distance band — st_nb_band","title":"Neighbors from a distance band — st_nb_band","text":"Creates neighbors based distance band.","code":""},{"path":"/reference/st_nb_band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Neighbors from a distance band — st_nb_band","text":"","code":"st_nb_band(x, lower = 0, upper = 0.01, ...)"},{"path":"/reference/st_nb_band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Neighbors from a distance band — st_nb_band","text":"x sf sfc object. lower lower threshold distance band. recommended keep 0. upper upper threshold distance band. ... Passed spdep::dnearneigh().","code":""},{"path":[]},{"path":"/reference/st_nb_band.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Neighbors from a distance band — st_nb_band","text":"","code":"st_nb_band(sf::st_geometry(guerry), upper = 97000) #> ! Polygon provided. Using centroid. #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 314  #> Percentage nonzero weights: 4.346021  #> Average number of links: 3.694118"},{"path":"/reference/st_nb_delaunay.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph based neighbors — st_nb_delaunay","title":"Graph based neighbors — st_nb_delaunay","text":"Create graph based neighbors set points.","code":""},{"path":"/reference/st_nb_delaunay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Graph based neighbors — st_nb_delaunay","text":"","code":"st_nb_delaunay(geometry, .id = NULL)  st_nb_gabriel(geometry, .nnmult = 3)  st_nb_relative(geometry, .nnmult = 3)"},{"path":"/reference/st_nb_delaunay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Graph based neighbors — st_nb_delaunay","text":"geometry object class sfc. polygons used, points generated using sf::st_point_on_surface(). .id default NULL. Passed spdep::tri2nb(x, row.names = .id) spdep. .nnmult default 3. Used memory scalling. See spdep::gabrielneigh() .","code":""},{"path":"/reference/st_nb_delaunay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Graph based neighbors — st_nb_delaunay","text":"object class nb","code":""},{"path":"/reference/st_nb_delaunay.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph based neighbors — st_nb_delaunay","text":"st_nb_delaunay() uses spdep::tri2nb() st_nb_gabriel() uses spdep::gabrielneigh() spdep::graph2nb() st_nb_relative() uses spdep::relativeneigh() spdep::graph2nb() st_nb_delaunay() implements Delaunay triangulation via spdep thus via deldir. Delaunay triangulation creates mesh triangles connects points set. ensures point circumcircle triangle triangulation. result, Delaunay triangulation maximizes minimum angle triangle consequently avoiding skinny triangles. Gabriel graph subgraph Delaunay triangulation. Edges created closed disc two points p, q, contain points besides . relative neighborhood graph (RNG) based Delaunay triangulation. connects two points closer points . RNG subgraph Delaunay triangulation. Note Delaunay triangulation assumes plane thus uses Euclidean distances. See spdep::gabrielneigh() descriptions graph neighbor implementations.","code":""},{"path":"/reference/st_nb_delaunay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph based neighbors — st_nb_delaunay","text":"","code":"geometry <- sf::st_centroid(sf::st_geometry(guerry)) st_nb_delaunay(geometry) #> Warning: style is M (missing); style should be set to a valid value #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 488  #> Percentage nonzero weights: 6.754325  #> Average number of links: 5.741176  st_nb_gabriel(geometry) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 194  #> Percentage nonzero weights: 2.685121  #> Average number of links: 2.282353  #> 16 regions with no links: #> 46 53 54 61 63 64 69 70 74 76 78 80 81 83 84 85 #> Non-symmetric neighbours list st_nb_relative(geometry) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 122  #> Percentage nonzero weights: 1.688581  #> Average number of links: 1.435294  #> 23 regions with no links: #> 27 32 36 37 46 48 53 54 61 63 64 69 70 73 74 76 78 79 80 81 83 84 85 #> Non-symmetric neighbours list"},{"path":"/reference/st_nb_dists.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate neighbor distances — st_nb_dists","title":"Calculate neighbor distances — st_nb_dists","text":"nb list point geometry, return list distances observation's neighbors list.","code":""},{"path":"/reference/st_nb_dists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate neighbor distances — st_nb_dists","text":"","code":"st_nb_dists(x, nb, longlat = NULL)"},{"path":"/reference/st_nb_dists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate neighbor distances — st_nb_dists","text":"x object class sfc. nb neighbor list example created st_contiguity() longlat TRUE point coordinates longitude-latitude decimal degrees, case distances measured kilometers. See ?spdep::nbdists() .","code":""},{"path":"/reference/st_nb_dists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate neighbor distances — st_nb_dists","text":"list element numeric vector.","code":""},{"path":"/reference/st_nb_dists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate neighbor distances — st_nb_dists","text":"Utilizes spdep::nbdists() distance calculation.","code":""},{"path":[]},{"path":"/reference/st_nb_dists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate neighbor distances — st_nb_dists","text":"","code":"geo <- sf::st_geometry(guerry) nb <- st_contiguity(geo) dists <- st_nb_dists(geo, nb) #> ! Polygon provided. Using point on surface.  head(dists) #> [[1]] #> [1] 90030.63 87399.28 55587.69 85693.43 #>  #> [[2]] #> [1]  85221.38  75937.49 125737.35  86797.26 102272.51 105519.50 #>  #> [[3]] #> [1]  85460.95  92562.86  96614.50  88010.48  66400.10 111763.74 #>  #> [[4]] #> [1] 53294.18 98250.20 83762.06 83973.87 #>  #> [[5]] #> [1] 53294.18 86812.56 91755.83 #>  #> [[6]] #> [1]  67062.90  96221.69 107959.75 108017.90  54530.02  75976.27 110723.87 #>"},{"path":"/reference/st_nb_lag.html","id":null,"dir":"Reference","previous_headings":"","what":"Pure Higher Order Neighbors — st_nb_lag","title":"Pure Higher Order Neighbors — st_nb_lag","text":"Identify higher order neighbors neighbor list. order must greater 1. order equals 2 neighbors neighbors list returned forth. See Anselin's book : \"https://spatial.uchicago.edu\" \"/sites/spatial.uchicago.edu/files/1_introandreview_reducedsize.pdf\" example.","code":""},{"path":"/reference/st_nb_lag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pure Higher Order Neighbors — st_nb_lag","text":"","code":"st_nb_lag(nb, order)"},{"path":"/reference/st_nb_lag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pure Higher Order Neighbors — st_nb_lag","text":"nb neighbor list object created st_contiguity(). order order neighbors.","code":""},{"path":"/reference/st_nb_lag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pure Higher Order Neighbors — st_nb_lag","text":"list class nb","code":""},{"path":"/reference/st_nb_lag.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pure Higher Order Neighbors — st_nb_lag","text":"Utilizes spdep::nblag()","code":""},{"path":[]},{"path":"/reference/st_nb_lag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pure Higher Order Neighbors — st_nb_lag","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) st_nb_lag(nb, 3) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 988  #> Percentage nonzero weights: 13.67474  #> Average number of links: 11.62353"},{"path":"/reference/st_nb_lag_cumul.html","id":null,"dir":"Reference","previous_headings":"","what":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"Creates encompassing neighbor list order specified. example, order 2 result contains 1st 2nd order neighbors.","code":""},{"path":"/reference/st_nb_lag_cumul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"","code":"st_nb_lag_cumul(nb, order)"},{"path":"/reference/st_nb_lag_cumul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"nb neighbor list object created st_contiguity(). order order neighbors.","code":""},{"path":"/reference/st_nb_lag_cumul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"list class nb","code":""},{"path":"/reference/st_nb_lag_cumul.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"Utilizes spdep::nblag_cumul()","code":""},{"path":[]},{"path":"/reference/st_nb_lag_cumul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Encompassing Higher Order Neighbors — st_nb_lag_cumul","text":"","code":"nb <- st_contiguity(sf::st_geometry(guerry)) st_nb_lag_cumul(nb, 3) #> Neighbour list object: #> Number of regions: 85  #> Number of nonzero links: 2164  #> Percentage nonzero weights: 29.95156  #> Average number of links: 25.45882"},{"path":"/reference/st_weights.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate spatial weights — st_weights","title":"Calculate spatial weights — st_weights","text":"Calculate polygon spatial weights nb list. See spdep::nb2listw() details.","code":""},{"path":"/reference/st_weights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate spatial weights — st_weights","text":"","code":"st_weights(nb, style = \"W\", allow_zero = NULL, ...)"},{"path":"/reference/st_weights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate spatial weights — st_weights","text":"nb neighbor list object created st_neighbors(). style Default \"W\" row standardized weights. value can also \"B\", \"C\", \"U\", \"minmax\", \"S\". See spdep::nb2listw() details. allow_zero TRUE, assigns zero lagged value zone without neighbors. ... additional arguments passed spdep::nb2listw().","code":""},{"path":"/reference/st_weights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate spatial weights — st_weights","text":"list element numeric vector","code":""},{"path":"/reference/st_weights.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate spatial weights — st_weights","text":"hood, st_weights() creates listw object extracts weights elements neighbours element already--presumably--already existent neighbors list already created. listw objects recreated using recreate_listw() calculating statistics.","code":""},{"path":[]},{"path":"/reference/st_weights.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate spatial weights — st_weights","text":"","code":"if (requireNamespace(\"dplyr\", quietly = TRUE)) { library(magrittr) guerry %>%  dplyr::mutate(nb = st_contiguity(geometry),                wt = st_weights(nb),                .before = 1)  } #> Simple feature collection with 85 features and 28 fields #> Geometry type: MULTIPOLYGON #> Dimension:     XY #> Bounding box:  xmin: 47680 ymin: 1703258 xmax: 1031401 ymax: 2677441 #> CRS:           NA #> # A tibble: 85 × 29 #>    nb        wt    code_dept count ave_id_geo  dept region department crime_pers #>  * <nb>      <lis> <fct>     <dbl>      <dbl> <int> <fct>  <fct>           <int> #>  1 <int [4]> <dbl> 01            1         49     1 E      Ain             28870 #>  2 <int [6]> <dbl> 02            1        812     2 N      Aisne           26226 #>  3 <int [6]> <dbl> 03            1       1418     3 C      Allier          26747 #>  4 <int [4]> <dbl> 04            1       1603     4 E      Basses-Al…      12935 #>  5 <int [3]> <dbl> 05            1       1802     5 E      Hautes-Al…      17488 #>  6 <int [7]> <dbl> 07            1       2249     7 S      Ardeche          9474 #>  7 <int [3]> <dbl> 08            1      35395     8 N      Ardennes        35203 #>  8 <int [3]> <dbl> 09            1       2526     9 S      Ariege           6173 #>  9 <int [5]> <dbl> 10            1      34410    10 E      Aube            19602 #> 10 <int [5]> <dbl> 11            1       2807    11 S      Aude            15647 #> # ℹ 75 more rows #> # ℹ 20 more variables: crime_prop <int>, literacy <int>, donations <int>, #> #   infants <int>, suicides <int>, main_city <ord>, wealth <int>, #> #   commerce <int>, clergy <int>, crime_parents <int>, infanticide <int>, #> #   donation_clergy <int>, lottery <int>, desertion <int>, instruction <int>, #> #   prostitutes <int>, distance <dbl>, area <int>, pop1831 <dbl>, #> #   geometry <MULTIPOLYGON> # using geometry column directly nb <- st_contiguity(guerry$geometry) wt <- st_weights(nb) wt[1:3] #> [[1]] #> [1] 0.25 0.25 0.25 0.25 #>  #> [[2]] #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 #>  #> [[3]] #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 #>"},{"path":"/reference/std_dev_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculation Standard Deviational Ellipse — std_dev_ellipse","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"sf object containing points, calculate standard deviational ellipse.","code":""},{"path":"/reference/std_dev_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"","code":"std_dev_ellipse(geometry)"},{"path":"/reference/std_dev_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"geometry sfc object. polygon, uses sf::st_point_on_surface().","code":""},{"path":"/reference/std_dev_ellipse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"sf object three columns sx: major axis radius CRS units, sy: minor axis radius CRS units, theta: degree rotation ellipse. sf object's geometry center mean point.","code":""},{"path":"/reference/std_dev_ellipse.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"bulk function derived archived CRAN package aspace version 3.2.0.","code":""},{"path":"/reference/std_dev_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculation Standard Deviational Ellipse — std_dev_ellipse","text":"","code":"#' # Make a grid to sample from grd <- sf::st_make_grid(n = c(1, 1), cellsize = c(100, 100), offset = c(0,0))  # sample 100 points pnts <- sf::st_sample(grd, 100) std_dev_ellipse(pnts) #> Simple feature collection with 1 feature and 3 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 52.84892 ymin: 51.07882 xmax: 52.84892 ymax: 51.07882 #> CRS:           NA #>        sx       sy    theta                  geometry #> 1 39.8631 42.98488 133.0087 POINT (52.84892 51.07882)"},{"path":"/reference/std_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate standard distance — std_distance","title":"Calculate standard distance — std_distance","text":"standard distance point pattern measure central tendency. Standard distance measures distance away mean center point pattern similar standard deviations.","code":""},{"path":"/reference/std_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate standard distance — std_distance","text":"","code":"std_distance(geometry)"},{"path":"/reference/std_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate standard distance — std_distance","text":"geometry sfc object. polygon, uses sf::st_point_on_surface().","code":""},{"path":"/reference/std_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate standard distance — std_distance","text":"numeric scalar.","code":""},{"path":[]},{"path":"/reference/std_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate standard distance — std_distance","text":"","code":"# Make a grid to sample from grd <- sf::st_make_grid(n = c(1, 1), cellsize = c(100, 100), offset = c(0,0))  # sample 100 points pnts <- sf::st_sample(grd, 100)  # plot points plot(pnts)   # calculate standard distance std_distance(pnts) #> [1] 37.06036"},{"path":"/reference/sub-.spacetime.html","id":null,"dir":"Reference","previous_headings":"","what":"TODO update times attribute when subset and data is active — [.spacetime","title":"TODO update times attribute when subset and data is active — [.spacetime","text":"TODO update times attribute subset data active","code":""},{"path":"/reference/sub-.spacetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TODO update times attribute when subset and data is active — [.spacetime","text":"","code":"# S3 method for spacetime [(x, ...)"},{"path":"/reference/szero.html","id":null,"dir":"Reference","previous_headings":"","what":"Global sum of weights — szero","title":"Global sum of weights — szero","text":"Calculate global sum weights","code":""},{"path":"/reference/szero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Global sum of weights — szero","text":"","code":"szero(wt)"},{"path":"/reference/szero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Global sum of weights — szero","text":"wt weights list—.e. created st_weights()","code":""},{"path":"/reference/szero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Global sum of weights — szero","text":"scalar numeric","code":""},{"path":"/reference/szero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Global sum of weights — szero","text":"","code":"nb <- st_contiguity(guerry) wt <- st_weights(nb) szero(wt) #> [1] 85"},{"path":"/reference/tidyverse.html","id":null,"dir":"Reference","previous_headings":"","what":"tidyverse methods for spacetime objects — tidyverse","title":"tidyverse methods for spacetime objects — tidyverse","text":"dplyr methods spacetime objects.","code":""},{"path":"/reference/tidyverse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tidyverse methods for spacetime objects — tidyverse","text":"","code":"group_by.spacetime(.data, ...)  mutate.spacetime(.data, ...)  ungroup.spacetime(.data, ...)"},{"path":"/reference/tidyverse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tidyverse methods for spacetime objects — tidyverse","text":".data data frame ... additional arguments","code":""},{"path":"/reference/tidyverse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tidyverse methods for spacetime objects — tidyverse","text":"spacetime object","code":""},{"path":"/reference/wt_as_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert neighbor or weights list to matrix — wt_as_matrix","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"Given nb list weights list, convert matrix.","code":""},{"path":"/reference/wt_as_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"","code":"wt_as_matrix(nb, wt)  nb_as_matrix(nb)"},{"path":"/reference/wt_as_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"nb neighbor list—.e. created st_contiguity(). wt weights list—.e. created st_weights()","code":""},{"path":"/reference/wt_as_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"Returns n x n matrix","code":""},{"path":"/reference/wt_as_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert neighbor or weights list to matrix — wt_as_matrix","text":"","code":"# make a grid g <- sf::st_make_grid(   cellsize = c(10, 10),   offset = c(0, 0),   n = c(2, 2) )  # create neighbors nb <- st_contiguity(g)  # cast to matrix nb_as_matrix(nb) #>   [,1] [,2] [,3] [,4] #> 1    0    1    1    1 #> 2    1    0    1    1 #> 3    1    1    0    1 #> 4    1    1    1    0 #> attr(,\"call\") #> spdep::nb2mat(neighbours = nb, style = \"B\")  # create weights wt <- st_weights(nb)  # cast as matrix wt_as_matrix(nb, wt) #>           [,1]      [,2]      [,3]      [,4] #> [1,] 0.0000000 0.3333333 0.3333333 0.3333333 #> [2,] 0.3333333 0.0000000 0.3333333 0.3333333 #> [3,] 0.3333333 0.3333333 0.0000000 0.3333333 #> [4,] 0.3333333 0.3333333 0.3333333 0.0000000"},{"path":"/news/index.html","id":"sfdep-023","dir":"Changelog","previous_headings":"","what":"sfdep 0.2.3","title":"sfdep 0.2.3","text":"CRAN release: 2023-01-11 remove readr suggestion pass noSuggests CRAN. Much minuscule tasks overlords.","code":""},{"path":"/news/index.html","id":"sfdep-022","dir":"Changelog","previous_headings":"","what":"sfdep 0.2.2","title":"sfdep 0.2.2","text":"CRAN release: 2022-12-22 changes 0.2.1 version bump solely CRAN","code":""},{"path":"/news/index.html","id":"sfdep-021","dir":"Changelog","previous_headings":"","what":"sfdep 0.2.1","title":"sfdep 0.2.1","text":"CRAN release: 2022-12-16 Bivariate Moran uses new spdep implementation faster. , however, return object class boot needs extra work calculate p-value Local join count univariate uses spdep now st_nb_delaunay() uses spdep::tri2nb() st_nb_gabriel() uses spdep::gabrielneigh() spdep::graph2nb() st_nb_relative() uses spdep::relativeneigh() spdep::graph2nb() activate() now exported generic method longer conflict tidygraph st_as_graph() now creates undirected graphs node_get_nbs(): converts node adjacency list neighbor list node_get_edge_list(): creates edge adjacency list used get edge attribute columns node_get_edge_col(): uses edge list get edge attributes turn weight like list","code":""},{"path":"/news/index.html","id":"sfdep-020","dir":"Changelog","previous_headings":"","what":"sfdep 0.2.0","title":"sfdep 0.2.0","text":"CRAN release: 2022-08-15 spatial_gini() new global measure pracma now added suggested package center_mean() center_median() added point pattern analysis tally_jc() returns join count matrix via spdep::joincount.multi() data.frame object st_complete_nb() creates complete graph neighbors set operations neighbor lists nb_union(), nb_intersect(), nb_setdiff() inspired https://pysal.org/libpysal/generated/libpysal.weights.block_weights.html critical_threshold() gains argument k identify minimum number neighbors calculating threshold pct_nonzero() calculates percent non-zero neighbors szero() calculate global sum weights nb_as_matrix() wt_as_matrix() convert neighbor weights lists matrices two new functions include_self() based spdep::include.self() new remove_self() available separately spdep due issue 83 spdep::remove.self(). local_g_perm() returns correct G statistic. Previously returned internal measure. local_gstar() local_gstar_perm() warn self.included = TRUE emerging_hotspot_analysis() implements emerging hotspot analysis spacetime objects see spacetime vignette. global_colocation() global colocation one categorical variable pairwise_colocation() asymmetric colocation subcategories one two categories local_colocation() local CLQ measure functions fast! PRs welcomed improve computation speed. st_kernel_weights() now returns attribute kernel set value kernel argument cond_permute_nb() specifies SIMPLIFY = FALSE internal mapply() call causing errors creating conditionally permuted neighbor lists","code":""},{"path":"/news/index.html","id":"sfdep-010","dir":"Changelog","previous_headings":"","what":"sfdep 0.1.0","title":"sfdep 0.1.0","text":"CRAN release: 2022-04-20 Released CRAN! Sending initial CRAN release","code":""}]
